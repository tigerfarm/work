{"version":3,"file":"lib.js","sources":["../src/retrier.ts","../src/backoff.ts"],"sourcesContent":["import { EventEmitter } from \"events\";\n\n/**\n * Provides retrier service\n */\nclass Retrier extends EventEmitter {\n  private readonly minDelay: number;\n  private maxDelay: number;\n  private readonly initialDelay: number;\n  private readonly maxAttemptsCount: number;\n  private readonly maxAttemptsTime: number;\n  private readonly randomness: number;\n\n  // fibonacci strategy\n  private prevDelay: number;\n  private currDelay: number;\n\n  private timeout: ReturnType<typeof setTimeout> | null = null;\n  private inProgress: boolean;\n  private attemptNum: number;\n  private startTimestamp = -1;\n\n  /**\n   * Creates a new Retrier instance\n   */\n  constructor(options: {\n    min: number;\n    max: number;\n    initial?: number;\n    maxAttemptsCount?: number;\n    maxAttemptsTime?: number;\n    randomness?: number;\n  }) {\n    super();\n\n    this.minDelay = options.min;\n    this.maxDelay = options.max;\n    this.initialDelay = options.initial || 0;\n    this.maxAttemptsCount = options.maxAttemptsCount || 0;\n    this.maxAttemptsTime = options.maxAttemptsTime || 0;\n    this.randomness = options.randomness || 0;\n\n    this.inProgress = false;\n    this.attemptNum = 0;\n\n    this.prevDelay = 0;\n    this.currDelay = 0;\n  }\n\n  private attempt() {\n    if (this.timeout) {\n      clearTimeout(this.timeout);\n      this.timeout = null;\n    }\n\n    this.attemptNum++;\n    this.emit(\"attempt\", this);\n  }\n\n  private nextDelay(delayOverride?: number): number {\n    if (typeof delayOverride === \"number\") {\n      this.prevDelay = 0;\n      this.currDelay = delayOverride;\n      return delayOverride;\n    }\n\n    if (this.attemptNum == 0) {\n      return this.initialDelay;\n    }\n\n    if (this.attemptNum == 1) {\n      this.currDelay = this.minDelay;\n      return this.currDelay;\n    }\n\n    this.prevDelay = this.currDelay;\n\n    let delay = this.currDelay + this.prevDelay;\n\n    if (this.maxDelay && delay > this.maxDelay) {\n      this.currDelay = this.maxDelay;\n      delay = this.maxDelay;\n    }\n\n    this.currDelay = delay;\n    return delay;\n  }\n\n  private randomize(delay: number) {\n    const area = delay * this.randomness;\n    const corr = Math.round(Math.random() * area * 2 - area);\n    return Math.max(0, delay + corr);\n  }\n\n  private scheduleAttempt(delayOverride?: number) {\n    if (this.maxAttemptsCount && this.attemptNum >= this.maxAttemptsCount) {\n      this.cleanup();\n      this.emit(\"failed\", new Error(\"Maximum attempt count limit reached\"));\n      return;\n    }\n\n    let delay = this.nextDelay(delayOverride);\n    delay = this.randomize(delay);\n    if (\n      this.maxAttemptsTime &&\n      this.startTimestamp + this.maxAttemptsTime < Date.now() + delay\n    ) {\n      this.cleanup();\n      this.emit(\"failed\", new Error(\"Maximum attempt time limit reached\"));\n      return;\n    }\n\n    this.timeout = setTimeout(() => this.attempt(), delay);\n  }\n\n  private cleanup() {\n    if (this.timeout) {\n      clearTimeout(this.timeout);\n      this.timeout = null;\n    }\n    this.inProgress = false;\n\n    this.attemptNum = 0;\n    this.prevDelay = 0;\n    this.currDelay = 0;\n  }\n\n  public start(): void {\n    if (this.inProgress) {\n      throw new Error(\"Retrier is already in progress\");\n    }\n\n    this.inProgress = true;\n    this.startTimestamp = Date.now();\n    this.scheduleAttempt(this.initialDelay);\n  }\n\n  public cancel(): void {\n    if (this.timeout) {\n      clearTimeout(this.timeout);\n      this.timeout = null;\n      this.inProgress = false;\n\n      this.emit(\"cancelled\");\n    }\n  }\n\n  // @todo Must be a T here, so the entire Retrier must be typed on this value type.\n  // eslint-disable-next-line\n  public succeeded(arg?: any): void {\n    this.emit(\"succeeded\", arg);\n  }\n\n  public failed(err: Error, nextAttemptDelayOverride?: number): void {\n    if (this.timeout) {\n      throw new Error(\"Retrier attempt is already in progress\");\n    }\n\n    this.scheduleAttempt(nextAttemptDelayOverride);\n  }\n}\n\n/**\n * Run retrier as an async function with possibility to await for it.\n * Example:\n * ```\n * const result = AsyncRetrier.run(async () => somePromise);\n * ```\n */\nclass AsyncRetrier extends EventEmitter {\n  private retrier: Retrier;\n  // This any must be T typed directly on the AsyncRetrier\n  // eslint-disable-next-line\n  private resolve: (value: any) => void = () => void 0;\n  private reject: (err?: Error) => void = () => void 0;\n\n  constructor(options: {\n    min: number;\n    max: number;\n    initial?: number;\n    maxAttemptsCount?: number;\n    maxAttemptsTime?: number;\n    randomness?: number;\n  }) {\n    super();\n    this.retrier = new Retrier(options);\n  }\n\n  public run<T>(handler: () => Promise<T>): Promise<T> {\n    this.retrier.on(\"attempt\", () => {\n      handler()\n        .then((v) => this.retrier.succeeded(v))\n        .catch((e) => this.retrier.failed(e));\n    });\n\n    this.retrier.on(\"succeeded\", (arg) => this.resolve(arg));\n    this.retrier.on(\"cancelled\", () => this.reject(new Error(\"Cancelled\")));\n    this.retrier.on(\"failed\", (err) => this.reject(err));\n\n    return new Promise<T>((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n\n      this.retrier.start();\n    });\n  }\n\n  public cancel(): void {\n    this.retrier.cancel();\n  }\n}\n\nexport { Retrier, AsyncRetrier };\n","import { EventEmitter } from \"events\";\n\nfunction isDef(value: number | undefined | null): value is number {\n  return value !== undefined && value !== null;\n}\n\nexport interface BackoffOptions {\n  initialDelay?: number;\n  maxDelay?: number;\n  randomisationFactor?: number;\n  factor?: number;\n}\n\nclass Backoff extends EventEmitter {\n  private readonly maxDelay: number;\n  private readonly initialDelay: number;\n  private readonly factor: number;\n  private readonly randomisationFactor: number;\n  private backoffDelay = 0;\n  private nextBackoffDelay = 0;\n  private backoffNumber = 0;\n  private timeoutID: ReturnType<typeof setTimeout> | null = null;\n  private maxNumberOfRetry = -1;\n\n  constructor(options: BackoffOptions) {\n    super();\n    options = options || {};\n    const { initialDelay, maxDelay, randomisationFactor, factor } = options;\n\n    if (isDef(initialDelay) && initialDelay < 1) {\n      throw new Error(\n        \"The initial timeout must be equal to or greater than 1.\"\n      );\n    }\n    if (isDef(maxDelay) && maxDelay <= 1) {\n      throw new Error(\"The maximal timeout must be greater than 1.\");\n    }\n    if (\n      isDef(randomisationFactor) &&\n      (randomisationFactor < 0 || randomisationFactor > 1)\n    ) {\n      throw new Error(\"The randomisation factor must be between 0 and 1.\");\n    }\n    if (isDef(factor) && factor <= 1) {\n      throw new Error(`Exponential factor should be greater than 1.`);\n    }\n\n    this.initialDelay = initialDelay || 100;\n    this.maxDelay = maxDelay || 10000;\n    if (this.maxDelay <= this.initialDelay) {\n      throw new Error(\n        \"The maximal backoff delay must be greater than the initial backoff delay.\"\n      );\n    }\n    this.randomisationFactor = randomisationFactor || 0;\n    this.factor = factor || 2;\n    this.reset();\n  }\n\n  public static exponential(options: BackoffOptions): Backoff {\n    return new Backoff(options);\n  }\n\n  public backoff(err?: Error): void {\n    if (this.timeoutID == null) {\n      if (this.backoffNumber === this.maxNumberOfRetry) {\n        this.emit(\"fail\", err);\n        this.reset();\n      } else {\n        this.backoffDelay = this.next();\n        this.timeoutID = setTimeout(\n          this.onBackoff.bind(this),\n          this.backoffDelay\n        );\n        this.emit(\"backoff\", this.backoffNumber, this.backoffDelay, err);\n      }\n    }\n  }\n\n  public reset(): void {\n    this.backoffDelay = 0;\n    this.nextBackoffDelay = this.initialDelay;\n    this.backoffNumber = 0;\n    if (this.timeoutID) {\n      clearTimeout(this.timeoutID);\n    }\n    this.timeoutID = null;\n  }\n\n  public failAfter(maxNumberOfRetry: number): void {\n    if (maxNumberOfRetry <= 0) {\n      throw new Error(\n        `Expected a maximum number of retry greater than 0 but got ${maxNumberOfRetry}`\n      );\n    }\n\n    this.maxNumberOfRetry = maxNumberOfRetry;\n  }\n\n  next(): number {\n    this.backoffDelay = Math.min(this.nextBackoffDelay, this.maxDelay);\n    this.nextBackoffDelay = this.backoffDelay * this.factor;\n    const randomisationMultiple = 1 + Math.random() * this.randomisationFactor;\n    return Math.min(\n      this.maxDelay,\n      Math.round(this.backoffDelay * randomisationMultiple)\n    );\n  }\n\n  onBackoff(): void {\n    this.timeoutID = null;\n    this.emit(\"ready\", this.backoffNumber, this.backoffDelay);\n    this.backoffNumber++;\n  }\n}\n\nexport { Backoff };\nexport default Backoff;\n"],"names":["EventEmitter"],"mappings":"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"}