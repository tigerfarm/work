{"version":3,"file":"lib.js","sources":["../node_modules/tslib/tslib.es6.js","../src/logger.ts","../src/configuration.ts","../src/util/index.ts","../src/restpaginator.ts","../src/channeldescriptor.ts","../src/data/publicchannels.ts","../src/services/network.ts","../src/interfaces/notificationtypes.ts","../src/member.ts","../src/data/members.ts","../src/media.ts","../src/message.ts","../src/data/messages.ts","../src/channel.ts","../src/util/deferred.ts","../src/data/channels.ts","../src/user.ts","../src/userdescriptor.ts","../src/data/userdescriptors.ts","../src/data/users.ts","../src/services/typingindicator.ts","../src/data/userchannels.ts","../src/pushnotification.ts","../src/commandexecutor.ts","../src/client.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || from);\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","import * as loglevelLog from 'loglevel';\n\nfunction prepareLine(prefix, args) {\n  return [`${new Date().toISOString()} Chat ${prefix}:`].concat(Array.from(args));\n}\n\nconst log: loglevelLog.Logger = loglevelLog.getLogger('twilio-chat'); // twilio-chat is used by Flex SDK. Please DO NOT change\n\nclass Logger {\n  private prefix: string = '';\n\n  private constructor(prefix: string) {\n    this.prefix = prefix !== null && prefix !== undefined && prefix.length > 0\n      ? prefix + ' '\n      : '';\n  }\n\n  static scope(prefix: string): Logger {\n    return new Logger(prefix);\n  }\n\n  setLevel(level: any) {\n    log.setLevel(level);\n  }\n\n  static setLevel(level: any) {\n    log.setLevel(level);\n  }\n\n  trace(...args) { log.trace.apply(null, prepareLine(this.prefix + 'T', args)); }\n\n  debug(...args) { log.debug.apply(null, prepareLine(this.prefix + 'D', args)); }\n\n  info(...args) { log.info.apply(null, prepareLine(this.prefix + 'I', args)); }\n\n  warn(...args) { log.warn.apply(null, prepareLine(this.prefix + 'W', args)); }\n\n  error(...args) { log.error.apply(null, prepareLine(this.prefix + 'E', args)); }\n\n  static trace(...args) { log.trace.apply(null, prepareLine('T', args)); }\n\n  static debug(...args) { log.debug.apply(null, prepareLine('D', args)); }\n\n  static info(...args) { log.info.apply(null, prepareLine('I', args)); }\n\n  static warn(...args) { log.warn.apply(null, prepareLine('W', args)); }\n\n  static error(...args) { log.error.apply(null, prepareLine('E', args)); }\n\n}\n\nexport { Logger };\n","import { CommandExecutor } from './commandexecutor';\nimport { ConfigurationResponse } from './interfaces/commands/configuration';\nimport { parse as parseDuration, toSeconds } from 'iso8601-duration';\nimport { Logger } from './logger';\n\nconst TYPING_TIMEOUT = 5;\nconst HTTP_CACHE_LIFETIME = 'PT5S';\nconst CONSUMPTION_HORIZON_SENDING_INTERVAL = 'PT5S';\nconst USER_INFOS_TO_SUBSCRIBE = 100;\n\nconst MINIMUM_RETRY_DELAY = 1000;\nconst MAXIMUM_RETRY_DELAY = 4000;\nconst MAXIMUM_ATTEMPTS_COUNT = 3;\nconst RETRY_WHEN_THROTTLED = true;\n\ninterface BackoffConfiguration {\n  min: number;\n  max: number;\n  maxAttemptsCount: number;\n}\n\ninterface ConfigurationServices {\n  commandExecutor: CommandExecutor;\n}\n\nclass Configuration {\n  public readonly links: {\n    myConversations: string;\n    conversations: string;\n    users: string;\n    currentUser: string;\n    typing: string;\n    mediaService: string;\n    messagesReceipts: string;\n  };\n\n  public readonly productId?: string;\n\n  public readonly typingIndicatorTimeoutOverride?: number;\n  public readonly typingIndicatorTimeoutDefault: number = TYPING_TIMEOUT * 1000;\n  public readonly backoffConfiguration: BackoffConfiguration;\n  public readonly retryWhenThrottled: boolean;\n\n  public readonly consumptionReportInterval: number;\n  public readonly userInfosToSubscribe: number;\n  public readonly httpCacheInterval: number;\n  public readonly reachabilityEnabled: boolean;\n\n  public readonly userIdentity: string;\n  public readonly userInfo: string;\n  public readonly myConversations: string;\n\n  constructor(\n    options: Record<string, any> = {},\n    configurationResponse: ConfigurationResponse,\n    logger: Logger\n  ) {\n    const constructorOptions = options.Chat || options.IPMessaging || options || {};\n\n    this.productId = constructorOptions.productId;\n\n    this.links = {\n      myConversations: configurationResponse.links.my_conversations,\n      conversations: configurationResponse.links.conversations,\n      users: configurationResponse.links.users,\n      currentUser: configurationResponse.links.current_user,\n      typing: configurationResponse.links.typing,\n      mediaService: configurationResponse.links.media_service,\n      messagesReceipts: configurationResponse.links.messages_receipts\n    };\n\n    this.typingIndicatorTimeoutOverride = constructorOptions.typingIndicatorTimeoutOverride;\n    this.backoffConfiguration = {\n      min: MINIMUM_RETRY_DELAY,\n      max: MAXIMUM_RETRY_DELAY,\n      maxAttemptsCount: MAXIMUM_ATTEMPTS_COUNT,\n      ...constructorOptions.backoffConfigOverride\n    };\n    this.retryWhenThrottled = constructorOptions.retryWhenThrottledOverride !== undefined\n      ? constructorOptions.retryWhenThrottledOverride\n      : RETRY_WHEN_THROTTLED;\n    this.userInfosToSubscribe = constructorOptions.userInfosToSubscribeOverride\n      || configurationResponse.options.user_infos_to_subscribe\n      || USER_INFOS_TO_SUBSCRIBE;\n    this.reachabilityEnabled = configurationResponse.options.reachability_enabled;\n    this.userIdentity = configurationResponse.identity;\n    this.userInfo = configurationResponse.sync_objects.my_user_info;\n    this.myConversations = configurationResponse.sync_objects.my_conversations;\n\n    const httpCacheInterval = constructorOptions.httpCacheIntervalOverride\n      || configurationResponse.options.http_cache_interval\n      || HTTP_CACHE_LIFETIME;\n\n    try {\n      this.httpCacheInterval = toSeconds(parseDuration(httpCacheInterval));\n    } catch {\n      logger.error(`Failed to parse http cache interval ${httpCacheInterval}, using default value ${HTTP_CACHE_LIFETIME}`);\n      this.httpCacheInterval = toSeconds(parseDuration(HTTP_CACHE_LIFETIME));\n    }\n\n    const consumptionReportInterval = constructorOptions.consumptionReportIntervalOverride\n      || configurationResponse.options.consumption_report_interval\n      || CONSUMPTION_HORIZON_SENDING_INTERVAL;\n\n    try {\n      this.consumptionReportInterval = toSeconds(parseDuration(consumptionReportInterval));\n    } catch {\n      logger.error(\n        `Failed to parse consumption report interval ${consumptionReportInterval}, using default value ${CONSUMPTION_HORIZON_SENDING_INTERVAL}`\n      );\n      this.consumptionReportInterval = toSeconds(parseDuration(CONSUMPTION_HORIZON_SENDING_INTERVAL));\n    }\n  }\n}\n\nexport { Configuration };","import * as JsonDiff from 'rfc6902';\nimport { Logger } from '../logger';\n\n/**\n * Checks if objects are equal\n */\nfunction isDeepEqual(o1: Object, o2: Object): boolean {\n  return JsonDiff.createPatch(o1, o2).length === 0;\n}\n\n/**\n * Deep-clone an object. Note that this does not work on object containing\n * functions.\n * @param {object} obj - the object to deep-clone\n * @returns {object}\n */\nfunction deepClone<T>(obj: T): T {\n  return JSON.parse(JSON.stringify(obj)) as T;\n}\n\nfunction parseToNumber(value) {\n  if (typeof value !== 'undefined' && !isNaN(Number(value))) {\n    return Number(value);\n  }\n  return null;\n}\n\n// timeString cannot be typed `string` because in member.ts\n// call to parseTime(data.lastConsumptionTimestamp) uses number not a string for timestamp.\nfunction parseTime(timeString): Date {\n  try {\n    return new Date(timeString);\n  } catch (e) {\n    return null;\n  }\n}\n\nfunction parseAttributes(rawAttributes, warningMessage: string, log: Logger): Object {\n  let attributes = {};\n  if (rawAttributes) {\n    try {\n      attributes = JSON.parse(rawAttributes);\n    } catch (e) {\n      log.warn(warningMessage, e);\n    }\n  }\n\n  return attributes;\n}\n\n/**\n * Construct URI with query parameters\n */\nclass UriBuilder {\n  private base: string;\n  private args: string[];\n  private paths: string[];\n\n  constructor(base: string) {\n    this.base = base.replace(/\\/$/, '');\n    this.args = [];\n    this.paths = [];\n  }\n\n  public arg(name: string, value: any): UriBuilder {\n    if (typeof value !== 'undefined') {\n      this.args.push(encodeURIComponent(name) + '=' + encodeURIComponent(value));\n    }\n    return this;\n  }\n\n  public path(name: string): UriBuilder {\n    this.paths.push(encodeURIComponent(name));\n    return this;\n  }\n\n  public build(): string {\n    let result = this.base;\n    if (this.paths.length) {\n      result += '/' + this.paths.join('/');\n    }\n\n    if (this.args.length) {\n      result += '?' + this.args.join('&');\n    }\n    return result;\n  }\n}\n\nexport { isDeepEqual, deepClone, UriBuilder, parseToNumber, parseTime, parseAttributes };\n","'use strict';\nimport { Paginator } from './interfaces/paginator';\n\ninterface PaginatorState {\n  source: any;\n  nextToken: any;\n  prevToken: any;\n  items: any;\n}\n\n/**\n * @class Paginator\n * @classdesc Pagination helper class\n *\n * @property {Array} items Array of elements on current page\n * @property {boolean} hasNextPage Indicates the existence of next page\n * @property {boolean} hasPrevPage Indicates the existence of previous page\n */\nclass RestPaginator<T> implements Paginator<T> {\n  private state: PaginatorState;\n\n  public get hasNextPage(): boolean { return !!this.state.nextToken; }\n\n  public get hasPrevPage(): boolean { return !!this.state.prevToken; }\n\n  public get items(): Array<T> { return this.state.items; }\n\n  /*\n  * @constructor\n  * @param {Array} items Array of element for current page\n  * @param {Object} params\n  * @private\n  */\n  constructor(items, source, prevToken, nextToken) {\n\n    this.state = {\n      prevToken,\n      nextToken,\n      source,\n      items\n    };\n  }\n\n  nextPage(): Promise<RestPaginator<T>> {\n    return this.hasNextPage ? this.state.source(this.state.nextToken) : Promise.reject(new Error('No next page'));\n  }\n\n  prevPage(): Promise<RestPaginator<T>> {\n    return this.hasPrevPage ? this.state.source(this.state.prevToken) : Promise.reject(new Error('No previous page'));\n  }\n}\n\nexport { RestPaginator };\n","import { Logger } from './logger';\nimport { Channel } from './channel';\nimport { Client } from './client';\nimport { parseAttributes, parseTime } from './util';\n\nconst log = Logger.scope('ChannelDescriptor');\n\n/**\n * Contains channel information.\n * Unlike {@link Channel}, this information won't be updated in realtime.\n * To have a fresh data, user should query channel descriptors again.\n *\n * @property {any} attributes - The Channel's custom attributes\n * @property {String} createdBy - The identity of the User that created Channel\n * @property {Date} dateCreated - The Date Channel was created\n * @property {Date} dateUpdated - The Date Channel was last updated\n * @property {String} friendlyName - The Channel's name\n * @property {Boolean} isPrivate - Whether the channel is private (as opposed to public)\n * @property {Number} lastConsumedMessageIndex - Index of the last Message the User has consumed in Channel\n * @property {Number} membersCount Number of members in a channel\n * @property {Number} messagesCount Number of messages in a channel\n * @property {String} sid - The Channel's unique system identifier\n * @property {Channel#Status} status - The Channel's status\n * @property {Channel#Type} type - The Channel's type\n * @property {String} uniqueName - The Channel's unique name\n */\nclass ChannelDescriptor {\n  public client: Client;\n  public descriptor: any;\n\n  public readonly sid: string;\n  public readonly channel: string;\n  public readonly uniqueName: string;\n  public readonly friendlyName: string;\n  public readonly attributes: any;\n  public readonly createdBy: string;\n  public readonly dateCreated: Date;\n  public readonly dateUpdated: Date;\n  public readonly messagesCount: number;\n  public readonly membersCount: number;\n  public readonly lastConsumedMessageIndex: number;\n  public readonly status: Channel.Status;\n  public readonly type: Channel.Type;\n  public readonly isPrivate: boolean;\n  public readonly notificationLevel: Channel.NotificationLevel;\n\n  /**\n   * @param {Client} client Chat client instance\n   * @param {Object} descriptor Channel descriptor data object\n   * @private\n   */\n  constructor(client: Client, descriptor: any) {\n    this.client = client;\n    this.descriptor = descriptor;\n\n    this.sid = descriptor.sid || descriptor.conversation_sid;\n    this.channel = `${this.sid}.channel`;\n    this.uniqueName = descriptor.unique_name;\n    this.friendlyName = descriptor.friendly_name;\n    this.attributes = parseAttributes(descriptor.attributes, 'Failed to parse channel attributes', log);\n    this.createdBy = descriptor.created_by;\n    this.dateCreated = parseTime(descriptor.date_created);\n    this.dateUpdated = parseTime(descriptor.date_updated);\n    this.messagesCount = descriptor.messages_count;\n    this.membersCount = descriptor.participants_count;\n    this.type = descriptor.type;\n    this.isPrivate = descriptor.type === 'private';\n    this.lastConsumedMessageIndex = descriptor.last_consumed_message_index;\n    this.notificationLevel = descriptor.notification_level || undefined;\n    this.status = descriptor.status || 'unknown';\n  }\n\n  /**\n   * Get channel object from descriptor.\n   * @returns {Promise<Channel>}\n   */\n  getChannel(): Promise<Channel> {\n    return this.client.getChannelBySid(this.sid);\n  }\n}\n\nexport { ChannelDescriptor };\n","import { UriBuilder } from '../util/index';\nimport { RestPaginator } from '../restpaginator';\nimport { ChannelDescriptor } from '../channeldescriptor';\nimport { Network } from '../services/network';\nimport { Client } from '../client';\n\nexport interface PublicChannelServices {\n  network: Network;\n}\n\n/**\n * Public channels collection\n * It's a cassandra-backed pull-based collection\n */\nclass PublicChannels {\n  private client: Client;\n  private services: PublicChannelServices;\n  private url: string;\n\n  constructor(client: Client, services: PublicChannelServices, url: string) {\n    this.client = client;\n    this.services = services;\n    this.url = url;\n  }\n\n  public async getChannels(args: any = {}): Promise<RestPaginator<ChannelDescriptor>> {\n    const url = new UriBuilder(this.url).arg('PageToken', args.pageToken).build();\n    let response = await this.services.network.get(url);\n    return new RestPaginator<ChannelDescriptor>(response.body.conversations.map(x => new ChannelDescriptor(this.client, x))\n      , pageToken => this.getChannels({ pageToken })\n      , response.body.meta.previous_token\n      , response.body.meta.next_token);\n  }\n\n  public async getChannelBySid(sid: string): Promise<ChannelDescriptor> {\n    const url = new UriBuilder(this.url).path(sid).build();\n    let response = await this.services.network.get(url);\n    return new ChannelDescriptor(this.client, response.body);\n  }\n\n  public async getChannelByUniqueName(uniqueName: string): Promise<ChannelDescriptor> {\n    const url = new UriBuilder(this.url).path(uniqueName).build();\n    let response = await this.services.network.get(url);\n    return new ChannelDescriptor(this.client, response.body);\n  }\n}\n\nexport { PublicChannels };\n","import { Retrier } from 'operation-retrier';\nimport { Transport } from '../interfaces/transport';\nimport { Configuration } from '../configuration';\n\ninterface CacheEntry {\n  response: Object;\n  timestamp: number;\n}\n\nexport interface NetworkServices {\n  transport: Transport;\n}\n\nclass Network {\n  private readonly cacheLifetime: number;\n  private readonly cache: Map<string, CacheEntry>;\n  private timer: any;\n\n  constructor(\n    private readonly configuration: Configuration,\n    private readonly services: NetworkServices\n  ) {\n    this.cache = new Map<string, CacheEntry>();\n    this.cacheLifetime = this.configuration.httpCacheInterval * 100;\n    this.cleanupCache();\n  }\n\n  private isExpired(timestamp: number): boolean {\n    return !this.cacheLifetime || (Date.now() - timestamp) > this.cacheLifetime;\n  }\n\n  private cleanupCache() {\n    for (let [k, v] of this.cache) {\n      if (this.isExpired(v.timestamp)) {\n        this.cache.delete(k);\n      }\n    }\n\n    if (this.cache.size === 0) {\n      clearInterval(this.timer);\n    }\n  }\n\n  pokeTimer() {\n    this.timer = this.timer || setInterval(() => this.cleanupCache(), this.cacheLifetime * 2);\n  }\n\n  private executeWithRetry(request, retryWhenThrottled = false): Promise<any> {\n    return new Promise((resolve, reject) => {\n      let codesToRetryOn = [502, 503, 504];\n      if (retryWhenThrottled) {\n        codesToRetryOn.push(429);\n      }\n\n      let retrier = new Retrier(this.configuration.backoffConfiguration);\n      retrier.on('attempt', () => {\n        request()\n          .then(result => retrier.succeeded(result))\n          .catch(err => {\n            if (codesToRetryOn.indexOf(err.status) > -1) {\n              retrier.failed(err);\n            } else if (err.message === 'Twilsock disconnected') {\n              // Ugly hack. We must make a proper exceptions for twilsock\n              retrier.failed(err);\n            } else {\n              // Fatal error\n              retrier.removeAllListeners();\n              retrier.cancel();\n              reject(err);\n            }\n          });\n      });\n\n      retrier.on('succeeded', result => { resolve(result); });\n      retrier.on('cancelled', err => reject(err));\n      retrier.on('failed', err => reject(err));\n\n      retrier.start();\n    });\n  }\n\n  async get(url: string) {\n    let cacheEntry = this.cache.get(url);\n    if (cacheEntry && !this.isExpired(cacheEntry.timestamp)) {\n      return cacheEntry.response;\n    }\n\n    const headers = {};\n    let response = await this.executeWithRetry(\n      () => this.services.transport.get(url, headers, this.configuration.productId), this.configuration.retryWhenThrottled);\n    this.cache.set(url, { response, timestamp: Date.now() });\n    this.pokeTimer();\n    return response;\n  }\n}\n\nexport { Network };\n","class NotificationTypes {\n  static readonly TYPING_INDICATOR = 'twilio.ipmsg.typing_indicator';\n  static readonly NEW_MESSAGE = 'twilio.channel.new_message';\n  static readonly ADDED_TO_CHANNEL = 'twilio.channel.added_to_channel';\n  static readonly INVITED_TO_CHANNEL = 'twilio.channel.invited_to_channel';\n  static readonly REMOVED_FROM_CHANNEL = 'twilio.channel.removed_from_channel';\n  static readonly CONSUMPTION_UPDATE = 'twilio.channel.consumption_update';\n}\n\nexport { NotificationTypes };","import { EventEmitter } from 'events';\nimport { UserDescriptor } from './userdescriptor';\nimport { Users } from './data/users';\nimport { User } from './user';\nimport { isDeepEqual, parseTime, parseAttributes } from './util';\nimport { Logger } from './logger';\nimport { validateTypesAsync, literal } from 'twilio-sdk-type-validator';\nimport { Channel } from './channel';\nimport { CommandExecutor } from './commandexecutor';\nimport { EditMemberRequest, EditMemberResponse } from './interfaces/commands/editmember';\n\nconst log = Logger.scope('Member');\n\ninterface MemberDescriptor {\n  attributes?: Object;\n  dateCreated: any;\n  dateUpdated: any;\n  identity: string;\n  roleSid?: string;\n  lastConsumedMessageIndex: number;\n  lastConsumptionTimestamp: number;\n  type?: Member.Type;\n  userInfo: string;\n}\n\ninterface MemberState {\n  attributes: any;\n  dateCreated: Date;\n  dateUpdated: Date;\n  identity: string;\n  isTyping: boolean;\n  lastConsumedMessageIndex: number | null;\n  lastConsumptionTimestamp: Date;\n  roleSid: string;\n  sid: string;\n  type: Member.Type;\n  typingTimeout: any;\n  userInfo: string;\n}\n\nexport interface MemberServices {\n  users: Users;\n  commandExecutor: CommandExecutor;\n}\n\ninterface MemberLinks {\n  self: string;\n}\n\nnamespace Member {\n  export type UpdateReason = 'attributes' | 'dateCreated' | 'dateUpdated' | 'roleSid' | 'lastConsumedMessageIndex' | 'lastConsumptionTimestamp';\n\n  export type Type = 'chat' | 'sms' | 'whatsapp';\n\n  export interface UpdatedEventArgs {\n    member: Member;\n    updateReasons: Member.UpdateReason[];\n  }\n}\n\n/**\n * @classdesc A Member represents a remote Client in a Channel.\n * @property {any} attributes - Object with custom attributes for Member\n * @property {Channel} channel - The Channel the remote Client is a Member of\n * @property {Date} dateCreated - The Date this Member was created\n * @property {Date} dateUpdated - The Date this Member was last updated\n * @property {String} identity - The identity of the remote Client\n * @property {Boolean} isTyping - Whether or not this Member is currently typing\n * @property {Number} lastConsumedMessageIndex - Latest consumed Message index by this Member.\n * Note that just retrieving messages on a client endpoint does not mean that messages are consumed/read,\n * please consider reading about [Consumption Horizon feature]{@link https://www.twilio.com/docs/api/chat/guides/consumption-horizon}\n * to find out how to mark messages as consumed.\n * @property {Date} lastConsumptionTimestamp - Date when Member has updated their consumption horizon\n * @property {String} sid - The server-assigned unique identifier for the Member\n * @property {Member#Type} type - The type of Member\n * @fires Member#typingEnded\n * @fires Member#typingStarted\n * @fires Member#updated\n */\nclass Member extends EventEmitter {\n\n  private state: MemberState;\n\n  constructor(\n    data: MemberDescriptor,\n    sid: string,\n    public readonly channel: Channel,\n    private readonly links: MemberLinks,\n    private readonly services: MemberServices\n  ) {\n    super();\n\n    this.services = services;\n    this.state = {\n      attributes: parseAttributes(data.attributes,\n        'Retrieved malformed attributes from the server for member: ' + sid,\n        log),\n      dateCreated: data.dateCreated ? parseTime(data.dateCreated) : null,\n      dateUpdated: data.dateCreated ? parseTime(data.dateUpdated) : null,\n      sid: sid,\n      typingTimeout: null,\n      isTyping: false,\n      identity: data.identity || null,\n      roleSid: data.roleSid || null,\n      lastConsumedMessageIndex: Number.isInteger(data.lastConsumedMessageIndex) ? data.lastConsumedMessageIndex : null,\n      lastConsumptionTimestamp: data.lastConsumptionTimestamp ? parseTime(data.lastConsumptionTimestamp) : null,\n      type: data.type || 'chat',\n      userInfo: data.userInfo\n    };\n\n    if (!data.identity && !data.type) {\n      throw new Error('Received invalid Member object from server: Missing identity or type of Member.');\n    }\n  }\n\n  /**\n   * The update reason for <code>updated</code> event emitted on Member\n   * @typedef {('attributes' | 'dateCreated' | 'dateUpdated' | 'roleSid' |\n    'lastConsumedMessageIndex' | 'lastConsumptionTimestamp')} Member#UpdateReason\n   */\n\n  /**\n   * The type of Member\n   * @typedef {('chat' | 'sms' | 'whatsapp')} Member#Type\n   */\n\n  public get sid(): string { return this.state.sid; }\n\n  public get attributes(): Object { return this.state.attributes; }\n\n  public get dateCreated(): Date { return this.state.dateCreated; }\n\n  public get dateUpdated(): Date { return this.state.dateUpdated; }\n\n  public get identity(): string { return this.state.identity; }\n\n  public get isTyping(): boolean { return this.state.isTyping; }\n\n  public get lastConsumedMessageIndex(): number | null { return this.state.lastConsumedMessageIndex; }\n\n  public get lastConsumptionTimestamp(): Date { return this.state.lastConsumptionTimestamp; }\n\n  public get roleSid(): string { return this.state.roleSid; }\n\n  public get type(): Member.Type { return this.state.type; }\n\n  /**\n   * Private method used to start or reset the typing indicator timeout (with event emitting)\n   * @private\n   */\n  _startTyping(timeout) {\n    clearTimeout(this.state.typingTimeout);\n\n    this.state.isTyping = true;\n    this.emit('typingStarted', this);\n    this.channel.emit('typingStarted', this);\n\n    this.state.typingTimeout = setTimeout(() => this._endTyping(), timeout);\n    return this;\n  }\n\n  /**\n   * Private method function used to stop typing indicator (with event emitting)\n   * @private\n   */\n  _endTyping() {\n    if (!this.state.typingTimeout) { return; }\n\n    this.state.isTyping = false;\n    this.emit('typingEnded', this);\n    this.channel.emit('typingEnded', this);\n\n    clearInterval(this.state.typingTimeout);\n    this.state.typingTimeout = null;\n  }\n\n  /**\n   * Private method function used update local object's property roleSid with new value\n   * @private\n   */\n  _update(data) {\n    let updateReasons: Member.UpdateReason[] = [];\n\n    let updateAttributes =\n      parseAttributes(\n        data.attributes,\n        'Retrieved malformed attributes from the server for member: ' + this.state.sid,\n        log);\n\n    if (data.attributes && !isDeepEqual(this.state.attributes, updateAttributes)) {\n      this.state.attributes = updateAttributes;\n      updateReasons.push('attributes');\n    }\n\n    let updatedDateUpdated = parseTime(data.dateUpdated);\n    if (data.dateUpdated &&\n      updatedDateUpdated.getTime() !== (this.state.dateUpdated && this.state.dateUpdated.getTime())) {\n      this.state.dateUpdated = updatedDateUpdated;\n      updateReasons.push('dateUpdated');\n    }\n\n    let updatedDateCreated = parseTime(data.dateCreated);\n    if (data.dateCreated &&\n      updatedDateCreated.getTime() !== (this.state.dateCreated && this.state.dateCreated.getTime())) {\n      this.state.dateCreated = updatedDateCreated;\n      updateReasons.push('dateCreated');\n    }\n\n    if (data.roleSid && this.state.roleSid !== data.roleSid) {\n      this.state.roleSid = data.roleSid;\n      updateReasons.push('roleSid');\n    }\n\n    if ((Number.isInteger(data.lastConsumedMessageIndex) || data.lastConsumedMessageIndex === null)\n      && this.state.lastConsumedMessageIndex !== data.lastConsumedMessageIndex) {\n      this.state.lastConsumedMessageIndex = data.lastConsumedMessageIndex;\n      updateReasons.push('lastConsumedMessageIndex');\n    }\n\n    if (data.lastConsumptionTimestamp) {\n      let lastConsumptionTimestamp = new Date(data.lastConsumptionTimestamp);\n      if (!this.state.lastConsumptionTimestamp ||\n        this.state.lastConsumptionTimestamp.getTime() !== lastConsumptionTimestamp.getTime()) {\n        this.state.lastConsumptionTimestamp = lastConsumptionTimestamp;\n        updateReasons.push('lastConsumptionTimestamp');\n      }\n    }\n\n    if (updateReasons.length > 0) {\n      this.emit('updated', { member: this, updateReasons: updateReasons });\n    }\n\n    return this;\n  }\n\n  /**\n   * Gets User Descriptor for this member. Supported only for <code>chat</code> type of Members\n   * @returns {Promise<UserDescriptor>}\n   */\n  async getUserDescriptor(): Promise<UserDescriptor> {\n    if (this.type != 'chat') {\n      throw new Error('Getting User Descriptor is not supported for this Member type: ' + this.type);\n    }\n\n    return this.services.users.getUserDescriptor(this.state.identity);\n  }\n\n  /**\n   * Gets User for this member and subscribes to it. Supported only for <code>chat</code> type of Members\n   * @returns {Promise<User>}\n   */\n  async getUser(): Promise<User> {\n    if (this.type != 'chat') {\n      throw new Error('Getting User is not supported for this Member type: ' + this.type);\n    }\n\n    return this.services.users.getUser(this.state.identity, this.state.userInfo);\n  }\n\n  /**\n   * Remove Member from the Channel.\n   * @returns {Promise<void>}\n   */\n  async remove(): Promise<void> {\n    return this.channel.removeMember(this);\n  }\n\n  /**\n   * Edit member attributes.\n   * @param {any} attributes new attributes for Member.\n   * @returns {Promise<Member>}\n   */\n  @validateTypesAsync(['string', 'number', 'boolean', 'object', literal(null)])\n  async updateAttributes(attributes: any): Promise<Member> {\n    await this.services.commandExecutor.mutateResource<EditMemberRequest, EditMemberResponse>(\n      'post',\n      this.links.self,\n      {\n        attributes: attributes !== undefined ? JSON.stringify(attributes) : undefined\n      }\n    );\n\n    return this;\n  }\n}\n\nexport { MemberDescriptor, Member };\n\n/**\n * Fired when Member started to type.\n * @event Member#typingStarted\n * @type {Member}\n */\n\n/**\n * Fired when Member ended to type.\n * @event Member#typingEnded\n * @type {Member}\n */\n\n/**\n * Fired when Member's fields has been updated.\n * @event Member#updated\n * @type {Object}\n * @property {Member} member - Updated Member\n * @property {Member#UpdateReason[]} updateReasons - Array of Member's updated event reasons\n */\n","import { EventEmitter } from 'events';\nimport { MemberDescriptor, Member } from '../member';\nimport { Logger } from '../logger';\n\nimport { Channel } from '../channel';\n\nimport { SyncMap, SyncClient } from 'twilio-sync';\nimport { Users } from './users';\nimport { CommandExecutor } from '../commandexecutor';\nimport { JoinChannelRequest, JoinChannelResponse } from '../interfaces/commands/joinchannel';\nimport { Configuration } from '../configuration';\n\nconst log = Logger.scope('Members');\n\nexport interface MembersServices {\n  syncClient: SyncClient;\n  users: Users;\n  commandExecutor: CommandExecutor;\n}\n\ninterface MembersLinks {\n  participants: string;\n}\n\n/**\n * @classdesc Represents the collection of members for the channel\n * @fires Members#memberJoined\n * @fires Members#memberLeft\n * @fires Members#memberUpdated\n */\nclass Members extends EventEmitter {\n\n  rosterEntityPromise: Promise<SyncMap>;\n\n  constructor(\n    public readonly channel: Channel,\n    public readonly members: Map<string, Member>,\n    private readonly links: MembersLinks,\n    private readonly configuration: Configuration,\n    private readonly services: MembersServices\n  ) {\n    super();\n  }\n\n  async unsubscribe(): Promise<void> {\n    if (this.rosterEntityPromise) {\n      let entity = await this.rosterEntityPromise;\n      entity.close();\n      this.rosterEntityPromise = null;\n    }\n  }\n\n  subscribe(rosterObjectName: string) {\n    return this.rosterEntityPromise = this.rosterEntityPromise\n      || this.services.syncClient.map({ id: rosterObjectName, mode: 'open_existing' })\n             .then(rosterMap => {\n               rosterMap.on('itemAdded', args => {\n                 log.debug(this.channel.sid + ' itemAdded: ' + args.item.key);\n                 this.upsertMember(args.item.key, args.item.data)\n                     .then(member => {\n                       this.emit('memberJoined', member);\n                     });\n               });\n\n               rosterMap.on('itemRemoved', args => {\n                 log.debug(this.channel.sid + ' itemRemoved: ' + args.key);\n                 let memberSid = args.key;\n                 if (!this.members.has(memberSid)) {\n                   return;\n                 }\n                 let leftMember = this.members.get(memberSid);\n                 this.members.delete(memberSid);\n                 this.emit('memberLeft', leftMember);\n               });\n\n               rosterMap.on('itemUpdated', args => {\n                 log.debug(this.channel.sid + ' itemUpdated: ' + args.item.key);\n                 this.upsertMember(args.item.key, args.item.data);\n               });\n\n               let membersPromises = [];\n               let that = this;\n               const rosterMapHandler = function(paginator) {\n                 paginator.items.forEach(item => { membersPromises.push(that.upsertMember(item.key, item.data)); });\n                 return paginator.hasNextPage ? paginator.nextPage().then(rosterMapHandler) : null;\n               };\n\n               return rosterMap\n                 .getItems()\n                 .then(rosterMapHandler)\n                 .then(() => Promise.all(membersPromises))\n                 .then(() => rosterMap);\n             })\n             .catch(err => {\n               this.rosterEntityPromise = null;\n               if (this.services.syncClient.connectionState != 'disconnected') {\n                 log.error('Failed to get roster object for channel', this.channel.sid, err);\n               }\n               log.debug('ERROR: Failed to get roster object for channel', this.channel.sid, err);\n               throw err;\n             });\n  }\n\n  async upsertMember(memberSid: string, data: MemberDescriptor): Promise<Member> {\n    let member = this.members.get(memberSid);\n    if (member) {\n      return member._update(data);\n    }\n\n    const links = {\n      self: `${this.links.participants}/${memberSid}`\n    };\n\n    member = new Member(data, memberSid, this.channel, links, this.services);\n    this.members.set(memberSid, member);\n    member.on('updated', (args: Member.UpdatedEventArgs) => this.emit('memberUpdated', args));\n    return member;\n  }\n\n  /**\n   * @returns {Promise<Array<Member>>} returns list of members {@see Member}\n   */\n  getMembers(): Promise<Array<Member>> {\n    return this.rosterEntityPromise.then(() => {\n      let members = [];\n      this.members.forEach((member) => members.push(member));\n      return members;\n    });\n  }\n\n  /**\n   * Get member by SID from channel\n   * @returns {Promise<Member>}\n   */\n  async getMemberBySid(memberSid: string): Promise<Member> {\n    return this.rosterEntityPromise.then(() => {\n      let member = this.members.get(memberSid);\n      if (!member) {\n        throw new Error('Member with SID ' + memberSid + ' was not found');\n      }\n      return member;\n    });\n  }\n\n  /**\n   * Get member by identity from channel\n   * @returns {Promise<Member>}\n   */\n  async getMemberByIdentity(identity: string): Promise<Member> {\n    let foundMember = null;\n    return this.rosterEntityPromise.then(() => {\n      this.members.forEach((member) => {\n        if (member.identity === identity) {\n          foundMember = member;\n        }\n      });\n      if (!foundMember) {\n        throw new Error('Member with identity ' + identity + ' was not found');\n      }\n      return foundMember;\n    });\n  }\n\n  /**\n   * Add user to the channel\n   * @returns {Promise<any>}\n   */\n  async add(identity: string): Promise<JoinChannelResponse> {\n    return await this.services.commandExecutor.mutateResource<JoinChannelRequest, JoinChannelResponse>(\n      'post',\n      this.links.participants,\n      {\n        identity\n      }\n    );\n  }\n\n  /**\n   * Invites user to the channel\n   * User can choose either to join or not\n   * @returns {Promise<any>}\n   */\n  async invite(identity: string): Promise<any> {\n    return await this.services.commandExecutor.mutateResource(\n      'post',\n      this.channel.links.invites,\n      {\n        identity\n      }\n    );\n  }\n\n  /**\n   * Remove member from channel\n   * @returns {Promise<any>}\n   */\n  async remove(identity: string): Promise<void> {\n    return await this.services.commandExecutor.mutateResource(\n      'delete',\n      `${this.links.participants}/${identity}`,\n    );\n  }\n}\n\nexport { Members };\n\n/**\n * Fired when member joined channel\n * @event Members#memberJoined\n * @type {Member}\n */\n\n/**\n * Fired when member left channel\n * @event Members#memberLeft\n * @type {Member}\n */\n\n/**\n * Fired when member updated\n * @event Members#memberUpdated\n * @type {Object}\n * @property {Member} member - Updated Member\n * @property {Member#UpdateReason[]} updateReasons - Array of Member's updated event reasons\n */\n","import { McsClient, McsMedia } from 'twilio-mcs-client';\n\nexport interface MediaState {\n  sid: string;\n  filename?: string;\n  contentType: string;\n  size: number;\n}\n\nexport interface MediaServices {\n  mcsClient: McsClient;\n}\n\n/**\n * @classdesc A Media represents a media information for Message in a Channel.\n * @property {String} contentType - content type of media\n * @property {String} sid - The server-assigned unique identifier for Media\n * @property {Number} size - Size of media, bytes\n * @property {String} [filename] - file name if present, null otherwise\n */\nclass Media {\n\n  private state: MediaState;\n  private services: MediaServices;\n  private mcsMedia: McsMedia = null;\n\n  constructor(data: MediaState, services: MediaServices) {\n\n    this.services = services;\n\n    this.state = {\n      sid: data.sid,\n      filename: data.filename,\n      contentType: data.contentType,\n      size: data.size\n    };\n  }\n\n  public get sid(): string { return this.state.sid; }\n\n  public get filename(): string {return this.state.filename; }\n\n  public get contentType(): string { return this.state.contentType; }\n\n  public get size(): number {return this.state.size; }\n\n  /**\n   * Returns direct content URL for the media.\n   *\n   * This URL is impermanent, it will expire in several minutes and cannot be cached.\n   * If the URL becomes expired, you need to request a new one.\n   * Each call to this function produces a new temporary URL.\n   *\n   * @returns {Promise<String>}\n   */\n  public async getContentTemporaryUrl() {\n    if (!this.mcsMedia) {\n      if (this.services.mcsClient) {\n        this.mcsMedia = await this.services.mcsClient.get(this.state.sid);\n      } else {\n        throw new Error('Media Content Service is unavailable');\n      }\n    }\n    return this.mcsMedia.getContentUrl();\n  }\n}\n\nexport { Media };\n","import { EventEmitter } from 'events';\nimport { isDeepEqual, parseAttributes } from './util';\nimport { Logger } from './logger';\n\nimport { Channel } from './channel';\nimport { McsClient } from 'twilio-mcs-client';\nimport { Media } from './media';\nimport { Member } from './member';\nimport { validateTypesAsync, literal } from 'twilio-sdk-type-validator';\nimport { Configuration } from './configuration';\nimport { CommandExecutor } from './commandexecutor';\nimport { EditMessageRequest } from './interfaces/commands/editmessage';\nimport { MessageResponse } from './interfaces/commands/messageresponse';\n\nconst log = Logger.scope('Message');\n\nnamespace Message {\n  export type Type = 'text' | 'media';\n}\n\ninterface MessageState {\n  sid: string;\n  index: number;\n  author?: string;\n  body: string;\n  dateUpdated: Date;\n  lastUpdatedBy: string;\n  attributes: Object;\n  timestamp: Date;\n  type: Message.Type;\n  media?: Media;\n  memberSid?: string;\n}\n\nexport interface MessageServices {\n  mcsClient: McsClient;\n  commandExecutor: CommandExecutor;\n}\n\ninterface MessageLinks {\n  self: string;\n  conversation: string;\n  messages_receipts: string;\n}\n\nnamespace Message {\n  export type UpdateReason = 'body' | 'lastUpdatedBy' | 'dateCreated' | 'dateUpdated'  | 'attributes' | 'author';\n\n  export interface UpdatedEventArgs {\n    message: Message;\n    updateReasons: Message.UpdateReason[];\n  }\n}\n\n/**\n * @classdesc A Message represents a Message in a Channel.\n * @property {String} author - The name of the user that sent Message\n * @property {String} body - The body of the Message. Is null if Message is Media Message\n * @property {any} attributes - Message custom attributes\n * @property {Channel} channel - Channel Message belongs to\n * @property {Date} dateCreated - When Message was created\n * @property {Date} dateUpdated - When Message was updated\n * @property {Number} index - Index of Message in the Channel's messages list\n * @property {String} lastUpdatedBy - Identity of the last user that updated Message\n * @property {Media} media - Contains Media information (if present)\n * @property {String} memberSid - Authoring Member's server-assigned unique identifier\n * @property {String} sid - The server-assigned unique identifier for Message\n * @property {'text' | 'media' } type - Type of message: 'text' or 'media'\n * @fires Message#updated\n */\nclass Message extends EventEmitter {\n  private state: MessageState;\n\n  constructor(\n    index: number,\n    data: any,\n    public readonly channel: Channel,\n    private readonly links: MessageLinks,\n    private readonly configuration: Configuration,\n    private readonly services: MessageServices\n  ) {\n    super();\n\n    this.state = {\n      sid: data.sid,\n      index: index,\n      author: data.author == null ? null : data.author,\n      body: data.text,\n      timestamp: data.timestamp ? new Date(data.timestamp) : null,\n      dateUpdated: data.dateUpdated ? new Date(data.dateUpdated) : null,\n      lastUpdatedBy: data.lastUpdatedBy ? data.lastUpdatedBy : null,\n      attributes: parseAttributes(data.attributes, `Got malformed attributes for the message ${data.sid}`, log),\n      type: data.type ? data.type : 'text',\n      media: (data.type && data.type === 'media' && data.media)\n        ? new Media(data.media, this.services) : null,\n      memberSid: data.memberSid == null ? null : data.memberSid\n    };\n  }\n\n  /**\n   * The update reason for <code>updated</code> event emitted on Message\n   * @typedef {('body' | 'lastUpdatedBy' | 'dateCreated' | 'dateUpdated' | 'attributes' | 'author')} Message#UpdateReason\n   */\n\n  public get sid(): string { return this.state.sid; }\n\n  public get author(): string { return this.state.author; }\n\n  public get body(): string {\n    if (this.type === 'media') { return null; }\n    return this.state.body;\n  }\n\n  public get dateUpdated(): Date { return this.state.dateUpdated; }\n\n  public get index(): number { return this.state.index; }\n\n  public get lastUpdatedBy(): string { return this.state.lastUpdatedBy; }\n\n  public get dateCreated(): Date { return this.state.timestamp; }\n\n  public get attributes(): Object { return this.state.attributes; }\n\n  public get type(): Message.Type { return this.state.type; }\n\n  public get media(): Media { return this.state.media; }\n\n  public get memberSid(): string { return this.state.memberSid; }\n\n  _update(data) {\n    let updateReasons: Message.UpdateReason[] = [];\n\n    if ((data.text || ((typeof data.text) === 'string')) && data.text !== this.state.body) {\n      this.state.body = data.text;\n      updateReasons.push('body');\n    }\n\n    if (data.lastUpdatedBy && data.lastUpdatedBy !== this.state.lastUpdatedBy) {\n      this.state.lastUpdatedBy = data.lastUpdatedBy;\n      updateReasons.push('lastUpdatedBy');\n    }\n\n    if (data.author && data.author !== this.state.author) {\n      this.state.author = data.author;\n      updateReasons.push('author');\n    }\n\n    if (data.dateUpdated &&\n      new Date(data.dateUpdated).getTime() !== (this.state.dateUpdated && this.state.dateUpdated.getTime())) {\n      this.state.dateUpdated = new Date(data.dateUpdated);\n      updateReasons.push('dateUpdated');\n    }\n\n    if (data.timestamp &&\n      new Date(data.timestamp).getTime() !== (this.state.timestamp && this.state.timestamp.getTime())) {\n      this.state.timestamp = new Date(data.timestamp);\n      updateReasons.push('dateCreated');\n    }\n\n    let updatedAttributes = parseAttributes(data.attributes, `Got malformed attributes for the message ${this.sid}`, log);\n    if (!isDeepEqual(this.state.attributes, updatedAttributes)) {\n      this.state.attributes = updatedAttributes;\n      updateReasons.push('attributes');\n    }\n\n    if (updateReasons.length > 0) {\n      this.emit('updated', { message: this, updateReasons: updateReasons });\n    }\n  }\n\n  /**\n   * Get Member who is author of the Message\n   * @returns {Promise<Member>}\n   */\n  async getMember(): Promise<Member> {\n    let member: Member = null;\n    if (this.state.memberSid) {\n      member = await this.channel.getMemberBySid(this.memberSid)\n                         .catch(() => {\n                           log.debug('Member with sid \"' + this.memberSid + '\" not found for message ' + this.sid);\n                           return null;\n                         });\n    }\n    if (!member && this.state.author) {\n      member = await this.channel.getMemberByIdentity(this.state.author)\n                         .catch(() => {\n                           log.debug('Member with identity \"' + this.author + '\" not found for message ' + this.sid);\n                           return null;\n                         });\n    }\n    if (member) {\n      return member;\n    }\n    let errorMesage = 'Member with ';\n    if (this.state.memberSid) {\n      errorMesage += 'SID \\'' + this.state.memberSid + '\\' ';\n    }\n    if (this.state.author) {\n      if (this.state.memberSid) {\n        errorMesage += 'or ';\n      }\n      errorMesage += 'identity \\'' + this.state.author + '\\' ';\n    }\n    if (errorMesage === 'Member with ') {\n      errorMesage = 'Member ';\n    }\n    errorMesage += 'was not found';\n    throw new Error(errorMesage);\n  }\n\n  /**\n   * Remove the Message.\n   * @returns {Promise<Message>}\n   */\n  async remove(): Promise<Message> {\n    await this.services.commandExecutor.mutateResource(\n      'delete',\n      this.links.self,\n    );\n\n    return this;\n  }\n\n  /**\n   * Edit message body.\n   * @param {String} body - new body of Message.\n   * @returns {Promise<Message>}\n   */\n  @validateTypesAsync('string')\n  async updateBody(body: string): Promise<Message> {\n    await this.services.commandExecutor.mutateResource<EditMessageRequest, MessageResponse>(\n      'post',\n      this.links.self,\n      {\n        body\n      }\n    );\n\n    return this;\n  }\n\n  /**\n   * Edit message attributes.\n   * @param {any} attributes new attributes for Message.\n   * @returns {Promise<Message>}\n   */\n  @validateTypesAsync(['string', 'number', 'boolean', 'object', literal(null)])\n  async updateAttributes(attributes: any): Promise<Message> {\n    await this.services.commandExecutor.mutateResource<EditMessageRequest, MessageResponse>(\n      'post',\n      this.links.self,\n      {\n        attributes: attributes !== undefined ? JSON.stringify(attributes) : undefined\n      }\n    );\n\n    return this;\n  }\n}\n\nexport { Message };\n\n/**\n * Fired when the Message's properties or body has been updated.\n * @event Message#updated\n * @type {Object}\n * @property {Message} message - Updated Message\n * @property {Message#UpdateReason[]} updateReasons - Array of Message's updated event reasons\n */\n","import { EventEmitter } from 'events';\nimport { Logger } from '../logger';\n\nimport { Message } from '../message';\nimport { Channel } from '../channel';\n\nimport { SyncList, SyncClient } from 'twilio-sync';\nimport { SyncPaginator } from '../syncpaginator';\n\nimport { McsClient, McsMedia } from 'twilio-mcs-client';\nimport { Configuration } from '../configuration';\nimport { CommandExecutor } from '../commandexecutor';\nimport { SendMessageRequest } from '../interfaces/commands/sendmessage';\nimport { MessageResponse } from '../interfaces/commands/messageresponse';\nimport { SendMediaMessageRequest } from '../interfaces/commands/sendmediamessage';\n\nconst log = Logger.scope('Messages');\n\nexport interface MessagesServices {\n  mcsClient: McsClient;\n  syncClient: SyncClient;\n  commandExecutor: CommandExecutor;\n}\n\n/**\n * Represents the collection of messages in a channel\n */\nclass Messages extends EventEmitter {\n  private readonly messagesByIndex: Map<number, Message>;\n  private messagesListPromise: Promise<SyncList>;\n\n  constructor(\n    public readonly channel: Channel,\n    private readonly configuration: Configuration,\n    private readonly services: MessagesServices\n  ) {\n    super();\n\n    this.messagesByIndex = new Map();\n    this.messagesListPromise = null;\n  }\n\n  /**\n   * Subscribe to the Messages Event Stream\n   * @param {String} name - The name of Sync object for the Messages resource.\n   * @returns {Promise}\n   */\n  subscribe(name: string) {\n    return this.messagesListPromise =\n      this.messagesListPromise ||\n      this.services.syncClient.list({ id: name, mode: 'open_existing' })\n          .then(list => {\n\n            list.on('itemAdded', args => {\n              log.debug(this.channel.sid + ' itemAdded: ' + args.item.index);\n              const links = {\n                self: `${this.channel.links.messages}/${args.item.data.sid}`,\n                conversation: this.channel.links.self,\n                messages_receipts: `${this.channel.links.messages}/${args.item.data.sid}/Receipts`,\n              };\n              const message = new Message(args.item.index, args.item.data, this.channel, links, this.configuration, this.services);\n              if (this.messagesByIndex.has(message.index)) {\n                log.debug('Message arrived, but already known and ignored', this.channel.sid, message.index);\n                return;\n              }\n\n              this.messagesByIndex.set(message.index, message);\n              message.on('updated',\n                (args: Message.UpdatedEventArgs) => this.emit('messageUpdated', args));\n              this.emit('messageAdded', message);\n            });\n\n            list.on('itemRemoved', args => {\n              log.debug(this.channel.sid + ' itemRemoved: ' + args.index);\n              let index = args.index;\n              if (this.messagesByIndex.has(index)) {\n                let message = this.messagesByIndex.get(index);\n                this.messagesByIndex.delete(message.index);\n                message.removeAllListeners('updated');\n                this.emit('messageRemoved', message);\n              }\n            });\n\n            list.on('itemUpdated', args => {\n              log.debug(this.channel.sid + ' itemUpdated: ' + args.item.index);\n              let message = this.messagesByIndex.get(args.item.index);\n              if (message) {\n                message._update(args.item.data);\n              }\n            });\n\n            return list;\n          })\n          .catch(err => {\n            this.messagesListPromise = null;\n            if (this.services.syncClient.connectionState != 'disconnected') {\n              log.error('Failed to get messages object for channel', this.channel.sid, err);\n            }\n            log.debug('ERROR: Failed to get messages object for channel', this.channel.sid, err);\n            throw err;\n          });\n  }\n\n  async unsubscribe() {\n    if (this.messagesListPromise) {\n      let entity = await this.messagesListPromise;\n      entity.close();\n      this.messagesListPromise = null;\n    }\n  }\n\n  /**\n   * Send Message to the channel\n   * @param {String} message - Message to post\n   * @param {any} attributes Message attributes\n   * @returns Returns promise which can fail\n   */\n  async send(message: string | null, attributes: any = {}): Promise<MessageResponse> {\n    log.debug('Sending text message', message, attributes);\n\n    return await this.services.commandExecutor.mutateResource<SendMessageRequest, MessageResponse>(\n      'post',\n      this.channel.links.messages,\n      {\n        body: message || '',\n        attributes: attributes !== undefined ? JSON.stringify(attributes) : undefined,\n      }\n    );\n  }\n\n  /**\n   * Send Media Message to the channel\n   * @param {FormData | Channel#SendMediaOptions} mediaContent - Media content to post\n   * @param {any} attributes Message attributes\n   * @returns Returns promise which can fail\n   */\n  async sendMedia(mediaContent: FormData | Channel.SendMediaOptions, attributes: any = {}) {\n    log.debug('Sending media message', mediaContent, attributes);\n\n    let media: McsMedia;\n    if (typeof FormData !== 'undefined'  && (mediaContent instanceof FormData)) {\n      log.debug('Sending media message as FormData', mediaContent, attributes);\n      media = await this.services.mcsClient.postFormData(mediaContent);\n    } else {\n      log.debug('Sending media message as SendMediaOptions', mediaContent, attributes);\n      let mediaOptions = mediaContent as Channel.SendMediaOptions;\n      if (!mediaOptions.contentType || !mediaOptions.media) {\n        throw new Error('Media content <Channel#SendMediaOptions> must contain non-empty contentType and media');\n      }\n      media = await this.services.mcsClient.post(mediaOptions.contentType, mediaOptions.media);\n    }\n\n    return await this.services.commandExecutor.mutateResource<SendMediaMessageRequest, MessageResponse>(\n      'post',\n      this.channel.links.messages,\n      {\n        media_sid: media.sid,\n        attributes: attributes !== undefined ? JSON.stringify(attributes) : undefined\n      }\n    );\n  }\n\n  /**\n   * Returns messages from channel using paginator interface\n   * @param {Number} [pageSize] Number of messages to return in single chunk. By default it's 30.\n   * @param {String} [anchor] Most early message id which is already known, or 'end' by default\n   * @param {String} [direction] Pagination order 'backwards' or 'forward', or 'forward' by default\n   * @returns {Promise<Paginator<Message>>} last page of messages by default\n   */\n  getMessages(pageSize, anchor, direction) {\n    anchor = (typeof anchor !== 'undefined') ? anchor : 'end';\n    direction = direction || 'backwards';\n    return this._getMessages(pageSize, anchor, direction);\n  }\n\n  private wrapPaginator(order, page, op) {\n    // We should swap next and prev page here, because of misfit of Sync and Chat paging conceptions\n    let shouldReverse = order === 'desc';\n\n    let np = () => page.nextPage().then(x => this.wrapPaginator(order, x, op));\n    let pp = () => page.prevPage().then(x => this.wrapPaginator(order, x, op));\n\n    return op(page.items).then(items => ({\n      items: items.sort((x, y) => { return x.index - y.index; }),\n      hasPrevPage: shouldReverse ? page.hasNextPage : page.hasPrevPage,\n      hasNextPage: shouldReverse ? page.hasPrevPage : page.hasNextPage,\n      prevPage: shouldReverse ? np : pp,\n      nextPage: shouldReverse ? pp : np\n    }));\n  }\n\n  private _upsertMessage(index: number, value: any) {\n    const cachedMessage = this.messagesByIndex.get(index);\n    if (cachedMessage) {\n      return cachedMessage;\n    }\n\n    const links = {\n      self: `${this.channel.links.messages}/${value.sid}`,\n      conversation: this.channel.links.self,\n      messages_receipts: `${this.channel.links.messages}/${value.sid}/Receipts`,\n    };\n    const message = new Message(index, value, this.channel, links, this.configuration, this.services);\n    this.messagesByIndex.set(message.index, message);\n    message.on('updated',\n      (args: Message.UpdatedEventArgs) => this.emit('messageUpdated', args));\n    return message;\n  }\n\n  /**\n   * Returns last messages from channel\n   * @param {Number} [pageSize] Number of messages to return in single chunk. By default it's 30.\n   * @param {String} [anchor] Most early message id which is already known, or 'end' by default\n   * @param {String} [direction] Pagination order 'backwards' or 'forward', or 'forward' by default\n   * @returns {Promise<SyncPaginator<Message>>} last page of messages by default\n   * @private\n   */\n  private _getMessages(pageSize, anchor, direction): Promise<SyncPaginator<Message>> {\n    anchor = (typeof anchor !== 'undefined') ? anchor : 'end';\n    pageSize = pageSize || 30;\n    let order = direction === 'backwards' ? 'desc' : 'asc';\n\n    return this.messagesListPromise\n               .then(messagesList => messagesList.getItems({\n                 from: anchor !== 'end' ? anchor : void (0),\n                 pageSize,\n                 order\n               }))\n               .then(page => this.wrapPaginator(order, page\n                 , items => Promise.all(items.map(item => this._upsertMessage(item.index, item.data))))\n               );\n  }\n}\n\nexport { Messages };\n","import { EventEmitter } from 'events';\nimport { Logger } from './logger';\n\nimport { Members } from './data/members';\nimport { Member } from './member';\nimport { Messages } from './data/messages';\nimport { Message } from './message';\n\nimport { UriBuilder, isDeepEqual, parseToNumber } from './util';\nimport { UserDescriptor } from './userdescriptor';\nimport { Users } from './data/users';\nimport { Paginator } from './interfaces/paginator';\nimport { Channels } from './data/channels';\nimport { McsClient } from 'twilio-mcs-client';\n\nimport { SyncClient } from 'twilio-sync';\nimport { TypingIndicator } from './services/typingindicator';\nimport { Network } from './services/network';\nimport { validateTypesAsync, custom, literal, nonEmptyString, nonNegativeInteger, objectSchema } from 'twilio-sdk-type-validator';\nimport { Configuration } from './configuration';\nimport { CommandExecutor } from './commandexecutor';\nimport { JoinChannelRequest, JoinChannelResponse } from './interfaces/commands/joinchannel';\nimport { EditChannelRequest } from './interfaces/commands/editchannel';\nimport { ChannelResponse } from './interfaces/commands/channel';\nimport { EditNotificationLevelRequest } from './interfaces/commands/editnotificationlevel';\nimport { EditLastConsumedMessageIndexRequest, EditLastConsumedMessageIndexResponse } from './interfaces/commands/editlastconsumedmessageindex';\n\nconst log = Logger.scope('Channel');\n\nconst fieldMappings = {\n  lastMessage: 'lastMessage',\n  attributes: 'attributes',\n  createdBy: 'createdBy',\n  dateCreated: 'dateCreated',\n  dateUpdated: 'dateUpdated',\n  friendlyName: 'friendlyName',\n  lastConsumedMessageIndex: 'lastConsumedMessageIndex',\n  notificationLevel: 'notificationLevel',\n  sid: 'sid',\n  status: 'status',\n  type: 'type',\n  uniqueName: 'uniqueName',\n  state: 'state'\n};\n\nfunction parseTime(timeString) {\n  try {\n    return new Date(timeString);\n  } catch (e) {\n    return null;\n  }\n}\n\nexport interface ChannelServices {\n  users: Users;\n  typingIndicator: TypingIndicator;\n  network: Network;\n  mcsClient: McsClient;\n  syncClient: SyncClient;\n  commandExecutor: CommandExecutor;\n}\n\ninterface ChannelState {\n  uniqueName: string;\n  status: Channel.Status;\n  type: Channel.Type;\n  attributes: any;\n  createdBy?: string;\n  dateCreated: Date;\n  dateUpdated: Date;\n  friendlyName: string;\n  lastConsumedMessageIndex: number | null;\n  lastMessage?: Channel.LastMessage;\n  notificationLevel?: Channel.NotificationLevel;\n  state?: Channel.State;\n}\n\ninterface ChannelDescriptor {\n  channel: string;\n  entityName: string;\n  uniqueName: string;\n  attributes: any;\n  createdBy?: string;\n  friendlyName: string;\n  lastConsumedMessageIndex: number;\n  dateCreated: any;\n  dateUpdated: any;\n  type: Channel.Type;\n  notificationLevel?: Channel.NotificationLevel;\n}\n\ninterface ChannelLinks {\n  self: string;\n  messages: string;\n  participants: string;\n  invites: string;\n}\n\nnamespace Channel {\n  export type UpdateReason = 'attributes' | 'createdBy' | 'dateCreated' | 'dateUpdated' |\n    'friendlyName' | 'lastConsumedMessageIndex' | 'state' | 'status' | 'uniqueName' | 'lastMessage' | 'notificationLevel';\n\n  export type Status = 'unknown' | 'notParticipating' | 'invited' | 'joined';\n\n  export type Type = 'public' | 'private';\n\n  export type NotificationLevel = 'default' | 'muted';\n\n  export type State = {\n    current: 'active' | 'inactive' | 'closed',\n    dateUpdated: Date\n  } | undefined;\n\n  export interface UpdatedEventArgs {\n    channel: Channel;\n    updateReasons: Channel.UpdateReason[];\n  }\n\n  export interface SendMediaOptions {\n    contentType: string;\n    media: string | Buffer;\n  }\n\n  export interface LastMessage {\n    index?: number;\n    dateCreated?: Date;\n  }\n}\n\n/**\n * @classdesc A Channel represents a remote channel of communication between multiple Programmable Chat Clients\n * @property {any} attributes - The Channel's custom attributes\n * @property {String} createdBy - The identity of the User that created this Channel\n * @property {Date} dateCreated - The Date this Channel was created\n * @property {Date} dateUpdated - The Date this Channel was last updated\n * @property {String} friendlyName - The Channel's name\n * @property {Boolean} isPrivate - Whether the channel is private (as opposed to public)\n * @property {Number} lastConsumedMessageIndex - Index of the last Message the User has consumed in this Channel\n * @property {Channel#LastMessage} lastMessage - Last Message sent to this Channel\n * @property {Channel#NotificationLevel} notificationLevel - User Notification level for this Channel\n * @property {String} sid - The Channel's unique system identifier\n * @property {Channel#State} state - The Channel's state\n * @property {Channel#Status} status - The Channel's status\n * @property {Channel#Type} type - The Channel's type\n * @property {String} uniqueName - The Channel's unique name (tag)\n * @fires Channel#memberJoined\n * @fires Channel#memberLeft\n * @fires Channel#memberUpdated\n * @fires Channel#messageAdded\n * @fires Channel#messageRemoved\n * @fires Channel#messageUpdated\n * @fires Channel#typingEnded\n * @fires Channel#typingStarted\n * @fires Channel#updated\n * @fires Channel#removed\n */\n\nclass Channel extends EventEmitter {\n  private channelState: ChannelState;\n  private statusSource: Channels.DataSource;\n\n  private entityPromise: Promise<any>;\n  private entityName: string;\n  private entity: any;\n  private messagesEntity: any;\n  private membersEntity: Members;\n  private members: any;\n\n  constructor(\n    descriptor: ChannelDescriptor,\n    public readonly sid: string,\n    public readonly links: ChannelLinks,\n    private readonly configuration: Configuration,\n    private readonly services: ChannelServices\n  ) {\n    super();\n\n    let attributes = descriptor.attributes || {};\n    let createdBy = descriptor.createdBy;\n    let dateCreated = parseTime(descriptor.dateCreated);\n    let dateUpdated = parseTime(descriptor.dateUpdated);\n    let friendlyName = descriptor.friendlyName || null;\n    let lastConsumedMessageIndex =\n      Number.isInteger(descriptor.lastConsumedMessageIndex) ? descriptor.lastConsumedMessageIndex : null;\n    let uniqueName = descriptor.uniqueName || null;\n\n    try {\n      JSON.stringify(attributes);\n    } catch (e) {\n      throw new Error('Attributes must be a valid JSON object.');\n    }\n\n    this.entityName = descriptor.channel;\n    this.channelState = {\n      uniqueName,\n      status: 'notParticipating',\n      type: descriptor.type,\n      attributes,\n      createdBy,\n      dateCreated,\n      dateUpdated,\n      friendlyName,\n      lastConsumedMessageIndex\n    };\n\n    if (descriptor.notificationLevel) {\n      this.channelState.notificationLevel = descriptor.notificationLevel;\n    }\n\n    const membersLinks = {\n      participants: this.links.participants\n    };\n\n    this.members = new Map();\n    this.membersEntity = new Members(this, this.members, membersLinks, this.configuration, this.services);\n    this.membersEntity.on('memberJoined', this.emit.bind(this, 'memberJoined'));\n    this.membersEntity.on('memberLeft', this.emit.bind(this, 'memberLeft'));\n    this.membersEntity.on('memberUpdated',\n      (args: Member.UpdatedEventArgs) => this.emit('memberUpdated', args));\n\n    this.messagesEntity = new Messages(this, this.configuration, services);\n    this.messagesEntity.on('messageAdded', message => this._onMessageAdded(message));\n    this.messagesEntity.on('messageUpdated',\n      (args: Message.UpdatedEventArgs) => this.emit('messageUpdated', args));\n    this.messagesEntity.on('messageRemoved', this.emit.bind(this, 'messageRemoved'));\n  }\n\n  /**\n   * The Channel's state. Set to undefined if the channel is not a conversation.\n   * @typedef {Object | undefined} Channel#State\n   * @property {('active' | 'inactive' | 'closed')} current - the current state\n   * @property {Date} dateUpdated - date at which the latest channel state update happened\n   */\n\n  /**\n   * These options can be passed to {@link Channel#sendMessage}.\n   * @typedef {Object} Channel#SendMediaOptions\n   * @property {String} contentType - content type of media\n   * @property {String | Buffer} media - content to post\n   */\n\n  /**\n   * The update reason for <code>updated</code> event emitted on Channel\n   * @typedef {('attributes' | 'createdBy' | 'dateCreated' | 'dateUpdated' |\n    'friendlyName' | 'lastConsumedMessageIndex' | 'state' | 'status' | 'uniqueName' | 'lastMessage' |\n    'notificationLevel' )} Channel#UpdateReason\n   */\n\n  /**\n   * The status of the Channel, relative to the Client: whether the Channel\n   * is <code>notParticipating</code> to local Client, Client is <code>invited</code> to or\n   * is <code>joined</code> to this Channel\n   * @typedef {('unknown' | 'notParticipating' | 'invited' | 'joined')} Channel#Status\n   */\n\n  /**\n   * The type of Channel (<code>public</code> or <code>private</code>).\n   * @typedef {('public' | 'private')} Channel#Type\n   */\n\n  /**\n   * The User's Notification level for Channel, determines whether the currently logged-in User will receive\n   * pushes for events in this Channel. Can be either <code>muted</code> or <code>default</code>,\n   * where <code>default</code> defers to global Service push configuration.\n   * @typedef {('default' | 'muted')} Channel#NotificationLevel\n   */\n\n  public get status(): Channel.Status { return this.channelState.status; }\n\n  public get type(): Channel.Type { return this.channelState.type; }\n\n  public get uniqueName(): string { return this.channelState.uniqueName; }\n\n  public get isPrivate(): boolean { return this.channelState.type === 'private'; }\n\n  public get friendlyName(): string { return this.channelState.friendlyName; }\n\n  public get dateUpdated(): any { return this.channelState.dateUpdated; }\n\n  public get dateCreated(): any { return this.channelState.dateCreated; }\n\n  public get createdBy(): string { return this.channelState.createdBy; }\n\n  public get attributes(): Object { return this.channelState.attributes; }\n\n  public get lastConsumedMessageIndex(): number | null { return this.channelState.lastConsumedMessageIndex; }\n\n  public get lastMessage(): Channel.LastMessage { return this.channelState.lastMessage; }\n\n  public get notificationLevel(): Channel.NotificationLevel { return this.channelState.notificationLevel; }\n\n  public get state(): Channel.State { return this.channelState.state; }\n\n  /**\n   * The Channel's last message's information.\n   * @typedef {Object} Channel#LastMessage\n   * @property {Number} index - Message's index\n   * @property {Date} dateCreated - Message's creation date\n   */\n\n  /**\n   * Load and Subscribe to this Channel and do not subscribe to its Members and Messages.\n   * This or _subscribeStreams will need to be called before any events on Channel will fire.\n   * @returns {Promise}\n   * @private\n   */\n  _subscribe() {\n    if (this.entityPromise) { return this.entityPromise; }\n\n    return this.entityPromise = this.entityPromise ||\n      this.services.syncClient.document({ id: this.entityName, mode: 'open_existing' })\n        .then(entity => {\n          this.entity = entity;\n          this.entity.on('updated', args => { this._update(args.data); });\n          this.entity.on('removed', () => this.emit('removed', this));\n          this._update(this.entity.data);\n          return entity;\n        })\n        .catch(err => {\n          this.entity = null;\n          this.entityPromise = null;\n          if (this.services.syncClient.connectionState != 'disconnected') {\n            log.error('Failed to get channel object', err);\n          }\n          log.debug('ERROR: Failed to get channel object', err);\n          throw err;\n        });\n  }\n\n  /**\n   * Load the attributes of this Channel and instantiate its Members and Messages.\n   * This or _subscribe will need to be called before any events on Channel will fire.\n   * This will need to be called before any events on Members or Messages will fire\n   * @returns {Promise}\n   * @private\n   */\n  async _subscribeStreams() {\n    try {\n      await this._subscribe();\n      log.trace('_subscribeStreams, this.entity.data=', this.entity.data);\n      const messagesObjectName = this.entity.data.messages;\n      const rosterObjectName = this.entity.data.roster;\n      await Promise.all([\n        this.messagesEntity.subscribe(messagesObjectName),\n        this.membersEntity.subscribe(rosterObjectName)\n      ]);\n    } catch (err) {\n      if (this.services.syncClient.connectionState !== 'disconnected') {\n        log.error('Failed to subscribe on channel objects', this.sid, err);\n      }\n      log.debug('ERROR: Failed to subscribe on channel objects', this.sid, err);\n      throw err;\n    }\n  }\n\n  /**\n   * Stop listening for and firing events on this Channel.\n   * @returns {Promise}\n   * @private\n   */\n  async _unsubscribe() {\n    // Keep our subscription to public channels objects\n    if (this.isPrivate && this.entity) {\n      await this.entity.close();\n      this.entity = null;\n      this.entityPromise = null;\n    }\n\n    return Promise.all([\n      this.membersEntity.unsubscribe(),\n      this.messagesEntity.unsubscribe()\n    ]);\n  }\n\n  /**\n   * Set channel status\n   * @private\n   */\n  _setStatus(status: Channel.Status, source: Channels.DataSource) {\n    this.statusSource = source;\n\n    if (this.channelState.status === status) { return; }\n\n    this.channelState.status = status;\n\n    if (status === 'joined') {\n      this._subscribeStreams()\n          .catch(err => {\n            log.debug('ERROR while setting channel status ' + status, err);\n            if (this.services.syncClient.connectionState !== 'disconnected') {\n              throw err;\n            }\n          });\n    } else if (status === 'invited') {\n      this._subscribe()\n          .catch(err => {\n            log.debug('ERROR while setting channel status ' + status, err);\n            if (this.services.syncClient.connectionState !== 'disconnected') {\n              throw err;\n            }\n          });\n    } else if (this.entityPromise) {\n      this._unsubscribe().catch(err => {\n        log.debug('ERROR while setting channel status ' + status, err);\n        if (this.services.syncClient.connectionState !== 'disconnected') {\n          throw err;\n        }\n      });\n    }\n  }\n\n  /**\n   * If channel's status update source\n   * @private\n   * @return {Channels.DataSource}\n   */\n  _statusSource(): Channels.DataSource {\n    return this.statusSource;\n  }\n\n  private static preprocessUpdate(update, channelSid) {\n    try {\n      if (typeof update.attributes === 'string') {\n        update.attributes = JSON.parse(update.attributes);\n      } else if (update.attributes) {\n        JSON.stringify(update.attributes);\n      }\n    } catch (e) {\n      log.warn('Retrieved malformed attributes from the server for channel: ' + channelSid);\n      update.attributes = {};\n    }\n\n    try {\n      if (update.dateCreated) {\n        update.dateCreated = new Date(update.dateCreated);\n      }\n    } catch (e) {\n      log.warn('Retrieved malformed dateCreated from the server for channel: ' + channelSid);\n      delete update.dateCreated;\n    }\n\n    try {\n      if (update.dateUpdated) {\n        update.dateUpdated = new Date(update.dateUpdated);\n      }\n    } catch (e) {\n      log.warn('Retrieved malformed dateUpdated from the server for channel: ' + channelSid);\n      delete update.dateUpdated;\n    }\n\n    try {\n      if (update.lastMessage && update.lastMessage.timestamp) {\n        update.lastMessage.timestamp = new Date(update.lastMessage.timestamp);\n      }\n    } catch (e) {\n      log.warn('Retrieved malformed lastMessage.timestamp from the server for channel: ' + channelSid);\n      delete update.lastMessage.timestamp;\n    }\n  }\n\n  /**\n   * Updates local channel object with new values\n   * @private\n   */\n  _update(update) {\n    log.trace('_update', update);\n\n    Channel.preprocessUpdate(update, this.sid);\n    const updateReasons = new Set<Channel.UpdateReason>();\n\n    for (const key of Object.keys(update)) {\n      const localKey = fieldMappings[key];\n\n      if (!localKey) {\n        continue;\n      }\n\n      switch (localKey) {\n        case fieldMappings.status:\n          if (!update.status || update.status === 'unknown'\n            || this.channelState.status === update.status) {\n            break;\n          }\n\n          this.channelState.status = update.status;\n          updateReasons.add(localKey);\n\n          break;\n        case fieldMappings.attributes:\n          if (isDeepEqual(this.channelState.attributes, update.attributes)) {\n            break;\n          }\n\n          this.channelState.attributes = update.attributes;\n          updateReasons.add(localKey);\n\n          break;\n        case fieldMappings.lastConsumedMessageIndex:\n          if (update.lastConsumedMessageIndex === undefined\n            || update.lastConsumedMessageIndex === this.channelState.lastConsumedMessageIndex) {\n            break;\n          }\n\n          this.channelState.lastConsumedMessageIndex = update.lastConsumedMessageIndex;\n          updateReasons.add(localKey);\n\n          break;\n        case fieldMappings.lastMessage:\n          if (this.channelState.lastMessage && !update.lastMessage) {\n            delete this.channelState.lastMessage;\n            updateReasons.add(localKey);\n\n            break;\n          }\n\n          this.channelState.lastMessage = this.channelState.lastMessage || {};\n\n          if (update.lastMessage?.index !== undefined\n            && update.lastMessage.index !== this.channelState.lastMessage.index) {\n            this.channelState.lastMessage.index = update.lastMessage.index;\n            updateReasons.add(localKey);\n          }\n\n          if (update.lastMessage?.timestamp !== undefined\n            && this.channelState.lastMessage?.dateCreated?.getTime() !== update.lastMessage.timestamp.getTime()) {\n            this.channelState.lastMessage.dateCreated = update.lastMessage.timestamp;\n            updateReasons.add(localKey);\n          }\n\n          if (isDeepEqual(this.channelState.lastMessage, {})) {\n            delete this.channelState.lastMessage;\n          }\n\n          break;\n        case fieldMappings.state:\n          const state = update.state || undefined;\n\n          if (state !== undefined) {\n            state.dateUpdated = new Date(state.dateUpdated);\n          }\n\n          if (isDeepEqual(this.channelState.state, state)) {\n            break;\n          }\n\n          this.channelState.state = state;\n          updateReasons.add(localKey);\n\n          break;\n        default:\n          const isDate = update[key] instanceof Date;\n          const keysMatchAsDates = isDate && this.channelState[localKey]?.getTime() === update[key].getTime();\n          const keysMatchAsNonDates = !isDate && this[localKey] === update[key];\n\n          if (keysMatchAsDates || keysMatchAsNonDates) {\n            break;\n          }\n\n          this.channelState[localKey] = update[key];\n          updateReasons.add(localKey);\n      }\n    }\n\n    if (updateReasons.size > 0) {\n      this.emit('updated', { channel: this, updateReasons: [...updateReasons] });\n    }\n  }\n\n  /**\n   * @private\n   */\n  private _onMessageAdded(message) {\n    for (let member of this.members.values()) {\n      if (member.identity === message.author) {\n        member._endTyping();\n        break;\n      }\n    }\n    this.emit('messageAdded', message);\n  }\n\n  private async _setLastConsumedMessageIndex(index: number | null): Promise<number> {\n    const result = await this.services.commandExecutor.mutateResource<\n      EditLastConsumedMessageIndexRequest,\n      EditLastConsumedMessageIndexResponse\n    >(\n      'post',\n      `${this.configuration.links.myConversations}/${this.sid}`,\n      {\n        last_consumed_message_index: index\n      }\n    );\n\n    return result.unread_messages_count;\n  }\n\n  /**\n   * Add a participant to the Channel by its Identity.\n   * @param {String} identity - Identity of the Client to add\n   * @returns {Promise<void>}\n   */\n  @validateTypesAsync(nonEmptyString)\n  async add(identity: string): Promise<void> {\n    await this.membersEntity.add(identity);\n  }\n\n  /**\n   * Advance last consumed Channel's Message index to current consumption horizon.\n   * Rejects if User is not Member of Channel.\n   * Last consumed Message index is updated only if new index value is higher than previous.\n   * @param {Number} index - Message index to advance to as last read\n   * @returns {Promise<number>} resulting unread messages count in the channel\n   */\n  @validateTypesAsync(nonNegativeInteger)\n  async advanceLastConsumedMessageIndex(index: number): Promise<number> {\n    await this._subscribeStreams();\n\n    if (index < this.lastConsumedMessageIndex) {\n      return await this._setLastConsumedMessageIndex(this.lastConsumedMessageIndex);\n    }\n\n    return await this._setLastConsumedMessageIndex(index);\n  }\n\n  /**\n   * Decline an invitation to the Channel and unsubscribe from its events.\n   * @returns {Promise<Channel>}\n   */\n  async decline(): Promise<Channel> {\n    await this.services.commandExecutor.mutateResource(\n      'delete',\n      `${this.links.invites}/${this.configuration.userIdentity}`\n    );\n\n    return this;\n  }\n\n  /**\n   * Delete the Channel and unsubscribe from its events.\n   * @returns {Promise<Channel>}\n   */\n  async delete(): Promise<Channel> {\n    await this.services.commandExecutor.mutateResource(\n      'delete',\n      this.links.self,\n    );\n\n    return this;\n  }\n\n  /**\n   * Get the custom attributes of this Channel.<br/>\n   *\n   * <i>NOTE: {@link Channel}'s <code>attributes</code> property will be empty for public channels until this function is called.</i>\n   * @returns {Promise<any>} attributes of this Channel\n   */\n  async getAttributes(): Promise<any> {\n    await this._subscribe();\n    return this.attributes;\n  }\n\n  /**\n   * Returns messages from channel using paginator interface.\n   * @param {Number} [pageSize=30] Number of messages to return in single chunk\n   * @param {Number} [anchor] - Index of newest Message to fetch. From the end by default\n   * @param {('backwards'|'forward')} [direction=backwards] - Query direction. By default it query backwards\n   *                                                          from newer to older. 'forward' will query in opposite direction\n   * @returns {Promise<Paginator<Message>>} page of messages\n   */\n  @validateTypesAsync(\n    ['undefined', nonNegativeInteger],\n    ['undefined', nonNegativeInteger],\n    ['undefined', literal('backwards', 'forward')]\n  )\n  async getMessages(pageSize?: number, anchor?: number, direction?: 'backwards' | 'forward'): Promise<Paginator<Message>> {\n    await this._subscribeStreams();\n    return this.messagesEntity.getMessages(pageSize, anchor, direction);\n  }\n\n  /**\n   * Get a list of all Members joined to this Channel.\n   * @returns {Promise<Member[]>}\n   */\n  async getMembers(): Promise<Member[]> {\n    await this._subscribeStreams();\n    return this.membersEntity.getMembers();\n  }\n\n  /**\n   * Get channel members count.\n   * <br/>\n   * This method is semi-realtime. This means that this data will be eventually correct,\n   * but will also possibly be incorrect for a few seconds. The Chat system does not\n   * provide real time events for counter values changes.\n   * <br/>\n   * So this is quite useful for any UI badges, but is not recommended\n   * to build any core application logic based on these counters being accurate in real time.\n   * @returns {Promise<number>}\n   */\n  async getMembersCount(): Promise<number> {\n    const url = new UriBuilder(this.configuration.links.conversations).path(this.sid).build();\n    const response = await this.services.network.get(url);\n\n    return response.body.participants_count;\n  }\n\n  /**\n   * Get a Member by its SID.\n   * @param {String} memberSid - Member sid\n   * @returns {Promise<Member>}\n   */\n  @validateTypesAsync(nonEmptyString)\n  async getMemberBySid(memberSid: string): Promise<Member> {\n    return this.membersEntity.getMemberBySid(memberSid);\n  }\n\n  /**\n   * Get a Member by its identity.\n   * @param {String} identity - Member identity\n   * @returns {Promise<Member>}\n   */\n  @validateTypesAsync(nonEmptyString)\n  async getMemberByIdentity(identity: string): Promise<Member> {\n    return this.membersEntity.getMemberByIdentity(identity);\n  }\n\n  /**\n   * Get total message count in a channel.\n   * <br/>\n   * This method is semi-realtime. This means that this data will be eventually correct,\n   * but will also possibly be incorrect for a few seconds. The Chat system does not\n   * provide real time events for counter values changes.\n   * <br/>\n   * So this is quite useful for any UI badges, but is not recommended\n   * to build any core application logic based on these counters being accurate in real time.\n   * @returns {Promise<number>}\n   */\n  async getMessagesCount(): Promise<number> {\n    const url = new UriBuilder(this.configuration.links.conversations).path(this.sid).build();\n    const response = await this.services.network.get(url);\n\n    return response.body.messages_count;\n  }\n\n  /**\n   * Get unconsumed messages count for a User if they are a Member of this Channel.\n   * Rejects if the User is not a Member of the Channel.\n   * <br/>\n   * This method is semi-realtime. This means that this data will be eventually correct,\n   * but will also possibly be incorrect for a few seconds. The Chat system does not\n   * provide real time events for counter values changes.\n   * <br/>\n   * So this is quite useful for any “unread messages count” badges, but is not recommended\n   * to build any core application logic based on these counters being accurate in real time.\n   * @returns {Promise<number|null>}\n   */\n  async getUnconsumedMessagesCount(): Promise<number | null> {\n    const url = new UriBuilder(this.configuration.links.myConversations).path(this.sid).build();\n    const response = await this.services.network.get(url);\n\n    if (response.body.conversation_sid !== this.sid) {\n      throw new Error('Channel was not found in the user channels list');\n    }\n\n    const unreadMessageCount = response.body.unread_messages_count;\n\n    if (typeof unreadMessageCount === 'number') {\n      return unreadMessageCount;\n    }\n\n    return null;\n  }\n\n  /**\n   * Invite a user to the Channel by their Identity.\n   * @param {String} identity - Identity of the user to invite\n   * @returns {Promise<void>}\n   */\n  @validateTypesAsync(nonEmptyString)\n  async invite(identity: string): Promise<void> {\n    await this.membersEntity.invite(identity);\n  }\n\n  /**\n   * Join the Channel and subscribe to its events.\n   * @returns {Promise<Channel>}\n   */\n  async join(): Promise<Channel> {\n    await this.services.commandExecutor.mutateResource<JoinChannelRequest, JoinChannelResponse>(\n      'post',\n      this.links.participants,\n      {\n        identity: this.configuration.userIdentity\n      }\n    );\n\n    return this;\n  }\n\n  /**\n   * Leave the Channel.\n   * @returns {Promise<Channel>}\n   */\n  async leave(): Promise<Channel> {\n    if (this.channelState.status === 'joined') {\n      await this.services.commandExecutor.mutateResource(\n        'delete',\n        `${this.links.participants}/${this.configuration.userIdentity}`,\n      );\n    }\n\n    return this;\n  }\n\n  /**\n   * Remove a Member from the Channel.\n   * @param {String|Member} member - Member to remove. Could either be an identity string or a Member instance.\n   * @returns {Promise<void>}\n   */\n  @validateTypesAsync([nonEmptyString, Member])\n  async removeMember(member: string | Member): Promise<void> {\n    await this.membersEntity.remove(typeof member === 'string' ? member : member.sid);\n  }\n\n  /**\n   * Send a Message in the Channel.\n   * @param {String|FormData|Channel#SendMediaOptions|null} message - The message body for text message,\n   * FormData or MediaOptions for media content. Sending FormData supported only with browser engine\n   * @param {any} [messageAttributes] - attributes for the message\n   * @returns {Promise<number>} new Message's index in the Channel's messages list\n   */\n  @validateTypesAsync(\n    [\n      'string',\n      literal(null),\n      // Wrapping it into a custom rule is necessary because the FormData class is not available on initialization.\n      custom((value) => [value instanceof FormData, 'an instance of FormData']),\n      objectSchema('media options', {\n        contentType: [nonEmptyString, 'undefined'],\n        media: custom((value) => {\n          let isValid = (typeof value === 'string' && value.length > 0) || value instanceof Uint8Array || value instanceof ArrayBuffer;\n\n          if (typeof Blob === 'function') {\n            isValid = isValid || value instanceof Blob;\n          }\n\n          return [\n            isValid,\n            'a non-empty string, an instance of Buffer or an instance of Blob'\n          ];\n        })\n      })\n    ],\n    ['undefined', 'string', 'number', 'boolean', 'object', literal(null)]\n  )\n  async sendMessage(message: string | FormData | Channel.SendMediaOptions | null, messageAttributes?: any): Promise<number> {\n    if (typeof message === 'string' || message === null) {\n      const response = await this.messagesEntity.send(message, messageAttributes);\n      return parseToNumber(response.index);\n    }\n\n    const response = await this.messagesEntity.sendMedia(message, messageAttributes);\n    return parseToNumber(response.index);\n  }\n\n  /**\n   * Set last consumed Channel's Message index to last known Message's index in this Channel.\n   * @returns {Promise<number>} resulting unread messages count in the channel\n   */\n  async setAllMessagesConsumed(): Promise<number> {\n    await this._subscribeStreams();\n    let messagesPage = await this.getMessages(1);\n    if (messagesPage.items.length > 0) {\n      return this.advanceLastConsumedMessageIndex(messagesPage.items[0].index);\n    }\n    return Promise.resolve(0);\n  }\n\n  /**\n   * Set all messages in the channel unread.\n   * @returns {Promise<number>} resulting unread messages count in the channel\n   */\n  async setNoMessagesConsumed(): Promise<number> {\n    await this._subscribeStreams();\n    return await this._setLastConsumedMessageIndex(null);\n  }\n\n  /**\n   * Set User Notification level for this channel.\n   * @param {Channel#NotificationLevel} notificationLevel - The new user notification level\n   * @returns {Promise<void>}\n   */\n  @validateTypesAsync(literal('default', 'muted'))\n  async setUserNotificationLevel(notificationLevel: Channel.NotificationLevel): Promise<void> {\n    await this.services.commandExecutor.mutateResource<EditNotificationLevelRequest>(\n      'post',\n      `${this.configuration.links.myConversations}/${this.sid}`,\n      {\n        notification_level: notificationLevel\n      }\n    );\n  }\n\n  /**\n   * Send a notification to the server indicating that this Client is currently typing in this Channel.\n   * Typing ended notification is sent after a while automatically, but by calling again this method you ensure typing ended is not received.\n   * @returns {Promise<void>}\n   */\n  typing(): Promise<void> {\n    return this.services.typingIndicator.send(this.sid);\n  }\n\n  /**\n   * Update the Channel's attributes.\n   * @param {any} attributes new attributes for Channel.\n   * @returns {Promise<Channel>}\n   */\n  @validateTypesAsync(['string', 'number', 'boolean', 'object', literal(null)])\n  async updateAttributes(attributes: any): Promise<Channel> {\n    await this.services.commandExecutor.mutateResource<EditChannelRequest, ChannelResponse>(\n      'post',\n      this.links.self,\n      { attributes: attributes !== undefined ? JSON.stringify(attributes) : undefined }\n    );\n\n    return this;\n  }\n\n  /**\n   * Update the Channel's friendlyName.\n   * @param {String} friendlyName - The new Channel friendlyName\n   * @returns {Promise<Channel>}\n   */\n  @validateTypesAsync('string')\n  async updateFriendlyName(friendlyName: string): Promise<Channel> {\n    if (this.channelState.friendlyName !== friendlyName) {\n      await this.services.commandExecutor.mutateResource<EditChannelRequest, ChannelResponse>(\n        'post',\n        this.links.self,\n        { friendly_name: friendlyName }\n      );\n    }\n\n    return this;\n  }\n\n  /**\n   * Set last consumed Channel's Message index to current consumption horizon.\n   * @param {Number|null} index - Message index to set as last read.\n   * If null provided, then the behavior is identical to {@link Channel#setNoMessagesConsumed}\n   * @returns {Promise<number>} resulting unread messages count in the channel\n   */\n  @validateTypesAsync([literal(null), nonNegativeInteger])\n  async updateLastConsumedMessageIndex(index: number | null): Promise<number> {\n    await this._subscribeStreams();\n    return this._setLastConsumedMessageIndex(index);\n  }\n\n  /**\n   * Update the Channel's unique name.\n   * @param {String|null} uniqueName - New unique name for the Channel. Setting unique name to null removes it.\n   * @returns {Promise<Channel>}\n   */\n  @validateTypesAsync(['string', literal(null)])\n  async updateUniqueName(uniqueName: string | null): Promise<Channel> {\n    if (this.channelState.uniqueName !== uniqueName) {\n      if (!uniqueName) {\n        uniqueName = '';\n      }\n\n      await this.services.commandExecutor.mutateResource<EditChannelRequest, ChannelResponse>(\n        'post',\n        this.links.self,\n        { unique_name: uniqueName }\n      );\n    }\n    return this;\n  }\n\n  /**\n   * Gets User Descriptors for this channel.\n   * @returns {Promise<Paginator<UserDescriptor>>}\n   */\n  async getUserDescriptors(): Promise<Paginator<UserDescriptor>> {\n    return this.services.users.getChannelUserDescriptors(this.sid);\n  }\n}\n\nexport { ChannelDescriptor, Channel };\n\n/**\n * Fired when a Member has joined the Channel.\n * @event Channel#memberJoined\n * @type {Member}\n */\n/**\n * Fired when a Member has left the Channel.\n * @event Channel#memberLeft\n * @type {Member}\n */\n/**\n * Fired when a Member's fields has been updated.\n * @event Channel#memberUpdated\n * @type {Object}\n * @property {Member} member - Updated Member\n * @property {Member#UpdateReason[]} updateReasons - Array of Member's updated event reasons\n */\n/**\n * Fired when a new Message has been added to the Channel.\n * @event Channel#messageAdded\n * @type {Message}\n */\n/**\n * Fired when Message is removed from Channel's message list.\n * @event Channel#messageRemoved\n * @type {Message}\n */\n/**\n * Fired when an existing Message's fields are updated with new values.\n * @event Channel#messageUpdated\n * @type {Object}\n * @property {Message} message - Updated Message\n * @property {Message#UpdateReason[]} updateReasons - Array of Message's updated event reasons\n */\n/**\n * Fired when a Member has stopped typing.\n * @event Channel#typingEnded\n * @type {Member}\n */\n/**\n * Fired when a Member has started typing.\n * @event Channel#typingStarted\n * @type {Member}\n */\n/**\n * Fired when a Channel's attributes or metadata have been updated.\n * During Channel's {@link Client.create | creation and initialization} this event might be fired multiple times\n * for same joined or created Channel as new data is arriving from different sources.\n * @event Channel#updated\n * @type {Object}\n * @property {Channel} channel - Updated Channel\n * @property {Channel#UpdateReason[]} updateReasons - Array of Channel's updated event reasons\n */\n/**\n * Fired when the Channel was destroyed or currently logged in User has left private Channel\n * @event Channel#removed\n * @type {Channel}\n */\n","class Deferred<T> {\n  private _promise: Promise<T>;\n  private _resolve;\n  private _reject;\n\n  public current: T;\n\n  constructor() {\n    this._promise = new Promise<T>((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n\n  public get promise(): Promise<T> { return this._promise; }\n\n  update(value: T) {\n    this._resolve(value);\n  }\n\n  set(value: T) {\n    this.current = value;\n    this._resolve(value);\n  }\n\n  fail(e) {\n    this._reject(e);\n  }\n}\n\nexport { Deferred };\n","import { EventEmitter } from 'events';\nimport { Logger } from '../logger';\nimport { Channel } from '../channel';\n\nimport { SyncMap, SyncClient } from 'twilio-sync';\nimport { ChannelDescriptor } from '../channeldescriptor';\nimport { Users } from './users';\nimport { Network } from '../services/network';\nimport { TypingIndicator } from '../services/typingindicator';\nimport { McsClient } from 'twilio-mcs-client';\nimport { Deferred } from '../util/deferred';\nimport { Member } from '../member';\nimport { Message } from '../message';\nimport { isDeepEqual, UriBuilder } from '../util';\nimport { Configuration } from '../configuration';\nimport { CommandExecutor } from '../commandexecutor';\nimport { CreateChannelRequest } from '../interfaces/commands/createchannel';\nimport { ChannelResponse } from '../interfaces/commands/channel';\n\nconst log = Logger.scope('Channels');\n\nexport interface ChannelsServices {\n  syncClient: SyncClient;\n  users: Users;\n  typingIndicator: TypingIndicator;\n  network: Network;\n  mcsClient: McsClient;\n  commandExecutor: CommandExecutor;\n}\n\n/**\n * Represents channels collection\n * {@see Channel}\n */\nclass Channels extends EventEmitter {\n\n  public readonly channels: Map<string, Channel> = new Map<string, Channel>();\n  private readonly tombstones: Set<string> = new Set<string>();\n  private myChannelsFetched = false;\n  private myChannelsRead: Deferred<boolean> = new Deferred<boolean>();\n\n  constructor(\n    private readonly configuration: Configuration,\n    private readonly services: ChannelsServices\n  ) {\n    super();\n  }\n\n  private async getMap(): Promise<SyncMap> {\n    return await this.services.syncClient.map({\n      id: this.configuration.myConversations,\n      mode: 'open_existing'\n    });\n  }\n\n  /**\n   * Add channel to server\n   * @private\n   * @returns {Promise<Channel>} Channel\n   */\n  async addChannel(options): Promise<Channel> {\n    let attributes;\n    if (typeof options.attributes === 'undefined') {\n      attributes = {};\n    } else {\n      attributes = options.attributes;\n    }\n\n    const response = await this.services.commandExecutor.mutateResource<CreateChannelRequest, ChannelResponse>(\n      'post',\n      this.configuration.links.conversations,\n      {\n        type: options.isPrivate ? 'private' : 'public',\n        unique_name: options.uniqueName,\n        friendly_name: options.friendlyName,\n        attributes: attributes !== undefined ? JSON.stringify(attributes) : undefined,\n      }\n    );\n\n    const channelSid = response.sid || null;\n    const channelDocument = response.sync_objects.conversation || null;\n    const links = {\n      self: response.url,\n      ...response.links\n    };\n\n    let existingChannel = this.channels.get(channelSid);\n    if (existingChannel) {\n      await existingChannel._subscribe();\n      return existingChannel;\n    }\n\n    let channel = new Channel(\n      {\n        channel: channelDocument,\n\n        entityName: null,\n        uniqueName: null,\n        attributes: null,\n        createdBy: null,\n        friendlyName: null,\n        lastConsumedMessageIndex: null,\n        type: options.isPrivate ? 'private' : 'public',\n        dateCreated: null,\n        dateUpdated: null\n      },\n      channelSid,\n      links,\n      this.configuration,\n      this.services\n    );\n\n    this.channels.set(channel.sid, channel);\n    this.registerForEvents(channel);\n\n    await channel._subscribe();\n    this.emit('channelAdded', channel);\n    return channel;\n  }\n\n  /**\n   * Fetch channels list and instantiate all necessary objects\n   */\n  async fetchChannels() {\n    try {\n      const map = await this.getMap();\n\n      map.on('itemAdded', args => {\n        log.debug(`itemAdded: ${args.item.key}`);\n        this.upsertChannel('sync', args.item.key, args.item.data);\n      });\n\n      map.on('itemRemoved', args => {\n        log.debug(`itemRemoved: ${args.key}`);\n        const sid = args.key;\n\n        if (!this.myChannelsFetched) {\n          this.tombstones.add(sid);\n        }\n\n        const channel = this.channels.get(sid);\n\n        if (!channel) {\n          return;\n        }\n\n        if (channel.status === 'joined' || channel.status === 'invited') {\n          channel._setStatus('notParticipating', 'sync');\n          this.emit('channelLeft', channel);\n        }\n\n        if (channel.isPrivate) {\n          this.channels.delete(sid);\n          this.emit('channelRemoved', channel);\n          channel.emit('removed', channel);\n        }\n      });\n\n      map.on('itemUpdated', args => {\n        log.debug(`itemUpdated: ${args.item.key}`);\n        this.upsertChannel('sync', args.item.key, args.item.data);\n      });\n\n      const myChannels = await this._fetchMyChannels();\n      const upserts = [];\n\n      for (const channel of myChannels) {\n        upserts.push(this.upsertChannel('rest', channel.channel_sid, channel));\n      }\n\n      this.myChannelsRead.set(true);\n\n      await Promise.all(upserts);\n\n      this.myChannelsFetched = true;\n      this.tombstones.clear();\n\n      log.debug('The channels list has been successfully fetched');\n\n      return this;\n    } catch (error) {\n      const errorMessage = 'Failed to fetch the channels list';\n\n      if (this.services.syncClient.connectionState !== 'disconnected') {\n        log.error(errorMessage, error);\n      }\n\n      log.debug(`ERROR: ${errorMessage}`, error);\n\n      throw error;\n    }\n  }\n\n  private _wrapPaginator(page, op) {\n    return op(page.items)\n      .then(items => ({\n        items: items,\n        hasNextPage: page.hasNextPage,\n        hasPrevPage: page.hasPrevPage,\n        nextPage: () => page.nextPage().then(x => this._wrapPaginator(x, op)),\n        prevPage: () => page.prevPage().then(x => this._wrapPaginator(x, op))\n      }));\n  }\n\n  getChannels(args) {\n    return this.getMap()\n               .then(channelsMap => channelsMap.getItems(args))\n               .then(page => this._wrapPaginator(page\n                 , items => Promise.all(items.map(item => this.upsertChannel('sync', item.key, item.data))))\n               );\n  }\n\n  getChannel(sid: string): Promise<Channel> {\n    return this.getMap()\n               .then(channelsMap => channelsMap.getItems({ key: sid }))\n               .then(page => page.items.map(item => this.upsertChannel('sync', item.key, item.data)))\n               .then(items => items.length > 0 ? items[0] : null);\n  }\n\n  pushChannel(descriptor: ChannelDescriptor): Promise<Channel> {\n    const sid = descriptor.sid;\n    const data = {\n      entityName: null,\n      lastConsumedMessageIndex: descriptor.lastConsumedMessageIndex,\n      type: descriptor.type,\n      status: descriptor.status,\n      friendlyName: descriptor.friendlyName,\n      dateUpdated: descriptor.dateUpdated,\n      dateCreated: descriptor.dateCreated,\n      uniqueName: descriptor.uniqueName,\n      createdBy: descriptor.createdBy,\n      attributes: descriptor.attributes,\n      channel: descriptor.channel,\n      notificationLevel: descriptor.notificationLevel,\n      sid: sid\n    };\n\n    return this.upsertChannel('chat', sid, data);\n  }\n\n  private _updateChannel(source: Channels.DataSource, channel: Channel, data): void {\n    const areSourcesDifferent = channel._statusSource() !== undefined && source !== channel._statusSource();\n    const isChannelSourceSync = source !== 'rest' || channel._statusSource() === 'sync';\n\n    if (areSourcesDifferent && isChannelSourceSync && source !== 'sync') {\n      log.trace('upsertChannel: the channel is known from sync and it came from chat, ignoring', {\n        sid: channel.sid,\n        data: data.status,\n        channel: channel.status\n      });\n\n      return;\n    }\n\n    if (['joined', 'invited'].includes(data.status) && channel.status !== data.status) {\n      channel._setStatus(data.status, source);\n\n      let updateData: any = {};\n\n      if (data.notificationLevel !== undefined) {\n        updateData.notificationLevel = data.notificationLevel;\n      }\n\n      if (data.lastConsumedMessageIndex !== undefined) {\n        updateData.lastConsumedMessageIndex = data.lastConsumedMessageIndex;\n      }\n\n      if (!isDeepEqual(updateData, {})) {\n        channel._update(updateData);\n      }\n\n      channel._subscribe().then(() => {\n        this.emit(data.status === 'joined' ? 'channelJoined' : 'channelInvited', channel);\n      });\n\n      return;\n    }\n\n    if (['joined', 'invited'].includes(channel.status) && data.status === 'notParticipating') {\n      channel._setStatus('notParticipating', source);\n      channel._update(data);\n      channel._subscribe().then(() => {\n        this.emit('channelLeft', channel);\n      });\n\n      return;\n    }\n\n    if (data.type === 'private' && data.status === 'notParticipating') {\n      channel._subscribe();\n\n      return;\n    }\n\n    channel._update(data);\n  }\n\n  private upsertChannel(source: Channels.DataSource, sid: string, data): Promise<Channel> {\n    log.trace(`upsertChannel called for ${sid}`, data);\n    const channel = this.channels.get(sid);\n\n    // If the channel is known, update it\n    if (channel) {\n      log.trace(\n        `upsertChannel: the channel ${channel.sid} is known;` +\n        `its status is known from source ${channel._statusSource()} ` +\n        `and the update came from source ${source}`,\n        channel\n      );\n      this._updateChannel(source, channel, data);\n\n      return channel._subscribe().then(() => channel);\n    }\n\n    // If the channel is deleted, ignore it\n    if (['chat', 'rest'].includes(source) && this.tombstones.has(sid)) {\n      log.trace('upsertChannel: the channel is deleted but reappeared again from chat, ignoring', sid);\n\n      return;\n    }\n\n    // If the channel is unknown, fetch it\n    log.trace(`upsertChannel: creating a local channel object with sid ${sid}`, data);\n    const baseLink = `${this.configuration.links.conversations}/${sid}`;\n    const links = {\n      self: baseLink,\n      messages: `${baseLink}/Messages`,\n      participants: `${baseLink}/Participants`,\n      invites: `${baseLink}/Invites`\n    };\n    const newChannel = new Channel(data, sid, links, this.configuration, this.services);\n    this.channels.set(sid, newChannel);\n\n    return newChannel._subscribe().then(() => {\n      this.registerForEvents(newChannel);\n      this.emit('channelAdded', newChannel);\n\n      if (['joined', 'invited'].includes(data.status)) {\n        newChannel._setStatus(data.status, source);\n        this.emit(data.status === 'joined' ? 'channelJoined' : 'channelInvited', newChannel);\n      }\n\n      return newChannel;\n    });\n  }\n\n  private onChannelRemoved(sid: string) {\n    let channel = this.channels.get(sid);\n    if (channel) {\n      this.channels.delete(sid);\n      this.emit('channelRemoved', channel);\n    }\n  }\n\n  private registerForEvents(channel) {\n    channel.on('removed', () => this.onChannelRemoved(channel.sid));\n    channel.on('updated', (args: Channel.UpdatedEventArgs) => this.emit('channelUpdated', args));\n    channel.on('memberJoined', this.emit.bind(this, 'memberJoined'));\n    channel.on('memberLeft', this.emit.bind(this, 'memberLeft'));\n    channel.on('memberUpdated', (args: Member.UpdatedEventArgs) => this.emit('memberUpdated', args));\n    channel.on('messageAdded', this.emit.bind(this, 'messageAdded'));\n    channel.on('messageUpdated', (args: Message.UpdatedEventArgs) => this.emit('messageUpdated', args));\n    channel.on('messageRemoved', this.emit.bind(this, 'messageRemoved'));\n    channel.on('typingStarted', this.emit.bind(this, 'typingStarted'));\n    channel.on('typingEnded', this.emit.bind(this, 'typingEnded'));\n  }\n\n  private async _fetchMyChannels() {\n    let channels = [];\n    let pageToken: null | string = null;\n\n    do {\n      const url = new UriBuilder(this.configuration.links.myConversations);\n\n      if (pageToken) {\n        url.arg('PageToken', pageToken);\n      }\n\n      const response = await this.services.network.get(url.build());\n      const preProcessedChannels = response.body.conversations.map(\n        (channelDescriptor) => ({\n          descriptor: channelDescriptor,\n          channel_sid: channelDescriptor.conversation_sid,\n          status: channelDescriptor.status,\n          channel: channelDescriptor.sync_objects.conversation,\n          messages: channelDescriptor.sync_objects.messages,\n          roster: `${channelDescriptor.conversation_sid}.roster`,\n          lastConsumedMessageIndex: channelDescriptor.last_consumed_message_index,\n          notificationLevel: channelDescriptor.notification_level\n        })\n      );\n\n      pageToken = response.body.meta.next_token;\n      channels = [...channels, ...preProcessedChannels];\n    } while (pageToken);\n\n    return channels;\n  }\n}\n\nnamespace Channels {\n  export type DataSource = 'sync' | 'chat' | 'rest';\n}\n\nexport { Channel, Channels };\n","import { EventEmitter } from 'events';\n\nimport { Logger } from './logger';\nimport { SyncClient } from 'twilio-sync';\nimport { isDeepEqual, parseAttributes } from './util';\nimport { validateTypesAsync, literal } from 'twilio-sdk-type-validator';\nimport { Configuration } from './configuration';\nimport { CommandExecutor } from './commandexecutor';\nimport { EditUserRequest, EditUserResponse } from './interfaces/commands/edituser';\n\nconst log = Logger.scope('User');\n\ninterface UserState {\n  identity: string;\n  entityName: string;\n  friendlyName: string;\n  attributes: any;\n  online: boolean;\n  notifiable: boolean;\n}\n\nexport interface UserServices {\n  syncClient: SyncClient;\n  commandExecutor: CommandExecutor;\n}\n\ninterface UserLinks {\n  self: string;\n}\n\nnamespace User {\n  export type SubscriptionState = 'initializing' | 'subscribed' | 'unsubscribed';\n\n  export type UpdateReason = 'friendlyName' | 'attributes' | 'online' | 'notifiable';\n\n  export interface UpdatedEventArgs {\n    user: User;\n    updateReasons: User.UpdateReason[];\n  }\n}\n\n/**\n * @classdesc Extended user information.\n * Note that <code>online</code> and <code>notifiable</code> properties are eligible\n * to use only if reachability function is enabled.\n * You may check if it is enabled by reading value of {@link Client}'s <code>reachabilityEnabled</code> property.\n *\n * @property {String} identity - User identity\n * @property {String} friendlyName - User friendly name, null if not set\n * @property {any} attributes - Object with custom attributes for user\n * @property {Boolean} online - User real-time channel connection status\n * @property {Boolean} notifiable - User push notification registration status\n * @property {Boolean} isSubscribed - Check if this user receives real-time status updates\n *\n * @fires User#updated\n * @fires User#userSubscribed\n * @fires User#userUnsubscribed\n *\n * @constructor\n * @param {String} identity - Identity of user\n * @param {String} entityId - id of user's object\n * @param {Object} datasync - datasync service\n */\nclass User extends EventEmitter {\n\n  private entity: any;\n  private state: UserState;\n  private promiseToFetch: Promise<User>;\n  private subscribed: User.SubscriptionState;\n\n  constructor(\n    identity: string,\n    entityName: string,\n    private readonly links: UserLinks,\n    private readonly configuration: Configuration,\n    private readonly services: UserServices\n  ) {\n    super();\n\n    this.subscribed = 'initializing';\n    this.setMaxListeners(0);\n\n    this.state = {\n      identity,\n      entityName,\n      friendlyName: null,\n      attributes: {},\n      online: null,\n      notifiable: null\n    };\n  }\n\n  /**\n   * The update reason for <code>updated</code> event emitted on User\n   * @typedef {('friendlyName' | 'attributes' | 'online' | 'notifiable')} User#UpdateReason\n   */\n\n  public get identity(): string { return this.state.identity; }\n\n  public set identity(identity: string) { this.state.identity = identity; }\n\n  public set entityName(name: string) { this.state.entityName = name; }\n\n  public get attributes() { return this.state.attributes; }\n\n  public get friendlyName(): string { return this.state.friendlyName; }\n\n  public get online(): boolean { return this.state.online; }\n\n  public get notifiable(): boolean { return this.state.notifiable; }\n\n  public get isSubscribed(): boolean { return this.subscribed == 'subscribed'; }\n\n  // Handles service updates\n  _update(key: string, value: any) {\n    let updateReasons: User.UpdateReason[] = [];\n    log.debug('User for', this.state.identity, 'updated:', key, value);\n    switch (key) {\n      case 'friendlyName':\n        if (this.state.friendlyName !== value.value) {\n          updateReasons.push('friendlyName');\n          this.state.friendlyName = value.value;\n        }\n        break;\n      case 'attributes':\n        const updateAttributes = parseAttributes(value.value, `Retrieved malformed attributes from the server for user: ${this.state.identity}`, log);\n        if (!isDeepEqual(this.state.attributes, updateAttributes)) {\n          this.state.attributes = updateAttributes;\n          updateReasons.push('attributes');\n        }\n        break;\n      case 'reachability':\n        if (this.state.online !== value.online) {\n          this.state.online = value.online;\n          updateReasons.push('online');\n        }\n        if (this.state.notifiable !== value.notifiable) {\n          this.state.notifiable = value.notifiable;\n          updateReasons.push('notifiable');\n        }\n        break;\n      default:\n        return;\n    }\n    if (updateReasons.length > 0) {\n      this.emit('updated', { user: this, updateReasons: updateReasons });\n    }\n  }\n\n  // Fetch reachability info\n  private async _updateReachabilityInfo(map, update) {\n    if (!this.configuration.reachabilityEnabled) {\n      return Promise.resolve();\n    }\n\n    return map.get('reachability')\n      .then(update)\n      .catch(err => { log.warn('Failed to get reachability info for ', this.state.identity, err); });\n  }\n\n  // Fetch user\n  async _fetch() {\n    if (!this.state.entityName) {\n      return this;\n    }\n\n    this.promiseToFetch = this.services.syncClient.map({ id: this.state.entityName, mode: 'open_existing', includeItems: true })\n                              .then(map => {\n                                this.entity = map;\n                                map.on('itemUpdated', args => {\n                                  log.debug(this.state.entityName + ' (' + this.state.identity + ') itemUpdated: ' + args.item.key);\n                                  return this._update(args.item.key, args.item.data);\n                                });\n                                return Promise.all([\n                                  map.get('friendlyName')\n                                     .then(item => this._update(item.key, item.data)),\n                                  map.get('attributes')\n                                     .then(item => this._update(item.key, item.data)),\n                                  this._updateReachabilityInfo(map,\n                                    item => this._update(item.key, item.data))\n                                ]);\n                              })\n                              .then(() => {\n                                log.debug('Fetched for', this.identity);\n                                this.subscribed = 'subscribed';\n                                this.emit('userSubscribed', this);\n                                return this;\n                              })\n                              .catch(err => {\n                                this.promiseToFetch = null;\n                                throw err;\n                              });\n    return this.promiseToFetch;\n  }\n\n  _ensureFetched() {\n    return this.promiseToFetch || this._fetch();\n  }\n\n  /**\n   * Updates user attributes.\n   * @param {any} attributes new attributes for User.\n   * @returns {Promise<User>}\n   */\n  @validateTypesAsync(['string', 'number', 'boolean', 'object', literal(null)])\n  public async updateAttributes(attributes: any): Promise<User> {\n    if (this.subscribed == 'unsubscribed') {\n      throw new Error('Can\\'t modify unsubscribed object');\n    }\n\n    await this.services.commandExecutor.mutateResource<EditUserRequest, EditUserResponse>(\n      'post',\n      this.links.self,\n      {\n        attributes: JSON.stringify(attributes)\n      }\n    );\n\n    return this;\n  }\n\n  /**\n   * Update Users friendlyName.\n   * @param {String} friendlyName - Updated friendlyName\n   * @returns {Promise<User>}\n   */\n  @validateTypesAsync('string')\n  public async updateFriendlyName(friendlyName): Promise<User> {\n    if (this.subscribed == 'unsubscribed') {\n      throw new Error('Can\\'t modify unsubscribed object');\n    }\n\n    await this.services.commandExecutor.mutateResource<EditUserRequest, EditUserResponse>(\n      'post',\n      this.links.self,\n      {\n        friendly_name: friendlyName\n      }\n    );\n\n    return this;\n  }\n\n  /**\n   * Removes User from subscription list.\n   * @returns {Promise<void>} Promise of completion\n   */\n  async unsubscribe(): Promise<void> {\n    if (this.promiseToFetch) {\n      await this.promiseToFetch;\n      this.entity.close();\n      this.promiseToFetch = null;\n      this.subscribed = 'unsubscribed';\n      this.emit('userUnsubscribed', this);\n    }\n  }\n}\n\nexport { User };\n\n/**\n * Fired when User's properties or reachability status have been updated.\n * @event User#updated\n * @type {Object}\n * @property {User} user - Updated User\n * @property {User#UpdateReason[]} updateReasons - Array of User's updated event reasons\n */\n/**\n * Fired when Client is subscribed to User.\n * @event User#userSubscribed\n * @type {User}\n */\n/**\n * Fired when Client is unsubscribed from this User.\n * @event User#userUnsubscribed\n * @type {User}\n */\n","import { Logger } from './logger';\nimport { User } from './user';\nimport { Users } from './data/users';\nimport { parseAttributes } from './util';\n\nconst log = Logger.scope('UserDescriptor');\n\nexport interface UserDescriptorServices {\n  users: Users;\n}\n\n/**\n * @classdesc Extended user information.\n * Note that <code>online</code> and <code>notifiable</code> properties are eligible\n * to use only if reachability function is enabled.\n * You may check if it is enabled by reading value of {@link Client}'s <code>reachabilityEnabled</code> property.\n *\n * @property {String} identity - User identity\n * @property {String} friendlyName - User friendly name, null if not set\n * @property {any} attributes - Object with custom attributes for user\n * @property {Boolean} online - User real-time channel connection status\n * @property {Boolean} notifiable - User push notification registration status\n *\n * @constructor\n * @param {Users} users Users instance\n * @param {Object} descriptor User descriptor data object\n */\nclass UserDescriptor {\n\n  private services: UserDescriptorServices;\n  private descriptor: any;\n\n  public readonly identity: string;\n  public readonly friendlyName: string;\n  public readonly attributes: any;\n  public readonly online: boolean;\n  public readonly notifiable: boolean;\n\n  /**\n   * @param {UserDescriptorServices} services - services, needed for UserDescriptor\n   * @param {Object} descriptor User descriptor data object\n   * @private\n   */\n  constructor(services: UserDescriptorServices, descriptor: any) {\n    this.services = services;\n    this.descriptor = descriptor;\n\n    this.identity = descriptor.identity;\n    this.friendlyName = descriptor.friendly_name;\n    this.attributes = parseAttributes(descriptor.attributes, 'Failed to parse user attributes', log);\n    this.online = descriptor.is_online;\n    this.notifiable = descriptor.is_notifiable;\n  }\n\n  /**\n   * Gets User object from descriptor and subscribes to it.\n   * @returns {Promise<User>}\n   */\n  subscribe(): Promise<User> {\n    return this.services.users.getUser(this.identity, this.descriptor.sync_unique_name);\n  }\n\n  _getDescriptor() {\n    return this.descriptor;\n  }\n}\n\nexport { UserDescriptor };\n","import { UriBuilder } from '../util/index';\nimport { RestPaginator } from '../restpaginator';\nimport { UserDescriptor } from '../userdescriptor';\nimport { Users } from './users';\nimport { Network } from '../services/network';\nimport { Configuration } from '../configuration';\n\nexport interface UserDescriptorsServices {\n  users: Users;\n  network: Network;\n}\n\nclass UserDescriptors {\n  constructor(\n    private readonly configuration: Configuration,\n    private readonly services: UserDescriptorsServices,\n  ) {\n  }\n\n  public async getUserDescriptor(identity: string): Promise<UserDescriptor> {\n    const url = new UriBuilder(this.configuration.links.users).path(identity).build();\n    let response = await this.services.network.get(url);\n    return new UserDescriptor(this.services, response.body);\n\n  }\n\n  public async getChannelUserDescriptors(channelSid: string, args: any = {}): Promise<RestPaginator<UserDescriptor>> {\n    const url = new UriBuilder(this.configuration.links.users)\n      .arg('ConversationSid', channelSid).arg('PageToken', args.pageToken)\n      .build();\n    let response = await this.services.network.get(url);\n    return new RestPaginator<UserDescriptor>(response.body.users.map(x => new UserDescriptor(this.services, x))\n      , pageToken => this.getChannelUserDescriptors(channelSid, { pageToken })\n      , response.body.meta.prev_token\n      , response.body.meta.next_token);\n  }\n}\n\nexport { UserDescriptors };\n","import { EventEmitter } from 'events';\nimport { User } from '../user';\nimport { UserDescriptor } from '../userdescriptor';\nimport { UserDescriptors } from './userdescriptors';\nimport { Paginator } from '../interfaces/paginator';\nimport { Network } from '../services/network';\nimport { SyncClient } from 'twilio-sync';\nimport { Configuration } from '../configuration';\nimport { CommandExecutor } from '../commandexecutor';\n\nexport interface UsersServices {\n  network: Network;\n  syncClient: SyncClient;\n  commandExecutor: CommandExecutor;\n}\n\n/**\n * @classdesc Container for known users\n * @fires Users#userUpdated\n */\nclass Users extends EventEmitter {\n\n  private userDescriptors: UserDescriptors;\n  private subscribedUsers: Map<string, User>;\n  private fifoStack: any;\n  public readonly myself: User;\n\n  constructor(\n    private readonly configuration: Configuration,\n    private readonly services: UsersServices\n  ) {\n    super();\n\n    const userLinks = {\n      self: `${configuration.links.users}/${configuration.userIdentity}`\n    };\n\n    this.fifoStack = [];\n    this.myself = new User(this.configuration.userIdentity, this.configuration.userInfo, userLinks, this.configuration, this.services);\n    this.myself.on('updated', (args: User.UpdatedEventArgs) => this.emit('userUpdated', args));\n    this.myself.on('userSubscribed', () => this.emit('userSubscribed', this.myself));\n    this.myself.on('userUnsubscribed', () => {\n      this.emit('userUnsubscribed', this.myself);\n      this.myself._ensureFetched();\n    });\n    this.subscribedUsers = new Map<string, User>();\n    this.userDescriptors = new UserDescriptors(this.configuration, {...this.services, users: this });\n  }\n\n  private handleUnsubscribeUser(user: User): void {\n    if (this.subscribedUsers.has(user.identity)) {\n      this.subscribedUsers.delete(user.identity);\n    }\n    let foundItemIndex = -1;\n    let foundItem = this.fifoStack.find((item, index) => {\n      if (item == user.identity) {\n        foundItemIndex = index;\n        return true;\n      }\n      return false;\n    });\n    if (foundItem) {\n      this.fifoStack.splice(foundItemIndex, 1);\n    }\n    this.emit('userUnsubscribed', user);\n  }\n\n  private handleSubscribeUser(user: User): void {\n    if (this.subscribedUsers.has(user.identity)) {\n      return;\n    }\n    if (this.fifoStack.length >= this.configuration.userInfosToSubscribe) {\n      this.subscribedUsers.get(this.fifoStack.shift()).unsubscribe();\n    }\n    this.fifoStack.push(user.identity);\n    this.subscribedUsers.set(user.identity, user);\n    this.emit('userSubscribed', user);\n  }\n\n  /**\n   * Gets user, if it's in subscribed list - then return the user object from it,\n   * if not - then subscribes and adds user to the FIFO stack\n   * @returns {Promise<User>} Fully initialized user\n   */\n  async getUser(identity: string, entityName: string = null): Promise<User> {\n    await this.myself._ensureFetched();\n\n    if (identity == this.myself.identity) {\n      return this.myself;\n    }\n\n    let user = this.subscribedUsers.get(identity);\n    if (!user) {\n      if (!entityName) {\n        let userDescriptor = await this.getUserDescriptor(identity);\n        entityName = userDescriptor._getDescriptor().sync_objects.user_info_map;\n      }\n\n      const userLinks = {\n        self: `${this.configuration.links.users}/${identity}`\n      };\n\n      user = new User(identity, entityName, userLinks, this.configuration, this.services);\n      user.on('updated', (args: User.UpdatedEventArgs) => this.emit('userUpdated', args));\n      user.on('userSubscribed', () => this.handleSubscribeUser(user));\n      user.on('userUnsubscribed', () => this.handleUnsubscribeUser(user));\n      await user._ensureFetched();\n    }\n\n    return user;\n  }\n\n  /**\n   * @returns {Promise<UserDescriptor>} User descriptor\n   */\n  async getUserDescriptor(identity: string): Promise<UserDescriptor> {\n    return this.userDescriptors.getUserDescriptor(identity);\n  }\n\n  /**\n   * @returns {Promise<Paginator<UserDescriptor>>} Users descriptors page for given channel sid\n   */\n  async getChannelUserDescriptors(channelSid: string): Promise<Paginator<UserDescriptor>> {\n    return this.userDescriptors.getChannelUserDescriptors(channelSid);\n  }\n\n  /**\n   * @returns {Promise<Array<User>>} returns list of subscribed User objects {@see User}\n   */\n  async getSubscribedUsers(): Promise<Array<User>> {\n    await this.myself._ensureFetched();\n\n    const users = [this.myself];\n    this.subscribedUsers.forEach((user) => users.push(user));\n\n    return users;\n  }\n}\n\nexport { Users };\n","import { Logger } from '../logger';\n\nimport { Notifications } from 'twilio-notifications';\n\nimport { NotificationTypes } from '../interfaces/notificationtypes';\nimport { Transport } from '../interfaces/transport';\nimport { Configuration } from '../configuration';\n\nconst log = Logger.scope('TypingIndicator');\n\nexport interface TypingIndicatorServices {\n  transport: Transport;\n  notificationClient: Notifications;\n}\n\n/**\n * An important note in regards to typing timeout timers. There are two places that the SDK can get the \"typing_timeout\" attribute from. The first\n * place that the attribute appears in is the response received from POST -> /v1/typing REST call. In the body of that response, the value of the\n * \"typing_timeout\" attribute will be exactly the same as defined in the console. The second place that the attribute appears in is from a\n * notification of type \"twilio.ipmsg.typing_indicator\". In this case, the \"typing_timeout\" value will be +1 of that in the console. This\n * intentional. The timeout returned from the POST -> /v1/typing call should be used to disable further calls for that period of time. On contrary,\n * the timeout returned from the notification should be used as the timeout for the \"typingEnded\" event, +1 is to account for latency.\n *\n * @private\n */\n\n/**\n * @class TypingIndicator\n *\n * @constructor\n * @private\n */\nclass TypingIndicator {\n  private sentUpdates: Map<string, number>;\n  private serviceTypingTimeout;\n\n  constructor(\n    private readonly getChannel,\n    private readonly configuration: Configuration,\n    private readonly services: TypingIndicatorServices\n  ) {\n    this.serviceTypingTimeout = null;\n    this.sentUpdates = new Map();\n  }\n\n  public get typingTimeout(): number {\n    return this.configuration.typingIndicatorTimeoutOverride\n      || this.serviceTypingTimeout\n      || this.configuration.typingIndicatorTimeoutDefault;\n  }\n\n  /**\n   * Initialize TypingIndicator controller\n   * Registers for needed message types and sets listeners\n   * @private\n   */\n  initialize() {\n    this.services.notificationClient.subscribe(NotificationTypes.TYPING_INDICATOR, 'twilsock');\n    this.services.notificationClient.on('message', (type, message) => {\n      if (type === NotificationTypes.TYPING_INDICATOR) {\n        this.handleRemoteTyping(message);\n      }\n    });\n  }\n\n  /**\n   * Remote members typing events handler\n   * @private\n   */\n  handleRemoteTyping(message) {\n    log.trace('Got new typing indicator ', message);\n\n    this.getChannel(message.channel_sid)\n      .then(channel => {\n        if (!channel) {\n          return;\n        }\n\n        channel.members.forEach(member => {\n          if (member.identity !== message.identity) {\n            return;\n          }\n\n          const timeout = this.configuration.typingIndicatorTimeoutOverride + 1000 || message.typing_timeout * 1000;\n          member._startTyping(timeout);\n        });\n      })\n      .catch(err => {\n        log.error(err);\n        throw err;\n      });\n  }\n\n  /**\n   * Send typing event for the given channel sid\n   * @param {String} channelSid\n   */\n  send(channelSid: string) {\n    const lastUpdate = this.sentUpdates.get(channelSid);\n    if (lastUpdate && lastUpdate > (Date.now() - this.typingTimeout)) {\n      return Promise.resolve();\n    }\n\n    this.sentUpdates.set(channelSid, Date.now());\n    return this._send(channelSid);\n  }\n\n  private _send(channelSid: string) {\n    log.trace('Sending typing indicator');\n\n    const url = this.configuration.links.typing;\n    const headers = {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    };\n    const body = 'ChannelSid=' + channelSid;\n\n    return this.services.transport.post<{ typing_timeout: number }>(url, headers, body, this.configuration.productId)\n      .then(response => {\n        if (response.body.hasOwnProperty('typing_timeout')) {\n          this.serviceTypingTimeout = response.body.typing_timeout * 1000;\n        }\n      }).catch(err => {\n        log.error('Failed to send typing indicator:', err);\n        throw err;\n      });\n  }\n}\n\nexport { TypingIndicator };\n","import { UriBuilder } from '../util/index';\nimport { RestPaginator } from '../restpaginator';\nimport { ChannelDescriptor } from '../channeldescriptor';\nimport { Network } from '../services/network';\nimport { Client } from '../client';\n\nexport interface UserChannelServices {\n  network: Network;\n}\n\n/**\n * Users channels collection\n * It's a cassandra-backed pull-based collection\n */\nclass UserChannels {\n  private client: Client;\n  private services: UserChannelServices;\n  private url: string;\n\n  constructor(client: Client, services: UserChannelServices, url: string) {\n    this.client = client;\n    this.services = services;\n    this.url = url;\n  }\n\n  public async getChannels(args: any = {}): Promise<RestPaginator<ChannelDescriptor>> {\n    const url = new UriBuilder(this.url).arg('PageToken', args.pageToken).build();\n    let response = await this.services.network.get(url);\n    return new RestPaginator<ChannelDescriptor>(response.body.conversations.map(x => new ChannelDescriptor(this.client, x))\n      , pageToken => this.getChannels({ pageToken })\n      , response.body.meta.previous_token\n      , response.body.meta.next_token);\n  }\n}\n\nexport { UserChannels };\n","'use strict';\n\nnamespace PushNotification {\n  export type Type = 'twilio.channel.new_message' | 'twilio.channel.added_to_channel'\n    | 'twilio.channel.invited_to_channel' | 'twilio.channel.removed_from_channel';\n\n  export interface Descriptor {\n    title: string;\n    body: string;\n    sound: string;\n    badge: number;\n    action: string;\n    type: PushNotification.Type;\n    data: Object;\n  }\n}\n\n/**\n * @classdesc Push notification representation within Chat Client\n * @property {String} [action] - Notification action (`click_action` in FCM/GCM terms and `category` in APN terms)\n * @property {Number} [badge] - Number for the badge\n * @property {String} body - Notification text\n * @property {PushNotification#ChatData} data - Additional Chat data\n * @property {String} [sound] - Notification sound\n * @property {String} [title] - Notification title\n * @property {PushNotification#NotificationType} type - Notification type\n */\nclass PushNotification {\n  public readonly title: string;\n  public readonly body: string;\n  public readonly sound: string;\n  public readonly badge: number;\n  public readonly action: string;\n  public readonly type: PushNotification.Type;\n  public readonly data: Object;\n\n  /**\n   * Chat push notification type\n   * @typedef {('twilio.channel.new_message' | 'twilio.channel.added_to_channel'\n   | 'twilio.channel.invited_to_channel'  | 'twilio.channel.removed_from_channel')} PushNotification#NotificationType\n   */\n\n  /**\n   * Additional Chat data for given Push Notification\n   * @typedef {Object} PushNotification#ChatData\n   * @property {String} [channelSid] - SID of Channel\n   * @property {Number} [messageIndex] - Index of Message in Channel\n   * @property {String} [messageSid] - SID of Message\n   */\n\n  /**\n   * @param {PushNotification.Descriptor} data - initial data for PushNotification\n   */\n  constructor(data: PushNotification.Descriptor) {\n    this.title = data.title || null;\n    this.body = data.body || null;\n    this.sound = data.sound || null;\n    this.badge = data.badge || null;\n    this.action = data.action || null;\n    this.type = data.type || null;\n    this.data = data.data || {};\n  }\n\n}\n\nexport { PushNotification };\n","import { Result, Transport } from './interfaces/transport';\nimport { MutationConflictResponse } from './interfaces/commands/mutationconflict';\nimport { v4 as uuidv4 } from 'uuid';\nimport { AsyncRetrier } from 'operation-retrier';\n\nexport interface CommandExecutorServices {\n  transport: Transport;\n}\n\nconst trimSlashes = (url: string): string =>\n  url.replace(/(^\\/+|\\/+$)/g, '');\n\nconst isMutationConflictResponse = (response: Result<unknown>): response is Result<MutationConflictResponse> =>\n  response.status.code === 202;\n\nclass CommandExecutor {\n  constructor(\n    private _serviceUrl: string,\n    private _services: CommandExecutorServices,\n    private _productId?: string\n  ) {}\n\n  private _preProcessUrl(url: string): string {\n    const trimmedUrl = trimSlashes(url);\n\n    if (/^https?:\\/\\//.test(url)) {\n      return trimmedUrl;\n    }\n\n    return `${trimSlashes(this._serviceUrl)}/${trimmedUrl}`;\n  }\n\n  private async _makeRequest<REQ = void, RESP = void>(\n    method: 'get' | 'post' | 'delete',\n    url: string,\n    requestBody?: REQ,\n    headers?: Record<string, string>\n  ): Promise<Result<RESP>> {\n    const preProcessedUrl = this._preProcessUrl(url);\n    const finalHeaders = {\n      'Content-Type': 'application/json; charset=utf-8',\n      ...(headers || {})\n    };\n    let response: Result<RESP>;\n\n    switch (method) {\n      case 'get':\n        let getUrl = preProcessedUrl;\n\n        if (requestBody) {\n          getUrl +=\n            '?' +\n            Object.entries(requestBody)\n              .map((entry) => entry.map(encodeURIComponent).join('='))\n              .join('&');\n        }\n\n        response = await this._services.transport.get(getUrl, finalHeaders, this._productId);\n        break;\n      case 'post':\n        response = await this._services.transport.post(preProcessedUrl, finalHeaders, JSON.stringify(requestBody), this._productId);\n        break;\n      case 'delete':\n        response = await this._services.transport.delete(preProcessedUrl, finalHeaders, this._productId);\n        break;\n    }\n\n    if (response.status.code < 200 || response.status.code >= 300) {\n      throw new Error(`Request responded with a non-success code ${response.status.code}`);\n    }\n\n    return response;\n  }\n\n  public async fetchResource<REQ = void, RESP = void>(\n    url: string,\n    requestBody?: REQ\n  ): Promise<RESP> {\n    const maxAttemptsCount = 6;\n    let result: Result<RESP>;\n\n    try {\n      result = await new AsyncRetrier({ min: 50, max: 1600, maxAttemptsCount })\n        .run(() => this._makeRequest<REQ, RESP>('get', url, requestBody));\n    } catch {\n      throw new Error(`Fetch resource from \"${url}\" failed.`);\n    }\n\n    return result.body;\n  }\n\n  public async mutateResource<REQ = void, RESP = void>(\n    method: 'post' | 'delete',\n    url: string,\n    requestBody?: REQ\n  ): Promise<RESP> {\n    const result = await this._makeRequest<REQ, RESP>(method, url, requestBody, {\n      'X-Twilio-Mutation-Id': uuidv4()\n    });\n\n    if (isMutationConflictResponse(result)) {\n      return await this.fetchResource<undefined, RESP>(result.body.resource_url);\n    }\n\n    return result.body;\n  }\n}\n\nexport { CommandExecutor };","import { EventEmitter } from 'events';\nimport { Logger } from './logger';\nimport { Configuration } from './configuration';\n\nimport { User } from './user';\nimport { PublicChannels } from './data/publicchannels';\nimport { Network } from './services/network';\n\nimport { Transport } from './interfaces/transport';\nimport { NotificationTypes } from './interfaces/notificationtypes';\n\nimport { Twilsock as TwilsockClient } from 'twilsock';\nimport { Notifications as NotificationClient, ChannelType, ConnectionState as NotificationConnectionState } from 'twilio-notifications';\nimport { SyncClient } from 'twilio-sync';\nimport { McsClient } from 'twilio-mcs-client';\n\nimport { Channels as ChannelsEntity, Channel } from './data/channels';\n\nimport { Users } from './data/users';\nimport { TypingIndicator } from './services/typingindicator';\nimport { UserDescriptor } from './userdescriptor';\nimport { UserChannels } from './data/userchannels';\nimport { ChannelDescriptor } from './channeldescriptor';\nimport { Paginator } from './interfaces/paginator';\nimport { PushNotification } from './pushnotification';\nimport { parseToNumber, deepClone } from './util';\nimport { Member } from './member';\nimport { Message } from './message';\nimport { validateTypesAsync, validateTypes, literal, nonEmptyString, pureObject, objectSchema } from 'twilio-sdk-type-validator';\nimport { CommandExecutor } from './commandexecutor';\nimport { ConfigurationResponse } from './interfaces/commands/configuration';\nimport { version } from '../package.json';\n\nconst log = Logger.scope('Client');\nconst SDK_VERSION = version;\n\nclass ClientServices {\n  commandExecutor: CommandExecutor;\n  twilsockClient: TwilsockClient;\n  users: Users;\n  notificationClient: NotificationClient;\n  publicChannels: PublicChannels;\n  userChannels: UserChannels;\n  network: Network;\n  typingIndicator: TypingIndicator;\n  syncClient: SyncClient;\n  mcsClient: McsClient;\n  transport: Transport;\n}\n\nnamespace Client {\n  export type ConnectionState = NotificationConnectionState;\n\n  export type NotificationsChannelType = ChannelType;\n\n  export type LogLevel = 'trace' | 'debug' | 'info' | 'warn' | 'error' | 'silent' | null;\n\n  export interface Options {\n    region?: string;\n    logLevel?: Client.LogLevel;\n    productId?: string;\n    twilsockClient?: TwilsockClient;\n    transport?: Transport;\n    notificationsClient?: NotificationClient;\n    syncClient?: SyncClient;\n    typingIndicatorTimeoutOverride?: number;\n    consumptionReportIntervalOverride?: string;\n    httpCacheIntervalOverride?: string;\n    userInfosToSubscribeOverride?: number;\n    retryWhenThrottledOverride?: boolean;\n    backoffConfigOverride?: any;\n    Chat?: any;\n    IPMessaging?: any;\n    Sync?: any;\n    Notification?: any;\n    Twilsock?: any;\n    clientMetadata?: any;\n    disableDeepClone?: boolean;\n  }\n\n  export interface CreateChannelOptions {\n    attributes?: any;\n    friendlyName?: string;\n    isPrivate?: boolean;\n    uniqueName?: string;\n  }\n\n  export type ChannelSortingCriteria = 'lastMessage' | 'friendlyName' | 'uniqueName';\n\n  export type ChannelSortingOrder = 'ascending' | 'descending';\n\n  export interface ChannelSortingOptions {\n    criteria?: ChannelSortingCriteria;\n    order?: ChannelSortingOrder;\n  }\n}\n\n/**\n * A Client is a starting point to access Twilio Programmable Chat functionality.\n *\n * @property {Client#ConnectionState} connectionState - Client connection state\n * @property {Boolean} reachabilityEnabled - Client reachability state\n * @property {User} user - Information for logged in user\n * @property {String} version - Current version of Chat client\n *\n * @fires Client#connectionError\n * @fires Client#connectionStateChanged\n * @fires Client#channelAdded\n * @fires Client#channelInvited\n * @fires Client#channelJoined\n * @fires Client#channelLeft\n * @fires Client#channelRemoved\n * @fires Client#channelUpdated\n * @fires Client#memberJoined\n * @fires Client#memberLeft\n * @fires Client#memberUpdated\n * @fires Client#messageAdded\n * @fires Client#messageRemoved\n * @fires Client#messageUpdated\n * @fires Client#pushNotification\n * @fires Client#tokenAboutToExpire\n * @fires Client#tokenExpired\n * @fires Client#typingEnded\n * @fires Client#typingStarted\n * @fires Client#userSubscribed\n * @fires Client#userUnsubscribed\n * @fires Client#userUpdated\n */\nclass Client extends EventEmitter {\n  public connectionState: Client.ConnectionState = 'connecting';\n  private channelsPromise: Promise<any> = null;\n  private configurationPromise: Promise<ConfigurationResponse> | null = null;\n  private fpaToken: string;\n  private configuration: Configuration;\n  private channels: any;\n  private services: ClientServices;\n  public static readonly version: string = SDK_VERSION;\n  public readonly version: string = SDK_VERSION;\n  private static readonly supportedPushChannels: Client.NotificationsChannelType[] = ['fcm', 'apn', 'gcm'];\n  private static readonly supportedPushDataFields = {\n    'channel_sid': 'channelSid',\n    'message_sid': 'messageSid',\n    'message_index': 'messageIndex'\n  };\n\n  private constructor(\n    token: string,\n    private readonly options: Client.Options = {}\n  ) {\n    super();\n\n    if (!this.options.disableDeepClone) {\n      let options = {\n        ...this.options,\n        transport: undefined,\n        twilsockClient: undefined\n      };\n\n      options = deepClone(options);\n      options.transport = this.options.transport;\n      options.twilsockClient = this.options.twilsockClient;\n\n      this.options = options;\n    }\n\n    this.options.logLevel = this.options.logLevel || 'silent';\n    log.setLevel(this.options.logLevel);\n\n    const productId = this.options.productId = 'ip_messaging';\n\n    // Filling ClientMetadata\n    this.options.clientMetadata = this.options.clientMetadata || {};\n\n    if (!this.options.clientMetadata.hasOwnProperty('type')) {\n      this.options.clientMetadata.type = 'chat';\n    }\n\n    if (!this.options.clientMetadata.hasOwnProperty('sdk')) {\n      this.options.clientMetadata.sdk = 'JS';\n      this.options.clientMetadata.sdkv = SDK_VERSION;\n    }\n\n    // Enable session local storage for Sync\n    this.options.Sync = this.options.Sync || {};\n\n    if (!this.options.Sync?.enableSessionStorage) {\n      this.options.Sync.enableSessionStorage = true;\n    }\n\n    if (this.options.region) {\n      this.options.Sync.region = this.options.region;\n    }\n\n    if (!token) {\n      throw new Error('A valid Twilio token should be provided');\n    }\n\n    this.services = new ClientServices();\n\n    this.options.twilsockClient = this.options.twilsockClient || new TwilsockClient(token, productId, this.options);\n    this.options.transport = this.options.transport || this.options.twilsockClient;\n    this.options.notificationsClient = this.options.notificationsClient || new NotificationClient(token, this.options);\n    this.options.syncClient = this.options.syncClient || new SyncClient(token, this.options);\n\n    this.services.syncClient = this.options.syncClient;\n    this.services.transport = this.options.transport;\n    this.services.twilsockClient = this.options.twilsockClient;\n    this.services.notificationClient = this.options.notificationsClient;\n\n    const configurationOptions = options.Chat || options.IPMessaging || options || {};\n    const region = configurationOptions.region || options.region;\n    const baseUrl = configurationOptions.apiUri\n      || configurationOptions.typingUri\n      || `https://aim.${region || 'us1'}.twilio.com`;\n\n    this.services.commandExecutor = new CommandExecutor(baseUrl, { transport: this.options.transport }, productId);\n    this.configurationPromise = this.services.commandExecutor.fetchResource<void, ConfigurationResponse>(\n      'Client/v1/Configuration'\n    );\n\n    this.configurationPromise\n      .then((configurationResponse) => {\n        this.configuration = new Configuration(this.options, configurationResponse, log);\n\n        this.services.typingIndicator = new TypingIndicator(this.getChannelBySid.bind(this), this.configuration, this.services);\n        this.services.network = new Network(this.configuration, this.services);\n        this.services.users = new Users(this.configuration, this.services);\n\n        this.services.users.on('userSubscribed', this.emit.bind(this, 'userSubscribed'));\n        this.services.users.on('userUpdated', (args: User.UpdatedEventArgs) => this.emit('userUpdated', args));\n        this.services.users.on('userUnsubscribed', this.emit.bind(this, 'userUnsubscribed'));\n\n        this.services.twilsockClient.on('tokenAboutToExpire', ttl => this.emit('tokenAboutToExpire', ttl));\n        this.services.twilsockClient.on('tokenExpired', () => this.emit('tokenExpired'));\n        this.services.twilsockClient.on('connectionError', (error) => this.emit('connectionError', error));\n\n        this.channels = new ChannelsEntity(this.configuration, this.services);\n\n        this.channels.on('channelAdded', this.emit.bind(this, 'channelAdded'));\n        this.channels.on('channelInvited', this.emit.bind(this, 'channelInvited'));\n        this.channels.on('channelRemoved', this.emit.bind(this, 'channelRemoved'));\n        this.channels.on('channelJoined', this.emit.bind(this, 'channelJoined'));\n        this.channels.on('channelLeft', this.emit.bind(this, 'channelLeft'));\n        this.channels.on('channelUpdated',\n          (args: Channel.UpdatedEventArgs) => this.emit('channelUpdated', args));\n\n        this.channels.on('memberJoined', this.emit.bind(this, 'memberJoined'));\n        this.channels.on('memberLeft', this.emit.bind(this, 'memberLeft'));\n        this.channels.on('memberUpdated',\n          (args: Member.UpdatedEventArgs) => this.emit('memberUpdated', args));\n\n        this.channels.on('messageAdded', this.emit.bind(this, 'messageAdded'));\n        this.channels.on('messageUpdated',\n          (args: Message.UpdatedEventArgs) => this.emit('messageUpdated', args));\n        this.channels.on('messageRemoved', this.emit.bind(this, 'messageRemoved'));\n\n        this.channels.on('typingStarted', this.emit.bind(this, 'typingStarted'));\n        this.channels.on('typingEnded', this.emit.bind(this, 'typingEnded'));\n\n        return this.services.users.myself._ensureFetched();\n      });\n\n    this.channelsPromise = this.configurationPromise\n      .then(() => this.channels.fetchChannels())\n      .then(() => this.channels);\n\n    this.services.notificationClient.on('connectionStateChanged', (state: Client.ConnectionState) => {\n      let changedConnectionState = null;\n      switch (state) {\n        case 'connected':\n          changedConnectionState = 'connected';\n          break;\n        case 'denied':\n          changedConnectionState = 'denied';\n          break;\n        case 'disconnecting':\n          changedConnectionState = 'disconnecting';\n          break;\n        case 'disconnected':\n          changedConnectionState = 'disconnected';\n          break;\n        default:\n          changedConnectionState = 'connecting';\n      }\n      if (changedConnectionState !== this.connectionState) {\n        this.connectionState = changedConnectionState;\n        this.emit('connectionStateChanged', this.connectionState);\n      }\n    });\n\n    this.fpaToken = token;\n  }\n\n  /**\n   * These options can be passed to {@link Client#getLocalChannels}.\n   * @typedef {Object} Client#ChannelSortingOptions\n   * @property {('lastMessage'|'friendlyName'|'uniqueName')} [criteria] - Sorting criteria for Channels array\n   * @property {('ascending'|'descending')} [order] - Sorting order. If not present, then default is <code>ascending</code>\n   */\n\n  /**\n   * These options can be passed to Client constructor.\n   * @typedef {Object} Client#ClientOptions\n   * @property {String} [logLevel='error'] - The level of logging to enable. Valid options\n   *   (from strictest to broadest): ['silent', 'error', 'warn', 'info', 'debug', 'trace']\n   */\n\n  /**\n   * These options can be passed to {@link Client#createChannel}.\n   * @typedef {Object} Client#CreateChannelOptions\n   * @property {any} [attributes] - Any custom attributes to attach to the Channel\n   * @property {String} [friendlyName] - The non-unique display name of the Channel\n   * @property {Boolean} [isPrivate] - Whether or not this Channel should be visible to uninvited Clients\n   * @property {String} [uniqueName] - The unique identity name of the Channel\n   */\n\n  /**\n   * Connection state of Client.\n   * @typedef {('connecting'|'connected'|'disconnecting'|'disconnected'|'denied')} Client#ConnectionState\n   */\n\n  /**\n   * Notifications channel type.\n   * @typedef {('gcm'|'fcm'|'apn')} Client#NotificationsChannelType\n   */\n\n  /**\n   * Factory method to create Chat client instance.\n   *\n   * @param {String} token - Access token\n   * @param {Client#ClientOptions} [options] - Options to customize the Client\n   * @returns {Promise<Client>}\n   */\n  @validateTypesAsync('string', ['undefined', pureObject])\n  static async create(token: string, options?: Client.Options): Promise<Client> {\n    let client = new Client(token, options);\n    await client.initialize();\n    return client;\n  }\n\n  public get user(): User { return this.services.users.myself; }\n\n  public get reachabilityEnabled(): boolean { return this.configuration.reachabilityEnabled; }\n\n  public get token(): string { return this.fpaToken; }\n\n  private subscribeToPushNotifications(channelType: Client.NotificationsChannelType) {\n    let subscriptions: Promise<any>[] = [];\n    [NotificationTypes.NEW_MESSAGE,\n      NotificationTypes.ADDED_TO_CHANNEL,\n      NotificationTypes.INVITED_TO_CHANNEL,\n      NotificationTypes.REMOVED_FROM_CHANNEL,\n      NotificationTypes.TYPING_INDICATOR,\n      NotificationTypes.CONSUMPTION_UPDATE]\n      .forEach(messageType => {\n        subscriptions.push(this.services.notificationClient.subscribe(messageType, channelType));\n      });\n    return Promise.all(subscriptions);\n  }\n\n  private unsubscribeFromPushNotifications(channelType: Client.NotificationsChannelType) {\n    let subscriptions: Promise<any>[] = [];\n    [NotificationTypes.NEW_MESSAGE,\n      NotificationTypes.ADDED_TO_CHANNEL,\n      NotificationTypes.INVITED_TO_CHANNEL,\n      NotificationTypes.REMOVED_FROM_CHANNEL,\n      NotificationTypes.TYPING_INDICATOR,\n      NotificationTypes.CONSUMPTION_UPDATE]\n      .forEach(messageType => {\n        subscriptions.push(this.services.notificationClient.unsubscribe(messageType, channelType));\n      });\n    return Promise.all(subscriptions);\n  }\n\n  private async initialize() {\n    await this.configurationPromise;\n\n    Client.supportedPushChannels.forEach(channelType => this.subscribeToPushNotifications(channelType));\n\n    this.services.publicChannels = new PublicChannels(this, this.services, this.configuration.links.conversations);\n    this.services.userChannels = new UserChannels(this, this.services, this.configuration.links.myConversations);\n\n    const options = Object.assign(this.options);\n    options.transport = null;\n\n    this.services.mcsClient = new McsClient(this.fpaToken, this.configuration.links.mediaService, options);\n\n    await this.services.typingIndicator.initialize();\n  }\n\n  /**\n   * Gracefully shutting down library instance.\n   * @public\n   * @returns {Promise<void>}\n   */\n  async shutdown(): Promise<void> {\n    await this.services.twilsockClient.disconnect();\n  }\n\n  /**\n   * Update the token used by the Client and re-register with Programmable Chat services.\n   * @param {String} token - Access token\n   * @public\n   * @returns {Promise<Client>}\n   */\n  @validateTypesAsync(nonEmptyString)\n  async updateToken(token: string): Promise<Client> {\n    log.info('updateToken');\n\n    if (this.fpaToken === token) {\n      return this;\n    }\n\n    await this.services.twilsockClient.updateToken(token)\n      .then(() => this.fpaToken = token)\n      .then(() => this.services.mcsClient.updateToken(token))\n      .then(() => this.configurationPromise);\n\n    return this;\n  }\n\n  /**\n   * Get a known Channel by its SID.\n   * @param {String} channelSid - Channel sid\n   * @returns {Promise<Channel>}\n   */\n  @validateTypesAsync(nonEmptyString)\n  async getChannelBySid(channelSid: string): Promise<Channel> {\n    return this.channels.myChannelsRead.promise.then(() =>\n      this.channels.getChannel(channelSid)\n        .then(channel => channel || this.services.publicChannels.getChannelBySid(channelSid).then(x => this.channels.pushChannel(x))));\n  }\n\n  /**\n   * Get a known Channel by its unique identifier name.\n   * @param {String} uniqueName - The unique identifier name of the Channel to get\n   * @returns {Promise<Channel>}\n   */\n  @validateTypesAsync(nonEmptyString)\n  async getChannelByUniqueName(uniqueName: string): Promise<Channel> {\n    return this.channels.myChannelsRead.promise.then(() =>\n      this.services.publicChannels.getChannelByUniqueName(uniqueName).then(x => this.channels.pushChannel(x)));\n  }\n\n  /**\n   * Get the current list of all subscribed Channels.\n   * @returns {Promise<Paginator<Channel>>}\n   */\n  getSubscribedChannels(args?): Promise<Paginator<Channel>> {\n    return this.channelsPromise.then(channels => channels.getChannels(args));\n  }\n\n  /**\n   * Get array of Channels locally known to Client in provided sorting order.\n   * Locally known channels are the ones created and/or joined during client runtime and currently logged in User subscribed Channels.\n   * To ensure full list of subscribed Channels fetched - call the {@link Client#getSubscribedChannels} method\n   * and fetch all pages with help of {@link Paginator#nextPage} method.\n   * @param {Client#ChannelSortingOptions} [sortingOptions] - Options for the Channel sorting\n   * @returns {Promise<Array<Channel>>}\n   */\n  @validateTypesAsync([\n    'undefined',\n    objectSchema('sorting options', {\n      criteria: [literal('lastMessage', 'friendlyName', 'uniqueName'), 'undefined'],\n      order: [literal('ascending', 'descending'), 'undefined']\n    })\n  ])\n  getLocalChannels(sortingOptions?: Client.ChannelSortingOptions): Promise<Array<Channel>> {\n    return this.channelsPromise.then(channels => {\n      let result: Channel[] = [];\n      channels.channels.forEach(value => {\n        result.push(value);\n      });\n\n      const sortingOrder = sortingOptions?.order || 'ascending';\n\n      if (sortingOptions && sortingOptions.criteria) {\n        if (sortingOptions.criteria === 'lastMessage') {\n          result.sort((a: Channel, b: Channel) =>\n            Client.compareChannelsByLastMessage(a, b, sortingOrder));\n        } else if (sortingOptions.criteria === 'uniqueName') {\n          result.sort((a: Channel, b: Channel) =>\n            Client.compareChannelsByStringProperty(a.uniqueName, b.uniqueName, sortingOrder));\n        } else if (sortingOptions.criteria === 'friendlyName') {\n          result.sort((a: Channel, b: Channel) =>\n            Client.compareChannelsByStringProperty(a.friendlyName, b.friendlyName, sortingOrder));\n        }\n      }\n\n      return result;\n    });\n  }\n\n  private static compareChannelsByLastMessage(a: Channel, b: Channel, order: Client.ChannelSortingOrder) {\n    if (a.lastMessage && b.lastMessage) {\n      if (a.lastMessage.dateCreated && b.lastMessage.dateCreated) {\n        if (a.lastMessage.dateCreated.getTime() < b.lastMessage.dateCreated.getTime()) {\n          return (order === 'ascending') ? -1 : 1;\n        } else {\n          return (order === 'ascending') ? 1 : -1;\n        }\n      } else {\n        if (a.lastMessage.dateCreated) {\n          return -1;\n        } else if (b.lastMessage.dateCreated) {\n          return 1;\n        }\n      }\n    }\n\n    if (a.lastMessage) {\n      return -1;\n    } else if (b.lastMessage) {\n      return 1;\n    }\n\n    return 0;\n  }\n\n  private static compareChannelsByStringProperty(str1: string, str2: string, order: Client.ChannelSortingOrder) {\n    if (str1 && str2) {\n      return (order === 'ascending') ? str1.localeCompare(str2) : -1 * str1.localeCompare(str2);\n    } else if (str1) {\n      return -1;\n    } else if (str2) {\n      return 1;\n    }\n\n    return 0;\n  }\n\n  /**\n   * Get the public channels directory content.\n   * @returns {Promise<Paginator<ChannelDescriptor>>}\n   */\n  getPublicChannelDescriptors(): Promise<Paginator<ChannelDescriptor>> {\n    return this.services.publicChannels.getChannels();\n  }\n\n  /**\n   * Get the User's (created by, joined or invited to) channels directory content.\n   * @returns {Promise<Paginator<ChannelDescriptor>>}\n   */\n  getUserChannelDescriptors(): Promise<Paginator<ChannelDescriptor>> {\n    return this.services.userChannels.getChannels();\n  }\n\n  /**\n   * Create a Channel on the server and subscribe to its events.\n   * Default options are public Channel type with empty uniqueName and friendlyName.\n   * @param {Client#CreateChannelOptions} [options] - Options for the Channel\n   * @returns {Promise<Channel>}\n   */\n  @validateTypesAsync([\n    'undefined',\n    objectSchema('channel options', {\n      friendlyName: ['string', 'undefined'],\n      isPrivate: ['boolean', 'undefined'],\n      uniqueName: ['string', 'undefined']\n    })\n  ])\n  createChannel(options?: Client.CreateChannelOptions): Promise<Channel> {\n    options = options || {};\n    return this.channelsPromise.then((channelsEntity) => channelsEntity.addChannel(options));\n  }\n\n  /**\n   * Registers for push notifications.\n   * @param {Client#NotificationsChannelType} channelType - 'gcm', 'apn' and 'fcm' are supported\n   * @param {string} registrationId - Push notification id provided by platform\n   * @returns {Promise<void>}\n   */\n  @validateTypesAsync(literal('gcm', 'fcm', 'apn'), 'string')\n  async setPushRegistrationId(channelType: Client.NotificationsChannelType, registrationId: string): Promise<void> {\n    await this.subscribeToPushNotifications(channelType)\n      .then(() => {\n        return this.services.notificationClient.setPushRegistrationId(registrationId, channelType);\n      });\n  }\n\n  /**\n   * Unregisters from push notifications.\n   * @param {Client#NotificationsChannelType} channelType - 'gcm', 'apn' and 'fcm' are supported\n   * @returns {Promise<void>}\n   */\n  @validateTypesAsync(literal('gcm', 'fcm', 'apn'))\n  async unsetPushRegistrationId(channelType: Client.NotificationsChannelType): Promise<void> {\n    if (Client.supportedPushChannels.indexOf(channelType) === -1) {\n      throw new Error('Invalid or unsupported channelType: ' + channelType);\n    }\n    await this.unsubscribeFromPushNotifications(channelType);\n  }\n\n  private static parsePushNotificationChatData(data: Object): Object {\n    let result: Object = {};\n    for (let key in Client.supportedPushDataFields) {\n      if (typeof data[key] !== 'undefined' && data[key] !== null) {\n        if (key === 'message_index') {\n          if (parseToNumber(data[key]) !== null) {\n            result[Client.supportedPushDataFields[key]] = Number(data[key]);\n          }\n        } else {\n          result[Client.supportedPushDataFields[key]] = data[key];\n        }\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Static method for push notification payload parsing. Returns parsed push as {@link PushNotification} object\n   * @param {Object} notificationPayload - Push notification payload\n   * @returns {PushNotification|Error}\n   */\n  @validateTypes(pureObject)\n  static parsePushNotification(notificationPayload): PushNotification {\n    log.debug('parsePushNotification, notificationPayload=', notificationPayload);\n\n    // APNS specifics\n    if (typeof notificationPayload.aps !== 'undefined') {\n      if (!notificationPayload.twi_message_type) {\n        throw new Error('Provided push notification payload does not contain Programmable Chat push notification type');\n      }\n\n      let data = Client.parsePushNotificationChatData(notificationPayload);\n\n      let apsPayload = notificationPayload.aps;\n      let body: string = null;\n      let title: string = null;\n      if (typeof apsPayload.alert === 'string') {\n        body = apsPayload.alert || null;\n      } else {\n        body = apsPayload.alert.body || null;\n        title = apsPayload.alert.title || null;\n      }\n\n      return new PushNotification({\n        title: title,\n        body: body,\n        sound: apsPayload.sound || null,\n        badge: apsPayload.badge || null,\n        action: apsPayload.category || null,\n        type: notificationPayload.twi_message_type,\n        data: data\n      });\n    }\n\n    // FCM/GCM specifics\n    if (typeof notificationPayload.data !== 'undefined') {\n      let dataPayload = notificationPayload.data;\n      if (!dataPayload.twi_message_type) {\n        throw new Error('Provided push notification payload does not contain Programmable Chat push notification type');\n      }\n\n      let data = Client.parsePushNotificationChatData(notificationPayload.data);\n      return new PushNotification({\n        title: dataPayload.twi_title || null,\n        body: dataPayload.twi_body || null,\n        sound: dataPayload.twi_sound || null,\n        badge: null,\n        action: dataPayload.twi_action || null,\n        type: dataPayload.twi_message_type,\n        data: data\n      });\n    }\n\n    throw new Error('Provided push notification payload is not Programmable Chat notification');\n  }\n\n  public parsePushNotification = Client.parsePushNotification;\n\n  /**\n   * Handle push notification payload parsing and emits event {@link Client#event:pushNotification} on this {@link Client} instance.\n   * @param {Object} notificationPayload - Push notification payload\n   * @returns {Promise<void>}\n   */\n  @validateTypesAsync(pureObject)\n  async handlePushNotification(notificationPayload): Promise<void> {\n    log.debug('handlePushNotification, notificationPayload=', notificationPayload);\n    this.emit('pushNotification', Client.parsePushNotification(notificationPayload));\n  }\n\n  /**\n   * Gets user for given identity, if it's in subscribed list - then return the user object from it,\n   * if not - then subscribes and adds user to the subscribed list.\n   * @param {String} identity - Identity of User\n   * @returns {Promise<User>} Fully initialized user\n   */\n  @validateTypesAsync(nonEmptyString)\n  public getUser(identity: string): Promise<User> {\n    return this.services.users.getUser(identity);\n  }\n\n  /**\n   * Gets user descriptor for given identity.\n   * @param {String} identity - Identity of User\n   * @returns {Promise<UserDescriptor>} User descriptor\n   */\n  @validateTypesAsync(nonEmptyString)\n  public async getUserDescriptor(identity: string): Promise<UserDescriptor> {\n    return this.services.users.getUserDescriptor(identity);\n  }\n\n  /**\n   * @returns {Promise<Array<User>>} List of subscribed User objects\n   */\n  public async getSubscribedUsers(): Promise<Array<User>> {\n    return this.services.users.getSubscribedUsers();\n  }\n}\n\nexport { Client };\n\n/**\n * Fired when a Channel becomes visible to the Client.\n * Fired for created and not joined private channels and for all type of channels Client has joined or invited to.\n * @event Client#channelAdded\n * @type {Channel}\n */\n/**\n * Fired when the Client is invited to a Channel.\n * @event Client#channelInvited\n * @type {Channel}\n */\n/**\n * Fired when the Client joins a Channel.\n * @event Client#channelJoined\n * @type {Channel}\n */\n/**\n * Fired when the Client leaves a Channel.\n * @event Client#channelLeft\n * @type {Channel}\n */\n/**\n * Fired when a Channel is no longer visible to the Client.\n * @event Client#channelRemoved\n * @type {Channel}\n */\n/**\n * Fired when a Channel's attributes or metadata have been updated.\n * During Channel's {@link Client.create| creation and initialization} this event might be fired multiple times\n * for same joined or created Channel as new data is arriving from different sources.\n * @event Client#channelUpdated\n * @type {Object}\n * @property {Channel} channel - Updated Channel\n * @property {Channel#UpdateReason[]} updateReasons - Array of Channel's updated event reasons\n */\n/**\n * Fired when Client's connection state has been changed.\n * @event Client#connectionStateChanged\n * @type {Client#ConnectionState}\n */\n/**\n * Fired when a Member has joined the Channel.\n * @event Client#memberJoined\n * @type {Member}\n */\n/**\n * Fired when a Member has left the Channel.\n * @event Client#memberLeft\n * @type {Member}\n */\n/**\n * Fired when a Member's fields has been updated.\n * @event Client#memberUpdated\n * @type {Object}\n * @property {Member} member - Updated Member\n * @property {Member#UpdateReason[]} updateReasons - Array of Member's updated event reasons\n */\n/**\n * Fired when a new Message has been added to the Channel on the server.\n * @event Client#messageAdded\n * @type {Message}\n */\n/**\n * Fired when Message is removed from Channel's message list.\n * @event Client#messageRemoved\n * @type {Message}\n */\n/**\n * Fired when an existing Message's fields are updated with new values.\n * @event Client#messageUpdated\n * @type {Object}\n * @property {Message} message - Updated Message\n * @property {Message#UpdateReason[]} updateReasons - Array of Message's updated event reasons\n */\n/**\n * Fired when token is about to expire and needs to be updated.\n * @event Client#tokenAboutToExpire\n * @type {void}\n */\n/**\n * Fired when token is expired.\n * @event Client#tokenExpired\n * @type {void}\n */\n/**\n * Fired when a Member has stopped typing.\n * @event Client#typingEnded\n * @type {Member}\n */\n/**\n * Fired when a Member has started typing.\n * @event Client#typingStarted\n * @type {Member}\n */\n/**\n * Fired when client received (and parsed) push notification via one of push channels (apn, gcm, fcm).\n * @event Client#pushNotification\n * @type {PushNotification}\n */\n/**\n * Fired when the Client is subscribed to a User.\n * @event Client#userSubscribed\n * @type {User}\n */\n/**\n * Fired when the Client is unsubscribed from a User.\n * @event Client#userUnsubscribed\n * @type {User}\n */\n/**\n * Fired when the User's properties or reachability status have been updated.\n * @event Client#userUpdated\n * @type {Object}\n * @property {User} user - Updated User\n * @property {User#UpdateReason[]} updateReasons - Array of User's updated event reasons\n */\n/**\n * Fired when connection is interrupted by unexpected reason\n * @event Client#connectionError\n * @type {Object}\n * @property {Boolean} terminal - twilsock will stop connection attempts\n * @property {String} message - root cause\n * @property {Number} [httpStatusCode] - http status code if available\n * @property {Number} [errorCode] - Twilio public error code if available\n */\n"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__metadata","metadataKey","metadataValue","metadata","log","loglevelLog","toSeconds","parseDuration","JsonDiff","parseTime","Retrier","EventEmitter","validateTypesAsync","literal","nonEmptyString","nonNegativeInteger","custom","objectSchema","AsyncRetrier","uuidv4","TwilsockClient","NotificationClient","SyncClient","ChannelsEntity","McsClient","pureObject","validateTypes"],"mappings":"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"}