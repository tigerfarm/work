"use strict";

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require("babel-runtime/core-js/promise");

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
exports.Media = void 0;
/**
 * @classdesc A Media represents a metadata information for the media upload
 * @property {String} sid - The server-assigned unique identifier for Media
 * @property {String} serviceSid - Service instance id which Media belongs/uploaded to
 * @property {Date} dateCreated - When the Media was created
 * @property {Date} dateUpdated - When the Media was updated
 * @property {Number} size - Size of media, bytes
 * @property {String} contentType - content type of media
 * @property {String} fileName - file name, if present, null otherwise
 */

var Media = function () {
    function Media(config, network, data) {
        (0, _classCallCheck3.default)(this, Media);

        this.config = config;
        this.network = network;
        this._update(data);
    }

    (0, _createClass3.default)(Media, [{
        key: "getContentUrl",

        /**
         * Returns direct content URL to uploaded binary
         * @public
         * @returns {Promise<string>}
         */
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
                var response;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return this.network.get(this.config.baseUrl + "/" + this.sid);

                            case 2:
                                response = _context.sent;

                                this._update(response.body);
                                return _context.abrupt("return", _promise2.default.resolve(this.state.contentDirectUrl));

                            case 5:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function getContentUrl() {
                return _ref.apply(this, arguments);
            }

            return getContentUrl;
        }()
    }, {
        key: "_update",
        value: function _update(data) {
            this.state = {
                sid: data.sid,
                serviceSid: data.service_sid,
                channelSid: data.channel_sid,
                messageSid: data.message_sid,
                dateCreated: data.date_created ? new Date(data.date_created) : null,
                dateUpdated: data.date_updated ? new Date(data.date_updated) : null,
                size: data.size,
                contentType: data.content_type,
                url: data.url,
                contentUrl: data.links.content,
                contentDirectUrl: data.links.content_direct_temporary,
                filename: data.filename ? data.filename : null
            };
        }
    }, {
        key: "sid",
        get: function get() {
            return this.state.sid;
        }
    }, {
        key: "serviceSid",
        get: function get() {
            return this.state.serviceSid;
        }
    }, {
        key: "dateCreated",
        get: function get() {
            return this.state.dateCreated;
        }
    }, {
        key: "dateUpdated",
        get: function get() {
            return this.state.dateUpdated;
        }
    }, {
        key: "contentType",
        get: function get() {
            return this.state.contentType;
        }
    }, {
        key: "size",
        get: function get() {
            return this.state.size;
        }
    }, {
        key: "fileName",
        get: function get() {
            return this.state.filename;
        }
    }]);
    return Media;
}();

exports.Media = Media;