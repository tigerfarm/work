"use strict";

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _promise = require("babel-runtime/core-js/promise");

var _promise2 = _interopRequireDefault(_promise);

var _assign = require("babel-runtime/core-js/object/assign");

var _assign2 = _interopRequireDefault(_assign);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
exports.Network = void 0;
var operation_retrier_1 = require("operation-retrier");
var logger_1 = require("../logger");
var configuration_1 = require("../configuration");
var log = logger_1.Logger.scope('Network');

var Network = function () {
    function Network(config, transport) {
        (0, _classCallCheck3.default)(this, Network);

        this.config = config;
        this.transport = transport;
    }

    (0, _createClass3.default)(Network, [{
        key: "backoffConfig",
        value: function backoffConfig() {
            return (0, _assign2.default)(configuration_1.Configuration.backoffConfigDefault, this.config.backoffConfigOverride);
        }
    }, {
        key: "retryWhenThrottled",
        value: function retryWhenThrottled() {
            if (typeof this.config.retryWhenThrottledOverride !== 'undefined') {
                return this.config.retryWhenThrottledOverride;
            }
            if (typeof configuration_1.Configuration.retryWhenThrottledDefault !== 'undefined') {
                return configuration_1.Configuration.retryWhenThrottledDefault;
            }
            return false;
        }
    }, {
        key: "executeWithRetry",
        value: function executeWithRetry(request) {
            var _this = this;

            var retryWhenThrottled = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            return new _promise2.default(function (resolve, reject) {
                var codesToRetryOn = [502, 503, 504];
                if (retryWhenThrottled) {
                    codesToRetryOn.push(429);
                }
                var retrier = new operation_retrier_1.Retrier(_this.backoffConfig());
                retrier.on('attempt', function () {
                    request().then(function (result) {
                        return retrier.succeeded(result);
                    }).catch(function (err) {
                        if (codesToRetryOn.indexOf(err.status) > -1) {
                            retrier.failed(err);
                        } else if (err.message === 'Twilsock disconnected') {
                            // Ugly hack. We must make a proper exceptions for twilsock
                            retrier.failed(err);
                        } else {
                            // Fatal error
                            retrier.removeAllListeners();
                            retrier.cancel();
                            reject(err);
                        }
                    });
                });
                retrier.on('succeeded', function (result) {
                    resolve(result);
                });
                retrier.on('cancelled', function (err) {
                    return reject(err);
                });
                retrier.on('failed', function (err) {
                    return reject(err);
                });
                retrier.start();
            });
        }
    }, {
        key: "get",
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(url) {
                var _this2 = this;

                var headers, response;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                headers = { 'X-Twilio-Token': this.config.token };

                                log.trace('sending GET request to ', url, ' headers ', headers);
                                _context.next = 4;
                                return this.executeWithRetry(function () {
                                    return _this2.transport.get(url, headers);
                                }, this.retryWhenThrottled());

                            case 4:
                                response = _context.sent;

                                log.trace('response', response);
                                return _context.abrupt("return", response);

                            case 7:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function get(_x2) {
                return _ref.apply(this, arguments);
            }

            return get;
        }()
    }, {
        key: "post",
        value: function () {
            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(url, media, contentType) {
                var headers, response;
                return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                headers = {
                                    'X-Twilio-Token': this.config.token
                                };

                                if ((typeof FormData === 'undefined' || !(media instanceof FormData)) && contentType) {
                                    (0, _assign2.default)(headers, {
                                        'Content-Type': contentType
                                    });
                                }
                                response = void 0;

                                log.trace('sending POST request to ', url, ' headers ', headers);
                                _context2.prev = 4;
                                _context2.next = 7;
                                return this.transport.post(url, headers, media);

                            case 7:
                                response = _context2.sent;
                                _context2.next = 18;
                                break;

                            case 10:
                                _context2.prev = 10;
                                _context2.t0 = _context2["catch"](4);

                                if (!(_context2.t0 instanceof TypeError)) {
                                    _context2.next = 17;
                                    break;
                                }

                                log.trace('got error in post response', _context2.t0);
                                throw new TypeError('Posting FormData supported only with browser engine\'s FormData');

                            case 17:
                                throw _context2.t0;

                            case 18:
                                log.trace('response', response);
                                return _context2.abrupt("return", response);

                            case 20:
                            case "end":
                                return _context2.stop();
                        }
                    }
                }, _callee2, this, [[4, 10]]);
            }));

            function post(_x3, _x4, _x5) {
                return _ref2.apply(this, arguments);
            }

            return post;
        }()
    }]);
    return Network;
}();

exports.Network = Network;