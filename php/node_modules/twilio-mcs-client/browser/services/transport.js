"use strict";

var _stringify = require("babel-runtime/core-js/json/stringify");

var _stringify2 = _interopRequireDefault(_stringify);

var _promise = require("babel-runtime/core-js/promise");

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
exports.Transport = void 0;
var transporterror_1 = require("./transporterror");
var XHR = global['XMLHttpRequest'] || require('xmlhttprequest').XMLHttpRequest;
function parseResponseHeaders(headerString) {
    if (!headerString) {
        return {};
    }
    return headerString.split("\r\n").map(function (el) {
        return el.split(": ");
    }).filter(function (el) {
        return el.length === 2 && el[1].length > 0;
    }).reduce(function (prev, curr) {
        prev[curr[0]] = curr[1];
        return prev;
    }, {});
}
function extractBody(xhr) {
    var contentType = xhr.getResponseHeader('Content-Type');
    if (!contentType || contentType.indexOf('application/json') !== 0 || xhr.responseText.length === 0) {
        return xhr.responseText;
    }
    try {
        return JSON.parse(xhr.responseText);
    } catch (e) {
        return xhr.responseText;
    }
}
function adaptHttpResponse(response) {
    try {
        response.body = JSON.parse(response.body);
    } catch (e) {} // eslint-disable-line no-empty
    return response;
}
/**
 * Provides generic network interface
 */

var Transport = function () {
    function Transport() {
        (0, _classCallCheck3.default)(this, Transport);
    }

    (0, _createClass3.default)(Transport, [{
        key: "get",

        /**
         * Make a GET request by given URL
         */
        value: function get(url, headers) {
            return Transport.request('GET', url, headers);
        }
        /**
         * Make a POST request by given URL
         */

    }, {
        key: "post",
        value: function post(url, headers, body) {
            return Transport.request('POST', url, headers, body);
        }
    }], [{
        key: "request",
        value: function request(method, url, headers, body) {
            return new _promise2.default(function (resolve, reject) {
                var xhr = new XHR();
                xhr.open(method, url, true);
                xhr.onreadystatechange = function onreadystatechange() {
                    if (xhr.readyState !== 4) {
                        return;
                    }
                    var headers = parseResponseHeaders(xhr.getAllResponseHeaders());
                    var body = extractBody(xhr);
                    if (200 <= xhr.status && xhr.status < 300) {
                        resolve({ status: xhr.status, headers: headers, body: body });
                    } else {
                        var status = xhr.statusText && xhr.statusText.code ? xhr.statusText.code : 'NONE';
                        var bodyRepresentation = void 0;
                        if (typeof body === 'string') {
                            bodyRepresentation = body && body.split('\n', 2).length === 1 ? body : '';
                        } else {
                            bodyRepresentation = (0, _stringify2.default)(body);
                        }
                        var message = xhr.status + ": [" + status + "] " + bodyRepresentation;
                        reject(new transporterror_1.TransportError(message, xhr.status, body, status, headers));
                    }
                };
                for (var headerName in headers) {
                    xhr.setRequestHeader(headerName, headers[headerName]);
                    if (headerName === 'Content-Type' && headers[headerName] === 'application/json') {
                        body = (0, _stringify2.default)(body);
                    }
                }
                xhr.send(body);
            });
        }
    }]);
    return Transport;
}();

exports.Transport = Transport;