"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Network = void 0;
const operation_retrier_1 = require("operation-retrier");
const logger_1 = require("../logger");
const configuration_1 = require("../configuration");
const log = logger_1.Logger.scope('Network');
class Network {
    constructor(config, transport) {
        this.config = config;
        this.transport = transport;
    }
    backoffConfig() {
        return Object.assign(configuration_1.Configuration.backoffConfigDefault, this.config.backoffConfigOverride);
    }
    retryWhenThrottled() {
        if (typeof this.config.retryWhenThrottledOverride !== 'undefined') {
            return this.config.retryWhenThrottledOverride;
        }
        if (typeof configuration_1.Configuration.retryWhenThrottledDefault !== 'undefined') {
            return configuration_1.Configuration.retryWhenThrottledDefault;
        }
        return false;
    }
    executeWithRetry(request, retryWhenThrottled = false) {
        return new Promise((resolve, reject) => {
            let codesToRetryOn = [502, 503, 504];
            if (retryWhenThrottled) {
                codesToRetryOn.push(429);
            }
            let retrier = new operation_retrier_1.Retrier(this.backoffConfig());
            retrier.on('attempt', () => {
                request()
                    .then(result => retrier.succeeded(result))
                    .catch(err => {
                    if (codesToRetryOn.indexOf(err.status) > -1) {
                        retrier.failed(err);
                    }
                    else if (err.message === 'Twilsock disconnected') {
                        // Ugly hack. We must make a proper exceptions for twilsock
                        retrier.failed(err);
                    }
                    else {
                        // Fatal error
                        retrier.removeAllListeners();
                        retrier.cancel();
                        reject(err);
                    }
                });
            });
            retrier.on('succeeded', result => { resolve(result); });
            retrier.on('cancelled', err => reject(err));
            retrier.on('failed', err => reject(err));
            retrier.start();
        });
    }
    async get(url) {
        const headers = { 'X-Twilio-Token': this.config.token };
        log.trace('sending GET request to ', url, ' headers ', headers);
        let response = await this.executeWithRetry(() => this.transport.get(url, headers), this.retryWhenThrottled());
        log.trace('response', response);
        return response;
    }
    async post(url, media, contentType) {
        let headers = {
            'X-Twilio-Token': this.config.token
        };
        if ((typeof FormData === 'undefined' || !(media instanceof FormData)) && contentType) {
            Object.assign(headers, {
                'Content-Type': contentType
            });
        }
        let response;
        log.trace('sending POST request to ', url, ' headers ', headers);
        try {
            response = await this.transport.post(url, headers, media);
        }
        catch (err) {
            if (err instanceof TypeError) {
                log.trace('got error in post response', err);
                throw new TypeError('Posting FormData supported only with browser engine\'s FormData');
            }
            else {
                throw err;
            }
        }
        log.trace('response', response);
        return response;
    }
}
exports.Network = Network;
