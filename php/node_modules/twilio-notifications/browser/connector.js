"use strict";

var _slicedToArray2 = require("babel-runtime/helpers/slicedToArray");

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _toConsumableArray2 = require("babel-runtime/helpers/toConsumableArray");

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _set = require("babel-runtime/core-js/set");

var _set2 = _interopRequireDefault(_set);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
exports.Connector = exports.RegistrationState = void 0;
var events_1 = require("events");
var logger_1 = require("./logger");

var RegistrationState = function () {
    function RegistrationState() {
        var token = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
        var notificationId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
        var messageTypes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new _set2.default();
        (0, _classCallCheck3.default)(this, RegistrationState);

        this.token = token;
        this.notificationId = notificationId;
        this.messageTypes = messageTypes;
    }

    (0, _createClass3.default)(RegistrationState, [{
        key: "clone",
        value: function clone() {
            return new RegistrationState(this.token, this.notificationId, new _set2.default(this.messageTypes));
        }
    }]);
    return RegistrationState;
}();

exports.RegistrationState = RegistrationState;
function setDifference(a, b) {
    return [].concat((0, _toConsumableArray3.default)([].concat((0, _toConsumableArray3.default)(a)).filter(function (x) {
        return !b.has(x);
    })), (0, _toConsumableArray3.default)([].concat((0, _toConsumableArray3.default)(b)).filter(function (x) {
        return !a.has(x);
    })));
}
function hasDifference(a, b) {
    var reasons = new _set2.default();
    if (a.notificationId !== b.notificationId) {
        reasons.add('notificationId');
    }
    if (a.token !== b.token) {
        reasons.add('token');
    }
    if (setDifference(a.messageTypes, b.messageTypes).length > 0) {
        reasons.add('messageType');
    }
    return [reasons.size > 0, reasons];
}

var Connector = function (_events_1$EventEmitte) {
    (0, _inherits3.default)(Connector, _events_1$EventEmitte);

    function Connector(config) {
        (0, _classCallCheck3.default)(this, Connector);

        var _this = (0, _possibleConstructorReturn3.default)(this, (Connector.__proto__ || (0, _getPrototypeOf2.default)(Connector)).call(this));

        _this.config = config;
        _this.desiredState = new RegistrationState();
        _this.currentState = new RegistrationState();
        _this.hasActiveAttempt = false;
        return _this;
    }

    (0, _createClass3.default)(Connector, [{
        key: "subscribe",
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(messageType) {
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                if (!this.desiredState.messageTypes.has(messageType)) {
                                    _context.next = 3;
                                    break;
                                }

                                logger_1.log.debug('message type already registered ', messageType);
                                return _context.abrupt("return");

                            case 3:
                                this.desiredState.messageTypes.add(messageType);
                                _context.next = 6;
                                return this.persistRegistration();

                            case 6:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function subscribe(_x4) {
                return _ref.apply(this, arguments);
            }

            return subscribe;
        }()
    }, {
        key: "unsubscribe",
        value: function () {
            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(messageType) {
                return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                if (this.desiredState.messageTypes.has(messageType)) {
                                    _context2.next = 2;
                                    break;
                                }

                                return _context2.abrupt("return");

                            case 2:
                                this.desiredState.messageTypes.delete(messageType);
                                _context2.next = 5;
                                return this.persistRegistration();

                            case 5:
                            case "end":
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            function unsubscribe(_x5) {
                return _ref2.apply(this, arguments);
            }

            return unsubscribe;
        }()
    }, {
        key: "updateToken",
        value: function updateToken(token) {
            this.desiredState.token = token;
            this.persistRegistration();
        }
    }, {
        key: "persistRegistration",
        value: function () {
            var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
                var _this2 = this;

                var _hasDifference, _hasDifference2, needToUpdate, reasons, stateToPersist, persistedState;

                return _regenerator2.default.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                if (!(!this.config.token || this.config.token.length === 0)) {
                                    _context3.next = 3;
                                    break;
                                }

                                logger_1.log.trace('Can\'t persist registration: token is not set');
                                return _context3.abrupt("return");

                            case 3:
                                if (!this.hasActiveAttempt) {
                                    _context3.next = 6;
                                    break;
                                }

                                logger_1.log.trace('One registration attempt is already in progress');
                                return _context3.abrupt("return");

                            case 6:
                                _hasDifference = hasDifference(this.desiredState, this.currentState), _hasDifference2 = (0, _slicedToArray3.default)(_hasDifference, 2), needToUpdate = _hasDifference2[0], reasons = _hasDifference2[1];

                                if (needToUpdate) {
                                    _context3.next = 9;
                                    break;
                                }

                                return _context3.abrupt("return");

                            case 9:
                                if (!this.currentState.notificationId) {
                                    reasons.delete('notificationId');
                                }
                                logger_1.log.trace('Persisting registration', reasons, this.desiredState);
                                _context3.prev = 11;

                                this.hasActiveAttempt = true;
                                stateToPersist = this.desiredState.clone();

                                if (!(stateToPersist.messageTypes.size > 0)) {
                                    _context3.next = 24;
                                    break;
                                }

                                _context3.next = 17;
                                return this.updateRegistration(stateToPersist, reasons);

                            case 17:
                                persistedState = _context3.sent;

                                this.currentState.token = persistedState.token;
                                this.currentState.notificationId = persistedState.notificationId;
                                this.currentState.messageTypes = persistedState.messageTypes;
                                this.emit('stateChanged', 'registered');
                                _context3.next = 30;
                                break;

                            case 24:
                                _context3.next = 26;
                                return this.removeRegistration();

                            case 26:
                                this.currentState.token = stateToPersist.token;
                                this.currentState.notificationId = stateToPersist.notificationId;
                                this.currentState.messageTypes.clear();
                                this.emit('stateChanged', 'unregistered');

                            case 30:
                                _context3.prev = 30;

                                this.hasActiveAttempt = false;
                                setTimeout(function () {
                                    return _this2.persistRegistration();
                                }, 0);
                                return _context3.finish(30);

                            case 34:
                            case "end":
                                return _context3.stop();
                        }
                    }
                }, _callee3, this, [[11,, 30, 34]]);
            }));

            function persistRegistration() {
                return _ref3.apply(this, arguments);
            }

            return persistRegistration;
        }()
    }, {
        key: "setNotificationId",
        value: function setNotificationId(notificationId) {
            this.desiredState.notificationId = notificationId;
            this.persistRegistration();
        }
    }]);
    return Connector;
}(events_1.EventEmitter);

exports.Connector = Connector;