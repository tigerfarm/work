"use strict";

var _from = require("babel-runtime/core-js/array/from");

var _from2 = _interopRequireDefault(_from);

var _assign = require("babel-runtime/core-js/object/assign");

var _assign2 = _interopRequireDefault(_assign);

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
exports.RegistrarConnector = exports.Connector = void 0;
var operation_retrier_1 = require("operation-retrier");
var logger_1 = require("./logger");
var connector_1 = require("./connector");
Object.defineProperty(exports, "Connector", { enumerable: true, get: function get() {
        return connector_1.Connector;
    } });
var retrierConfig = {
    min: 2000,
    max: 120000,
    randomness: 0.2
};
/**
 * Manages the registrations on ERS service.
 * Deduplicates registrations and manages them automatically
 */

var RegistrarConnector = function (_connector_1$Connecto) {
    (0, _inherits3.default)(RegistrarConnector, _connector_1$Connecto);

    /**
     * Creates new instance of the ERS registrar
     *
     * @param Object configuration
     * @param string notificationId
     * @param string channelType
     * @param Array messageTypes
     */
    function RegistrarConnector(channelType, context, transport, config) {
        (0, _classCallCheck3.default)(this, RegistrarConnector);

        var _this = (0, _possibleConstructorReturn3.default)(this, (RegistrarConnector.__proto__ || (0, _getPrototypeOf2.default)(RegistrarConnector)).call(this, config));

        _this.channelType = channelType;
        _this.context = context;
        _this.transport = transport;
        return _this;
    }

    (0, _createClass3.default)(RegistrarConnector, [{
        key: "updateRegistration",
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(registration, reasons) {
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                if (!reasons.has('notificationId')) {
                                    _context.next = 3;
                                    break;
                                }

                                _context.next = 3;
                                return this.removeRegistration();

                            case 3:
                                if (!(!registration.notificationId || !registration.notificationId.length)) {
                                    _context.next = 5;
                                    break;
                                }

                                return _context.abrupt("return", registration);

                            case 5:
                                _context.next = 7;
                                return this.register(registration);

                            case 7:
                                return _context.abrupt("return", registration);

                            case 8:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function updateRegistration(_x, _x2) {
                return _ref.apply(this, arguments);
            }

            return updateRegistration;
        }()
    }, {
        key: "removeRegistration",
        value: function () {
            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
                var _this2 = this;

                var url, headers;
                return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                if (this.registrationId) {
                                    _context2.next = 2;
                                    break;
                                }

                                return _context2.abrupt("return");

                            case 2:
                                url = this.config.registrarUrl + "/" + this.registrationId + "?productId=" + this.context.productId;
                                headers = {
                                    'Content-Type': 'application/json',
                                    'X-Twilio-Token': this.config.token
                                };
                                _context2.prev = 4;

                                logger_1.log.trace('Removing registration for ', this.channelType);
                                _context2.next = 8;
                                return new operation_retrier_1.Retrier((0, _assign2.default)(retrierConfig, { maxAttemptsCount: 3 })).run(function () {
                                    return _this2.transport.delete(url, headers);
                                });

                            case 8:
                                logger_1.log.debug('Registration removed for', this.channelType);
                                _context2.next = 15;
                                break;

                            case 11:
                                _context2.prev = 11;
                                _context2.t0 = _context2["catch"](4);

                                logger_1.log.error('Failed to remove of registration ', this.channelType, _context2.t0);
                                throw _context2.t0;

                            case 15:
                            case "end":
                                return _context2.stop();
                        }
                    }
                }, _callee2, this, [[4, 11]]);
            }));

            function removeRegistration() {
                return _ref2.apply(this, arguments);
            }

            return removeRegistration;
        }()
    }, {
        key: "register",
        value: function () {
            var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(registration) {
                var _this3 = this;

                var registrarRequest, url, headers, response;
                return _regenerator2.default.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                logger_1.log.trace('Registering', this.channelType, registration);
                                registrarRequest = {
                                    endpoint_platform: this.context.platform,
                                    channel_type: this.channelType,
                                    version: this.context.protocolVersion.toString(),
                                    message_types: (0, _from2.default)(registration.messageTypes),
                                    data: {
                                        registration_id: registration.notificationId
                                    },
                                    ttl: 'PT24H'
                                };
                                url = this.config.registrarUrl + "?productId=" + this.context.productId;
                                headers = {
                                    'Content-Type': 'application/json',
                                    'X-Twilio-Token': registration.token
                                };

                                logger_1.log.trace('Creating registration for channel ', this.channelType);
                                _context3.prev = 5;
                                _context3.next = 8;
                                return new operation_retrier_1.Retrier(retrierConfig).run(function () {
                                    return _this3.transport.post(url, headers, registrarRequest);
                                });

                            case 8:
                                response = _context3.sent;

                                this.registrationId = response.body.id;
                                logger_1.log.debug('Registration created: ', response);
                                _context3.next = 17;
                                break;

                            case 13:
                                _context3.prev = 13;
                                _context3.t0 = _context3["catch"](5);

                                logger_1.log.error('Registration failed: ', _context3.t0);
                                throw _context3.t0;

                            case 17:
                            case "end":
                                return _context3.stop();
                        }
                    }
                }, _callee3, this, [[5, 13]]);
            }));

            function register(_x3) {
                return _ref3.apply(this, arguments);
            }

            return register;
        }()
    }]);
    return RegistrarConnector;
}(connector_1.Connector);

exports.RegistrarConnector = RegistrarConnector;