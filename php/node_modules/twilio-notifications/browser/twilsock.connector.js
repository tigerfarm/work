"use strict";

var _from = require("babel-runtime/core-js/array/from");

var _from2 = _interopRequireDefault(_from);

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
exports.TwilsockConnector = void 0;
var uuid = require("uuid");
var connector_1 = require("./connector");
var DEFAULT_TTL = 60 * 60 * 48;
/**
 * Registrar connector implementation for twilsock
 */

var TwilsockConnector = function (_connector_1$Connecto) {
    (0, _inherits3.default)(TwilsockConnector, _connector_1$Connecto);

    function TwilsockConnector(context, twilsock, config) {
        (0, _classCallCheck3.default)(this, TwilsockConnector);

        var _this = (0, _possibleConstructorReturn3.default)(this, (TwilsockConnector.__proto__ || (0, _getPrototypeOf2.default)(TwilsockConnector)).call(this, config));

        _this.twilsock = twilsock;
        _this.context = context;
        context.id = uuid.v4();
        _this.twilsock.on('stateChanged', function (state) {
            if (state !== 'connected') {
                _this.emit('transportReady', false);
            }
        });
        _this.twilsock.on('registered', function (id) {
            if (context && id === context.id && twilsock.state === 'connected') {
                _this.emit('transportReady', true);
            }
        });
        return _this;
    }

    (0, _createClass3.default)(TwilsockConnector, [{
        key: "setNotificationId",
        value: function setNotificationId() {}
    }, {
        key: "updateToken",
        value: function updateToken(token) {
            // no need to do anything here, twilsock backend handles it on it's own
            // so just ignoring here
        }
    }, {
        key: "updateContextRequest",
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(messageTypes) {
                var context;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                context = {
                                    product_id: this.context.productId,
                                    notification_protocol_version: 4,
                                    endpoint_platform: this.context.platform,
                                    message_types: messageTypes
                                };

                                this.emit('transportReady', false);
                                _context.next = 4;
                                return this.twilsock.setNotificationsContext(this.context.id, context);

                            case 4:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function updateContextRequest(_x) {
                return _ref.apply(this, arguments);
            }

            return updateContextRequest;
        }()
    }, {
        key: "updateRegistration",
        value: function () {
            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(registration, reasons) {
                return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                if (reasons.has('messageType')) {
                                    _context2.next = 2;
                                    break;
                                }

                                return _context2.abrupt("return");

                            case 2:
                                _context2.next = 4;
                                return this.updateContextRequest((0, _from2.default)(registration.messageTypes));

                            case 4:
                                return _context2.abrupt("return", registration);

                            case 5:
                            case "end":
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            function updateRegistration(_x2, _x3) {
                return _ref2.apply(this, arguments);
            }

            return updateRegistration;
        }()
    }, {
        key: "removeRegistration",
        value: function removeRegistration() {
            return this.twilsock.removeNotificationsContext(this.context.id);
        }
    }]);
    return TwilsockConnector;
}(connector_1.Connector);

exports.TwilsockConnector = TwilsockConnector;