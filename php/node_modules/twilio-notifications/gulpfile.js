const gulp = require('gulp');
const gutil = require('gulp-util');
const mocha = require('gulp-mocha');
const tslint = require('gulp-tslint');
const browserify = require('browserify');
const babelify = require('babelify');
const babel = require('gulp-babel');
const source = require('vinyl-source-stream');
const buffer = require('vinyl-buffer');
const exit = require('gulp-exit');
const insert = require('gulp-insert');
const runSequence = require('run-sequence');
const del = require('del');
const fs = require('fs');
const rename = require('gulp-rename');
const uglify = require('gulp-uglify-es').default;
const uglifySaveLicense = require('uglify-save-license');
const cheerio = require('cheerio');
const tap = require('gulp-tap');
const derequire = require('gulp-derequire');
const isparta = require('isparta');
const typescript = require('gulp-typescript');
const path = require('path');

const pkg = require('./package');

const cp = require('child_process');
const jsdoc = 'node_modules/jsdoc/jsdoc.js';

const product = {
    source: {
        name: pkg.name + '.ts',
        lib: 'src/**/*.ts'
    },
    compiled: {
        dir: 'lib',
        lib: 'lib/**/*.js'
    },
    browser: {
        dir: 'browser'
    },
    packaged: {
        dir: 'dist',
        name: pkg.name + '.js',
        minified: pkg.name + '.min.js'
    },
    bundled: {
        dir: 'build',
        name: pkg.name + '-bundle.js'
    },
    license: 'LICENSE'
};

const tests = {
    lint: {
        files: [
            'src/*.ts',
            '!gulpfile.js'
        ]
    },
    unit: {
        files: 'test/unit/spec/*.ts',
        index: 'test/unit/index.ts'
    },
    integration: {
        files: 'test/integration/**/*.ts',
        index: 'test/integration/index.ts'
    }
};

const coverage = {
    dir: product.packaged.dir + '/coverage'
};

const docs = {
    dir: product.packaged.dir + '/docs',
    conf: 'jsdoc.json',
    files: [
        './lib/client.js'
    ],
    publicConstructors: ['Client'],
    privateConstructors: []
};

gulp.task('lint', function() {
    return gulp
        .src(tests.lint.files)
        .pipe(tslint({
            formatter: 'prose'
        }))
        .pipe(tslint.report({
            allowWarnings: false,
            emitError: true,
            summarizeFailureOutput: true
        }));
});

gulp.task('istanbul-setup', function() {
    return gulp.src([product.source.lib])
        .pipe(istanbul({
            instrumenter: isparta.Instrumenter,
            includeUntested: true
        }))
        .pipe(istanbul.hookRequire());
});

gulp.task('unit-test', function() {
    return gulp.src(tests.unit.index, { read: false })
        .pipe(mocha({
            require: 'ts-node/register',
            reporter: 'spec',
            exit: true,
            suppress: false
        }));
    // .pipe(istanbul.writeReports({
    //   dir: coverage.dir,
    //   reporters: ['cobertura', 'lcov', 'text'],
    //   reportOpts: { dir: coverage.dir }
    // }));
});

gulp.task('integration-test', function() {
    return gulp.src(tests.integration.index, { read: false })
        .pipe(mocha({
            require: 'ts-node/register',
            reporter: 'spec',
            exit: true,
            suppress: true,
            timeout: 5000
        }));
});

gulp.task('build-node', function() {
    const project = typescript.createProject('tsconfig.json');
    return project.src()
        .pipe(project())
        .once("error", function() { this.once("finish", () => process.exit(1)); })
        .pipe(gulp.dest('lib'));
});

gulp.task('build-browser', function() {
    return gulp.src(product.compiled.lib)
        .pipe(babel())
        .pipe(gulp.dest('browser'));
});

gulp.task('bundle', function() {
    const licenseContents = fs.readFileSync(product.license);
    return browserify({
        debug: false,
        standalone: 'Twilio.Notifications',
        entries: ['./lib/client.js']
    })
        .transform(babelify)
        .bundle()
        .pipe(source(product.packaged.name))
        .pipe(buffer())
        .pipe(derequire())
        .pipe(insert.prepend(`/* ${pkg.name}.js ${pkg.version}\n${licenseContents}*/\n\n`))
        .pipe(gulp.dest(product.packaged.dir));

});

gulp.task('minify', function() {
    return gulp
        .src(path.join(product.packaged.dir, product.packaged.name))
        .pipe(uglify({
            output: {
                ascii_only: true, comments: uglifySaveLicense
            }
        }))
        .once("error", function (err) {
            console.error('Failed to minify', err.cause);
            this.once("finish", () => process.exit(1));
        })
        .pipe(rename(product.packaged.minified))
        .pipe(gulp.dest(product.packaged.dir));
});

gulp.task('package', gulp.series(
    'build-node',
    'bundle',
    'minify'));

gulp.task('build', gulp.series(
    'lint',
    'build-node',
    'build-browser',
    'package'));

gulp.task('generate-doc', function (cb) {
    cp.exec(['npx', 'jsdoc@3.6.6',
        '-d', docs.dir,
        '-c', docs.conf,
        docs.files.join(' '),
        './README.md',
        '-t ./node_modules/ink-docstrap/template'].join(' '), cb);
});

gulp.task('prettify-doc', function() {
    return gulp.src(docs.dir + '/*.html')
        .pipe(tap(function (file) {
            let $ = cheerio.load(file.contents.toString());
            let filename = file.path.slice(file.base.length);
            let className = filename.split('.html')[0];
            let div;

            // Prefix public constructors.
            if (docs.publicConstructors.indexOf(className) > -1) {
                div = $('.container-overview');
                let name = $('h4.name', div);
                name.html(name.html().replace(/new /, 'new <span style="color: #999">Twilio.Notifications.</span>'));
            }

            // Remove private constructors.
            if (docs.privateConstructors.indexOf(className) > -1) {
                div = $('.container-overview');
                $('h2', div).remove();
                $('h4.name', div).remove();
                $('div.description', div).remove();
                $('h5:contains(Parameters:)', div).remove();
                $('table.params', div).remove();
            }

            file.contents = new Buffer($.html());
            return file;
        }))
        .pipe(gulp.dest(docs.dir));

});

gulp.task('doc', gulp.series(
    'generate-doc',
    'prettify-doc'));

gulp.task('clean', () => del([
    product.compiled.dir,
    product.browser.dir,
    product.packaged.dir,
]));

gulp.task('default', gulp.series(
    'clean',
    'lint',
    'unit-test',
    'build',
    'package',
    'doc'));

