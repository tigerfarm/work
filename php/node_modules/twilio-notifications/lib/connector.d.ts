/// <reference types="node" />
import { EventEmitter } from 'events';
import { Configuration } from './configuration';
declare type ChannelType = 'twilsock' | 'gcm' | 'fcm' | 'apn';
declare type UpdateReason = 'token' | 'notificationId' | 'messageType';
declare class RegistrationState {
    token: string;
    notificationId: string;
    messageTypes: Set<string>;
    constructor(token?: string, notificationId?: string, messageTypes?: Set<string>);
    clone(): RegistrationState;
}
declare abstract class Connector extends EventEmitter {
    protected readonly config: Configuration;
    protected readonly desiredState: RegistrationState;
    protected readonly currentState: RegistrationState;
    private hasActiveAttempt;
    constructor(config: Configuration);
    subscribe(messageType: string): Promise<void>;
    unsubscribe(messageType: string): Promise<void>;
    updateToken(token: string): void;
    private persistRegistration;
    setNotificationId(notificationId: string): void;
    protected abstract updateRegistration(registration: RegistrationState, reasons: Set<UpdateReason>): Promise<RegistrationState>;
    protected abstract removeRegistration(): Promise<void>;
}
export { UpdateReason, RegistrationState, ChannelType, Connector };
