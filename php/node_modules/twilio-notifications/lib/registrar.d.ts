/// <reference types="node" />
import { EventEmitter } from 'events';
import { Connector, ChannelType } from './connector';
/**
 * Provides an interface to the ERS registrar
 */
declare class Registrar extends EventEmitter {
    private readonly config;
    private readonly connectors;
    /**
     * Creates the new instance of registrar client
     */
    constructor(productId: string, transport: any, twilsock: any, config: any);
    /**
     *  Sets notification ID.
     *  If new URI is different from previous, it triggers updating of registration for given channel
     *
     *  @param {string} channelType channel type (apn|gcm|fcm|twilsock)
     *  @param {string} notificationId The notification ID
     */
    setNotificationId(channelType: ChannelType, notificationId: string): void;
    /**
     * Subscribe for given type of message
     *
     * @param {String} messageType Message type identifier
     * @param {String} channelType Channel type, can be 'twilsock', 'gcm' or 'fcm'
     * @public
     */
    subscribe(messageType: string, channelType: ChannelType): Promise<void>;
    /**
     * Remove subscription
     * @param {String} messageType Message type
     * @param {String} channelType Channel type (twilsock or gcm/fcm)
     */
    unsubscribe(messageType: string, channelType: ChannelType): Promise<void>;
    updateToken(token: string): void;
    /**
     * @param {String} type Channel type
     * @throws {Error} Error with description
     */
    connector(type: ChannelType): Connector;
    /**
     * Returns platform string limited to max 128 chars
     */
    private detectPlatform;
}
export { ChannelType, Registrar };
