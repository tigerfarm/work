/// <reference types="node" />
import { EventEmitter } from 'events';
/**
 * Provides retrier service
 */
declare class Retrier extends EventEmitter {
    private readonly minDelay;
    private maxDelay;
    private readonly initialDelay;
    private readonly maxAttemptsCount;
    private readonly maxAttemptsTime;
    private readonly randomness;
    private prevDelay;
    private currDelay;
    private timeout;
    private resolve;
    private reject;
    private inProgress;
    private attemptNum;
    private startTimestamp;
    /**
     * Creates a new Retrier instance
     */
    constructor(options: {
        min: number;
        max: number;
        initial?: number;
        maxAttemptsCount?: number;
        maxAttemptsTime?: number;
        randomness?: number;
    });
    private attempt;
    private nextDelay;
    private randomize;
    private scheduleAttempt;
    private cleanup;
    start(): Promise<unknown>;
    cancel(): void;
    succeeded(arg?: any): void;
    failed(err: Error, nextAttemptDelayOverride?: number): void;
    run<T>(handler: () => Promise<T>): Promise<T>;
}
export { Retrier };
export default Retrier;
