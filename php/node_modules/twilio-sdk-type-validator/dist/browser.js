/*
@license
Copyright (c) 2021 Twilio Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


*/
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

require('core-js/modules/es.array.slice.js');
require('core-js/modules/es.object.to-string.js');
require('core-js/modules/es.array.from.js');
require('core-js/modules/es.string.iterator.js');
require('core-js/modules/es.symbol.js');
require('core-js/modules/es.symbol.description.js');
require('core-js/modules/es.symbol.iterator.js');
require('core-js/modules/es.array.iterator.js');
require('core-js/modules/web.dom-collections.iterator.js');
var _typeof = require('@babel/runtime/helpers/typeof');
require('core-js/modules/es.function.name.js');
require('core-js/modules/es.number.is-integer.js');
require('core-js/modules/es.number.constructor.js');
var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
require('core-js/modules/es.object.entries.js');
require('core-js/modules/es.array.concat.js');
require('core-js/modules/es.reflect.construct.js');
var _toConsumableArray = require('@babel/runtime/helpers/toConsumableArray');
var _classCallCheck = require('@babel/runtime/helpers/classCallCheck');
var _inherits = require('@babel/runtime/helpers/inherits');
var _possibleConstructorReturn = require('@babel/runtime/helpers/possibleConstructorReturn');
var _getPrototypeOf = require('@babel/runtime/helpers/getPrototypeOf');
require('core-js/modules/es.array.includes.js');
require('core-js/modules/es.promise.js');
require('core-js/modules/es.array.join.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _typeof__default = /*#__PURE__*/_interopDefaultLegacy(_typeof);
var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);
var _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);
var _classCallCheck__default = /*#__PURE__*/_interopDefaultLegacy(_classCallCheck);
var _inherits__default = /*#__PURE__*/_interopDefaultLegacy(_inherits);
var _possibleConstructorReturn__default = /*#__PURE__*/_interopDefaultLegacy(_possibleConstructorReturn);
var _getPrototypeOf__default = /*#__PURE__*/_interopDefaultLegacy(_getPrototypeOf);

var custom = function custom() {
  for (var _len = arguments.length, checks = new Array(_len), _key = 0; _key < _len; _key++) {
    checks[_key] = arguments[_key];
  }

  return {
    checks: checks
  };
};

function _createForOfIteratorHelper$3(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$3(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray$3(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$3(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$3(o, minLen); }

function _arrayLikeToArray$3(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
var type = function type() {
  for (var _len = arguments.length, checks = new Array(_len), _key = 0; _key < _len; _key++) {
    checks[_key] = arguments[_key];
  }

  return custom(function (value) {
    var isValid = false;
    var expectedTypes = [];

    var _iterator = _createForOfIteratorHelper$3(checks),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var _type = _step.value;

        if (typeof _type === "string") {
          isValid = isValid || _typeof__default['default'](value) === _type;
          expectedTypes.push("of type ".concat(_type));
          continue;
        }

        isValid = isValid || value instanceof _type;
        expectedTypes.push("an instance of ".concat(_type.name));
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return [isValid, expectedTypes];
  });
};

function _createForOfIteratorHelper$2(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$2(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray$2(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$2(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen); }

function _arrayLikeToArray$2(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
var literal = function literal() {
  for (var _len = arguments.length, checks = new Array(_len), _key = 0; _key < _len; _key++) {
    checks[_key] = arguments[_key];
  }

  return custom(function (value) {
    var isValid = false;
    var expectedTypes = [];

    var _iterator = _createForOfIteratorHelper$2(checks),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var type = _step.value;
        isValid = isValid || value === type;
        expectedTypes.push(typeof type === "string" ? "\"".concat(type, "\"") : "".concat(type));
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return [isValid, expectedTypes];
  });
};

var nonEmptyString = custom(function (value) {
  return [typeof value === "string" && value.length > 0, "a non-empty string"];
});

var nonNegativeInteger = custom(function (value) {
  return [typeof value === "number" && Number.isInteger(value) && value >= 0, "a non-negative integer"];
});

var pureObject = custom(function (value) {
  return [_typeof__default['default'](value) === "object" && value !== null && !Array.isArray(value), "a pure object (non-null and non-array)"];
});

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf__default['default'](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default['default'](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default['default'](this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _createForOfIteratorHelper$1(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray$1(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$1(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen); }

function _arrayLikeToArray$1(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
var runtimeTypeValidation = function runtimeTypeValidation(rules, values) {
  if (values.length > rules.length) {
    throw new Error("Expected at most ".concat(rules.length, " argument(s), but got ").concat(values.length));
  }

  while (values.length < rules.length) {
    values.push(undefined);
  }

  var _iterator = _createForOfIteratorHelper$1(values.entries()),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _step$value = _slicedToArray__default['default'](_step.value, 2),
          index = _step$value[0],
          value = _step$value[1];

      var _validateValue = validateValue(rules[index], value),
          _validateValue2 = _slicedToArray__default['default'](_validateValue, 4),
          isValid = _validateValue2[0],
          received = _validateValue2[1],
          expected = _validateValue2[2],
          delimeter = _validateValue2[3];

      if (isValid) {
        continue;
      }

      var argumentIndex = index + 1;
      throw new Error("Argument ".concat(argumentIndex, " is expected to be ").concat(expected).concat(delimeter, " but got ").concat(received));
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
};
var stringifyReceivedType = function stringifyReceivedType(value) {
  var _value$constructor;

  var receivedType;
  var types = ["undefined", "boolean", "number", "bigint", "string"];

  if (types.includes(_typeof__default['default'](value))) {
    receivedType = typeof value === "string" ? "\"".concat(value, "\"") : "".concat(value);
  }

  if (_typeof__default['default'](value) === "object" && (value === null || value === void 0 ? void 0 : (_value$constructor = value.constructor) === null || _value$constructor === void 0 ? void 0 : _value$constructor.name) !== "Object") {
    var _value$constructor2;

    receivedType = value === null ? "null" : "instance of ".concat(value === null || value === void 0 ? void 0 : (_value$constructor2 = value.constructor) === null || _value$constructor2 === void 0 ? void 0 : _value$constructor2.name);
  }

  if (!receivedType) {
    receivedType = _typeof__default['default'](value);
  }

  return receivedType;
};
/* eslint-disable @typescript-eslint/no-explicit-any */

var validateConstructorTypes = function validateConstructorTypes() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  var finalRuleSet = convertRuleArguments(args);
  return function (ctor) {
    return /*#__PURE__*/function (_ctor) {
      _inherits__default['default'](_class, _ctor);

      var _super = _createSuper(_class);

      function _class() {
        _classCallCheck__default['default'](this, _class);

        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        runtimeTypeValidation(finalRuleSet, args);
        return _super.call.apply(_super, [this].concat(args));
      }

      return _class;
    }(ctor);
  };
};
/* eslint-enable @typescript-eslint/no-explicit-any */

var validateTypes = function validateTypes() {
  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    args[_key3] = arguments[_key3];
  }

  var finalRuleSet = convertRuleArguments(args);
  return function (target, propertyKey, descriptor) {
    if (typeof descriptor.value !== "function") {
      throw new Error("The validateTypes decorator can only be applied to methods");
    }

    var originalMethod = descriptor.value;

    descriptor.value = function () {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      runtimeTypeValidation(finalRuleSet, args);
      return originalMethod.apply(this, args);
    };
  };
};
var validateTypesAsync = function validateTypesAsync() {
  for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
    args[_key5] = arguments[_key5];
  }

  var finalRuleSet = convertRuleArguments(args);
  return function (target, propertyKey, descriptor) {
    if (typeof descriptor.value !== "function") {
      throw new Error("The validateTypesAsync decorator can only be applied to methods");
    }

    var originalMethod = descriptor.value;

    descriptor.value = function () {
      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
      }

      try {
        runtimeTypeValidation(finalRuleSet, args);
      } catch (e) {
        return Promise.reject(e);
      }

      return originalMethod.apply(this, args);
    };
  };
};
var convertRuleArguments = function convertRuleArguments(args) {
  var finalRuleDefinitionSet = [];

  var _iterator2 = _createForOfIteratorHelper$1(args),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var arg = _step2.value;
      finalRuleDefinitionSet.push(convertRuleArgument(arg));
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  return finalRuleDefinitionSet;
};
var convertRuleArgument = function convertRuleArgument(arg) {
  var finalArgumentRuleDefinitions = [];
  var declaredRules = Array.isArray(arg) ? arg : [arg];

  var _iterator3 = _createForOfIteratorHelper$1(declaredRules),
      _step3;

  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var rule = _step3.value;

      if (typeof rule === "string" || typeof rule === "function") {
        finalArgumentRuleDefinitions.push(type(rule));
        continue;
      }

      finalArgumentRuleDefinitions.push(rule);
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }

  return finalArgumentRuleDefinitions;
};
var validateValue = function validateValue(ruleDefinitions, value) {
  var expectedTypes = [];
  var customReceivedType;
  var isValid = false;

  var _iterator4 = _createForOfIteratorHelper$1(ruleDefinitions),
      _step4;

  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var definition = _step4.value;

      var _iterator5 = _createForOfIteratorHelper$1(definition.checks),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var check = _step5.value;

          var _check = check(value),
              _check2 = _slicedToArray__default['default'](_check, 3),
              checkPassed = _check2[0],
              typeDescription = _check2[1],
              _receivedType = _check2[2];

          isValid = isValid || checkPassed;

          if (!customReceivedType && _receivedType) {
            customReceivedType = _receivedType;
          }

          if (typeDescription) {
            expectedTypes = typeof typeDescription === "string" ? [].concat(_toConsumableArray__default['default'](expectedTypes), [typeDescription]) : [].concat(_toConsumableArray__default['default'](expectedTypes), _toConsumableArray__default['default'](typeDescription));
          }
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }

  if (isValid) {
    return [true];
  }

  var receivedType = customReceivedType || stringifyReceivedType(value);
  var lastIndex = expectedTypes.length - 1;
  var expectedTypesString = lastIndex > 0 ? "".concat(expectedTypes.slice(0, lastIndex).join(", "), " or ").concat(expectedTypes[lastIndex]) : expectedTypes.join(", ");
  return [false, receivedType, expectedTypesString, lastIndex > 1 ? ";" : ","];
};

var objectSchema = function objectSchema(name, schema) {
  return custom(function (object) {
    if (_typeof__default['default'](object) !== "object" || object === null || Array.isArray(object)) {
      return [false, "valid ".concat(name, " (should be a pure object)")];
    }

    for (var _i = 0, _Object$entries = Object.entries(schema); _i < _Object$entries.length; _i++) {
      var _Object$entries$_i = _slicedToArray__default['default'](_Object$entries[_i], 2),
          key = _Object$entries$_i[0],
          rules = _Object$entries$_i[1];

      var _validateValue = validateValue(convertRuleArgument(rules), object[key]),
          _validateValue2 = _slicedToArray__default['default'](_validateValue, 3),
          isValid = _validateValue2[0],
          received = _validateValue2[1],
          expected = _validateValue2[2];

      if (!isValid) {
        return [false, "valid ".concat(name, " (key \"").concat(key, "\" should be ").concat(expected, ")"), "malformed ".concat(name, " (key \"").concat(key, "\" is ").concat(received, ")")];
      }
    }

    return [true];
  });
};

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
var array = function array(name, rules) {
  return custom(function (value) {
    if (!Array.isArray(value)) {
      return [false, "an array of ".concat(name)];
    }

    var _iterator = _createForOfIteratorHelper(value.entries()),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var _step$value = _slicedToArray__default['default'](_step.value, 2),
            key = _step$value[0],
            valueOfKey = _step$value[1];

        var _validateValue = validateValue(convertRuleArgument(rules), valueOfKey),
            _validateValue2 = _slicedToArray__default['default'](_validateValue, 3),
            isValid = _validateValue2[0],
            received = _validateValue2[1],
            expected = _validateValue2[2];

        if (!isValid) {
          return [false, "a valid array of ".concat(name, " (index ").concat(key, " should be ").concat(expected, ")"), "malformed array of ".concat(name, " (index ").concat(key, " is ").concat(received, ")")];
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return [true];
  });
};

exports.array = array;
exports.custom = custom;
exports.literal = literal;
exports.nonEmptyString = nonEmptyString;
exports.nonNegativeInteger = nonNegativeInteger;
exports.objectSchema = objectSchema;
exports.pureObject = pureObject;
exports.runtimeTypeValidation = runtimeTypeValidation;
exports.stringifyReceivedType = stringifyReceivedType;
exports.type = type;
exports.validateConstructorTypes = validateConstructorTypes;
exports.validateTypes = validateTypes;
exports.validateTypesAsync = validateTypesAsync;
//# sourceMappingURL=browser.js.map
