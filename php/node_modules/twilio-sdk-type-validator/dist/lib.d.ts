type TypeRule = "undefined" | "object" | "boolean" | "number" | "bigint" | "string" | "symbol" | "function" | {
    new (...args: unknown[]): unknown;
};
type RuleFunction = (value: unknown) => [
    boolean,
    (string | string[])?,
    string?
];
type RuleDefinition = {
    checks: RuleFunction[];
};
type RuleArgument = TypeRule | RuleDefinition | (TypeRule | RuleDefinition)[];
type Decorator = (target: unknown, propertyKey: string, descriptor: PropertyDescriptor) => void;
declare const runtimeTypeValidation: (rules: RuleDefinition[][], values: unknown[]) => void;
declare const stringifyReceivedType: (value: unknown) => string;
/* eslint-disable @typescript-eslint/no-explicit-any */
declare const validateConstructorTypes: (...args: RuleArgument[]) => <T extends new (...args: any[]) => any>(ctor: T) => T;
/* eslint-enable @typescript-eslint/no-explicit-any */
declare const validateTypes: (...args: RuleArgument[]) => Decorator;
declare const validateTypesAsync: (...args: RuleArgument[]) => Decorator;
declare const custom: (...checks: RuleFunction[]) => RuleDefinition;
declare const type: (...checks: TypeRule[]) => RuleDefinition;
declare const literal: (...checks: unknown[]) => RuleDefinition;
declare const nonEmptyString: RuleDefinition;
declare const nonNegativeInteger: RuleDefinition;
declare const pureObject: RuleDefinition;
declare const objectSchema: (name: string, schema: Record<string, RuleArgument>) => RuleDefinition;
declare const array: (name: string, rules: RuleArgument) => RuleDefinition;
export { custom, type, literal, nonEmptyString, nonNegativeInteger, pureObject, objectSchema, array, runtimeTypeValidation, validateConstructorTypes, validateTypes, validateTypesAsync, stringifyReceivedType };
