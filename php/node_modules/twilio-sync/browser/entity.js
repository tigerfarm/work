"use strict";

var _getIterator2 = require("babel-runtime/core-js/get-iterator");

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _map = require("babel-runtime/core-js/map");

var _map2 = _interopRequireDefault(_map);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });

var SyncEntity = function () {
    function SyncEntity(services, removalHandler) {
        (0, _classCallCheck3.default)(this, SyncEntity);

        this.services = services;
        this.removalHandler = removalHandler;
        this.subscriptionState = 'none';
        this._attachedListeners = new _map2.default();
    }

    (0, _createClass3.default)(SyncEntity, [{
        key: "_advanceLastEventId",
        value: function _advanceLastEventId(eventId, revision) {}
    }, {
        key: "reportFailure",
        value: function reportFailure(err) {
            if (err.status === 404) {
                // assume that 404 means that entity has been removed while we were away
                this.onRemoved(false);
            } else {
                this.broadcastEventToListeners('failure', err);
            }
        }
        /**
         * Subscribe to changes of data entity
         * @private
         */

    }, {
        key: "_subscribe",
        value: function _subscribe() {
            this.services.router.subscribe(this.sid, this);
        }
        /**
         * Unsubscribe from changes of current data entity
         * @private
         */

    }, {
        key: "_unsubscribe",
        value: function _unsubscribe() {
            this.services.router.unsubscribe(this.sid);
        }
    }, {
        key: "_setSubscriptionState",
        value: function _setSubscriptionState(newState) {
            this.subscriptionState = newState;
            this.broadcastEventToListeners('_subscriptionStateChanged', newState);
        }
        /**
         * @public
         */

    }, {
        key: "close",
        value: function close() {
            this._unsubscribe();
            if (this.removalHandler != null) {
                this.removalHandler(this.type, this.sid, this.uniqueName);
            }
        }
    }, {
        key: "attach",
        value: function attach(closeable) {
            var uuid = closeable.listenerUuid;
            var existingRecord = this._attachedListeners.get(uuid);
            if (existingRecord) {
                return;
            }
            if (!this._attachedListeners.size) {
                // the first one to arrive
                this._subscribe();
            }
            this._attachedListeners.set(uuid, closeable);
        }
    }, {
        key: "detach",
        value: function detach(listenerUuid) {
            this._attachedListeners.delete(listenerUuid);
            if (!this._attachedListeners.size) {
                // last one out, turn off lights, shut the door
                this.close(); // invokes unsubscribe and removal handler
            }
        }
    }, {
        key: "broadcastEventToListeners",
        value: function broadcastEventToListeners(eventName, args) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = (0, _getIterator3.default)(this._attachedListeners.values()), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var listener = _step.value;

                    listener.emit(eventName, args);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
    }]);
    return SyncEntity;
}();

exports.SyncEntity = SyncEntity;
exports.default = SyncEntity;