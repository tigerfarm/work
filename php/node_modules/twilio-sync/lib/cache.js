"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tree_1 = require("./utils/tree");
class Entry {
    constructor(value, revision) {
        this.value = value;
        this.revision = (revision || 0);
    }
    get isValid() {
        return true;
    }
}
class Tombstone {
    constructor(revision) {
        this.revision = revision;
    }
    get isValid() {
        return false;
    }
}
class Cache {
    constructor() {
        this.items = new tree_1.TreeMap();
    }
    store(key, value, revision) {
        let entry = this.items.get(key);
        if (entry && entry.revision > revision) {
            if (entry.isValid) {
                return entry.value;
            }
            return null;
        }
        this.items.set(key, new Entry(value, revision));
        return value;
    }
    delete(key, revision, force = false) {
        let curr = this.items.get(key);
        if (!curr || curr.revision < revision ||
            (curr && force === true) /* forced delete when revision is unknown */) {
            this.items.set(key, new Tombstone(revision));
        }
    }
    isKnown(key, revision) {
        let curr = this.items.get(key);
        return curr && curr.revision >= revision;
    }
    get(key) {
        let entry = this.items.get(key);
        if (entry && entry.isValid) {
            return entry.value;
        }
        return null;
    }
    has(key) {
        let entry = this.items.get(key);
        return entry && entry.isValid;
    }
    forEach(callbackfn) {
        if (this.items) {
            for (let [key, entry] of this.items) {
                if (entry.isValid) {
                    callbackfn(key, entry.value);
                }
            }
        }
    }
}
exports.Cache = Cache;
exports.default = Cache;
