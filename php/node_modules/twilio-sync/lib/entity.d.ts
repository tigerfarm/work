import { Services, Network, Router, Storage } from './interfaces/services';
import { SyncError } from './utils/syncerror';
import { Closeable } from './closeable';
interface EntityServices {
    network: Network;
    router: Router;
    storage: Storage;
}
declare type RemovalHandler = (type: string, sid: string, uniqueName: string) => void;
export declare type SubscriptionState = 'none' | 'request_in_flight' | 'response_in_flight' | 'established';
declare abstract class SyncEntity {
    protected readonly services: EntityServices;
    protected readonly removalHandler: RemovalHandler;
    private subscriptionState;
    private readonly _attachedListeners;
    protected constructor(services: EntityServices, removalHandler: RemovalHandler);
    abstract get sid(): string;
    abstract get uniqueName(): string;
    abstract get type(): string;
    abstract get lastEventId(): number;
    abstract get indexName(): string;
    abstract get queryString(): string;
    abstract _update(update: any, isStrictlyOrdered: boolean): void;
    _advanceLastEventId(eventId: number, revision?: string): void;
    protected abstract onRemoved(locally: boolean): void;
    reportFailure(err: SyncError): void;
    /**
     * Subscribe to changes of data entity
     * @private
     */
    _subscribe(): void;
    /**
     * Unsubscribe from changes of current data entity
     * @private
     */
    _unsubscribe(): void;
    _setSubscriptionState(newState: SubscriptionState): void;
    /**
     * @public
     */
    close(): void;
    attach(closeable: Closeable): void;
    detach(listenerUuid: string): void;
    protected broadcastEventToListeners(eventName: string, args: any): void;
}
export { Services, EntityServices, RemovalHandler, SyncEntity };
export default SyncEntity;
