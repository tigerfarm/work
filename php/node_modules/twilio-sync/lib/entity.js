"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class SyncEntity {
    constructor(services, removalHandler) {
        this.services = services;
        this.removalHandler = removalHandler;
        this.subscriptionState = 'none';
        this._attachedListeners = new Map();
    }
    _advanceLastEventId(eventId, revision) {
    }
    reportFailure(err) {
        if (err.status === 404) {
            // assume that 404 means that entity has been removed while we were away
            this.onRemoved(false);
        }
        else {
            this.broadcastEventToListeners('failure', err);
        }
    }
    /**
     * Subscribe to changes of data entity
     * @private
     */
    _subscribe() {
        this.services.router.subscribe(this.sid, this);
    }
    /**
     * Unsubscribe from changes of current data entity
     * @private
     */
    _unsubscribe() {
        this.services.router.unsubscribe(this.sid);
    }
    _setSubscriptionState(newState) {
        this.subscriptionState = newState;
        this.broadcastEventToListeners('_subscriptionStateChanged', newState);
    }
    /**
     * @public
     */
    close() {
        this._unsubscribe();
        if (this.removalHandler != null) {
            this.removalHandler(this.type, this.sid, this.uniqueName);
        }
    }
    attach(closeable) {
        const uuid = closeable.listenerUuid;
        const existingRecord = this._attachedListeners.get(uuid);
        if (existingRecord) {
            return;
        }
        if (!this._attachedListeners.size) {
            // the first one to arrive
            this._subscribe();
        }
        this._attachedListeners.set(uuid, closeable);
    }
    detach(listenerUuid) {
        this._attachedListeners.delete(listenerUuid);
        if (!this._attachedListeners.size) {
            // last one out, turn off lights, shut the door
            this.close(); // invokes unsubscribe and removal handler
        }
    }
    broadcastEventToListeners(eventName, args) {
        for (let listener of this._attachedListeners.values()) {
            listener.emit(eventName, args);
        }
    }
}
exports.SyncEntity = SyncEntity;
exports.default = SyncEntity;
