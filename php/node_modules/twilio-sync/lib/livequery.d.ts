/// <reference types="node" />
import { EventEmitter } from 'events';
import { SyncEntity, EntityServices, RemovalHandler } from './entity';
import { Closeable } from './closeable';
export interface InsightsServices extends EntityServices {
}
export declare class InsightsItem {
    key: string;
    value: object;
}
export interface ItemsSnapshot {
    [key: string]: object;
}
export interface InsightsQueryResponse {
    query_id: string;
    last_event_id: number;
    items?: [{
        key: string;
        data: object;
        revision: number;
    }];
}
export interface LiveQueryDescriptor {
    indexName: string;
    sid: string;
    queryExpression: string;
    queryUri: string;
    last_event_id: number;
}
export declare type LiveQueryCreator = (indexName: string, queryExpression: string) => Promise<LiveQuery>;
export declare class LiveQueryImpl extends SyncEntity {
    private readonly descriptor;
    private readonly cache;
    constructor(descriptor: LiveQueryDescriptor, services: InsightsServices, removalHandler: RemovalHandler, items?: any);
    get sid(): string;
    get uniqueName(): any;
    get type(): string;
    static get type(): string;
    get lastEventId(): number;
    get indexName(): string;
    get queryString(): string;
    get queryUri(): string;
    get liveQueryDescriptor(): LiveQueryDescriptor;
    protected onRemoved(): void;
    getItems(): ItemsSnapshot;
    /**
     * @private
     */
    _update(message: any, isStrictlyOrdered: boolean): void;
    private handleItemMutated;
    private handleItemRemoved;
    private handleBatchUpdate;
    private shouldIgnoreEvent;
    /**
     * @private
     */
    _advanceLastEventId(eventId: number, revision?: string): void;
}
export declare function queryItems(params: any): Promise<InsightsQueryResponse>;
/**
 * @class
 * @alias LiveQuery
 * @classdesc Represents a long-running query against Flex data wherein the returned result set
 *     subsequently receives pushed updates whenever new (or updated) records would match the
 *     given expression. Updated results are presented row-by-row until this query is explicitly
 *     closed.
 *
 *     Use the {@link Client#liveQuery} method to create a live query.
 *
 * @property {String} sid The immutable identifier of this query object, assigned by the system.
 *
 * @fires LiveQuery#itemUpdated
 * @fires LiveQuery#itemRemoved
 */
export declare class LiveQuery extends Closeable {
    private readonly liveQueryImpl;
    static get type(): string;
    get type(): string;
    get lastEventId(): number;
    get sid(): string;
    /**
     * @private
     */
    constructor(liveQueryImpl: LiveQueryImpl);
    /**
     * Closes this query instance and unsubscribes from further service events.
     * This will eventually stop the physical inflow of updates over the network, when all other instances of this query are closed as well.
     * @public
     */
    close(): void;
    /**
     * @returns {LiveQuery#ItemsSnapshot} A snapshot of items matching the current query expression.
     * @public
     */
    getItems(): ItemsSnapshot;
}
/**
 * @class
 * @alias InstantQuery
 * @classdesc Allows repetitive quick searches against a specific Flex data. Unlike a
 * LiveQuery, this result set does not subscribe to any updates and therefore receives no events
 * beyond the initial result set.
 *
 * Use the {@link Client#instantQuery} method to create an Instant Query.
 *
 * @fires InstantQuery#searchResult
 */
export declare class InstantQuery extends EventEmitter {
    private indexName;
    private queryUri;
    private readonly insightsUri;
    private readonly liveQueryCreator;
    private readonly network;
    private queryExpression;
    private items;
    static get type(): string;
    get type(): string;
    /**
     * @private
     */
    constructor(params: any);
    /**
     * Spawns a new search request. The result will be provided asynchronously via the {@link InstantQuery#event:searchResult}
     * event.
     * @param {String} queryExpression A query expression to be executed against the given data index. For more information
     * on the syntax read {@link Client#liveQuery}.
     * @returns {Promise<void>} A promise that resolves when query result has been received.
     * @public
     */
    search(queryExpression: string): Promise<void>;
    /**
     * Instantiates a LiveQuery object based on the last known query expression that was passed to the
     * {@link InstantQuery#search} method. This LiveQuery will start receiving updates with new results,
     * while current object can be still used to execute repetitive searches.
     * @returns {Promise<LiveQuery>} A promise which resolves when the LiveQuery object is ready.
     * @public
     */
    subscribe(): Promise<LiveQuery>;
    /**
     * @returns {LiveQuery#ItemsSnapshot} A snapshot of items matching current query expression.
     * @public
     */
    getItems(): ItemsSnapshot;
    /**
     * Set new index name
     * @param {String} indexName New index name to set
     * @returns void
     * @public
     */
    updateIndexName(indexName: string): void;
    private generateQueryUri;
}
export default LiveQuery;
/**
 * @class InsightsItem
 * @classdesc An individual result from a LiveQuery or InstantQuery result set.
 * @property {String} key The identifier that maps to this item within the search result.
 * @property {Object} value The contents of the item.
 */
/**
 * A result set, i.e. a collection of items that matched a LiveQuery or InstantQuery expression. Each result is a
 * key-value pair, where each key identifies its object uniquely. These results are equivalent to a set of
 * {@link InsightsItem}-s.
 * @typedef {Object.<string, Object>} LiveQuery#ItemsSnapshot
 */
/**
 * Fired when an item has been added or updated.
 * @event LiveQuery#itemUpdated
 * @param {InsightsItem} item Updated item.
 * @example
 * liveQuery.on('itemUpdated', function(item) {
 *   console.log('Item ' + item.key + ' was updated');
 *   console.log('Item value: ', item.value);
 * });
 */
/**
 * Fired when an existing item has been removed.
 * @event LiveQuery#itemRemoved
 * @param {Object} args Arguments provided with the event.
 * @param {String} args.key The key of the removed item.
 * @example
 * liveQuery.on('itemRemoved', function(args) {
 *   console.log('Item ' + args.key + ' was removed');
 * });
 */
/**
 * Fired when a search result is ready.
 * @event InstantQuery#searchResult
 * @param {LiveQuery#ItemsSnapshot} items A snapshot of items matching current query expression.
 * @example
 * instantQuery.on('searchResult', function(items) {
 *    Object.entries(items).forEach(([key, value]) => {
 *      console.log('Search result item key: ' + key);
 *      console.log('Search result item value: ' + value);
 *    });
 * });
 */
