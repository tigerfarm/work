"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sanitize_1 = require("./utils/sanitize");
const uri_1 = require("./utils/uri");
const syncerror_1 = require("./utils/syncerror");
const logger_1 = require("./utils/logger");
const entity_1 = require("./entity");
const mapitem_1 = require("./mapitem");
const paginator_1 = require("./paginator");
const cache_1 = require("./cache");
const mergingqueue_1 = require("./mergingqueue");
const closeable_1 = require("./closeable");
class SyncMapImpl extends entity_1.SyncEntity {
    /**
     * @private
     */
    constructor(services, descriptor, removalHandler) {
        super(services, removalHandler);
        const updateRequestReducer = (acc, input) => (typeof input.ttl === 'number') ? { ttl: input.ttl }
            : acc;
        this.updateMergingQueue = new mergingqueue_1.NamespacedMergingQueue(updateRequestReducer);
        this.cache = new cache_1.Cache();
        this.descriptor = descriptor;
        this.descriptor.date_updated = new Date(this.descriptor.date_updated);
        if (descriptor.items) {
            descriptor.items.forEach(itemDescriptor => {
                itemDescriptor.date_updated = new Date(itemDescriptor.date_updated);
                this.cache.store(itemDescriptor.key, new mapitem_1.MapItem(itemDescriptor), itemDescriptor.last_event_id);
            });
        }
    }
    // private props
    get uri() {
        return this.descriptor.url;
    }
    get links() {
        return this.descriptor.links;
    }
    get revision() {
        return this.descriptor.revision;
    }
    get lastEventId() {
        return this.descriptor.last_event_id;
    }
    get dateExpires() {
        return this.descriptor.date_expires;
    }
    static get type() {
        return 'map';
    }
    get type() {
        return 'map';
    }
    // below properties are specific to Insights only
    get indexName() {
        return undefined;
    }
    get queryString() {
        return undefined;
    }
    // public props, documented along with class description
    get sid() {
        return this.descriptor.sid;
    }
    get uniqueName() {
        return this.descriptor.unique_name || null;
    }
    get dateUpdated() {
        return this.descriptor.date_updated;
    }
    async set(key, value, itemMetadataUpdates) {
        const input = itemMetadataUpdates || {};
        sanitize_1.validateOptionalTtl(input.ttl);
        return this.updateMergingQueue.squashAndAdd(key, input, (input) => this._putItemUnconditionally(key, value, input.ttl));
    }
    async get(key) {
        if (key === null || key === undefined) {
            throw new syncerror_1.SyncError('Item key may not be empty', 400, 54209);
        }
        if (this.cache.has(key)) {
            return this.cache.get(key);
        }
        else {
            return this._getItemFromServer(key);
        }
    }
    async _getItemFromServer(key) {
        let result = await this.queryItems({ key: key });
        if (result.items.length < 1) {
            throw new syncerror_1.SyncError(`The specified Map Item does not exist`, 404, 54201);
        }
        else {
            return result.items[0];
        }
    }
    async mutate(key, mutator, itemMetadataUpdates) {
        const input = itemMetadataUpdates || {};
        sanitize_1.validateOptionalTtl(input.ttl);
        return this.updateMergingQueue.add(key, input, (input) => this._putItemWithIfMatch(key, mutator, input.ttl));
    }
    async update(key, obj, itemMetadataUpdates) {
        return this.mutate(key, remote => Object.assign(remote, obj), itemMetadataUpdates);
    }
    async _putItemUnconditionally(key, data, ttl) {
        const result = await this._putItemToServer(key, data, undefined, ttl);
        const item = result.item;
        this._handleItemMutated(item.key, item.url, item.last_event_id, item.revision, item.data, item.date_updated, item.date_expires, result.added, false);
        return this.cache.get(item.key);
    }
    async _putItemWithIfMatch(key, mutatorFunction, ttl) {
        const currentItem = await this.get(key)
            .catch(error => {
            if (error.status === 404) {
                // PUT /Items/myKey with `If-Match: -1` acts as "put if not exists"
                return new mapitem_1.MapItem({ key: key, data: {}, last_event_id: -1, revision: '-1', url: null, date_updated: null, date_expires: null });
            }
            else {
                throw error;
            }
        });
        let data = mutatorFunction(sanitize_1.deepClone(currentItem.data));
        if (data) {
            let ifMatch = currentItem.revision;
            try {
                const result = await this._putItemToServer(key, data, ifMatch, ttl);
                const item = result.item;
                this._handleItemMutated(item.key, item.url, item.last_event_id, item.revision, item.data, item.date_updated, item.date_expires, result.added, false);
                return this.cache.get(item.key);
            }
            catch (error) {
                if (error.status === 412) {
                    await this._getItemFromServer(key);
                    return this._putItemWithIfMatch(key, mutatorFunction, ttl);
                }
                else {
                    throw error;
                }
            }
        }
        else {
            return currentItem;
        }
    }
    async _putItemToServer(key, data, ifMatch, ttl) {
        const url = new uri_1.UriBuilder(this.links.items).pathSegment(key).build();
        const requestBody = { data };
        if (ttl !== undefined) {
            requestBody.ttl = ttl;
        }
        try {
            const response = await this.services.network.put(url, requestBody, ifMatch);
            const mapItemDescriptor = response.body;
            mapItemDescriptor.data = data; // The server does not return the data in the response
            mapItemDescriptor.date_updated = new Date(mapItemDescriptor.date_updated);
            const added = response.status.code === 201;
            return { added, item: mapItemDescriptor };
        }
        catch (error) {
            if (error.status === 404) {
                this.onRemoved(false);
            }
            throw error;
        }
    }
    async remove(key) {
        const item = await this.get(key);
        const previousItemData = sanitize_1.deepClone(item.data);
        const response = await this.services.network.delete(item.uri);
        this._handleItemRemoved(key, response.body.last_event_id, previousItemData, new Date(response.body.date_updated), false);
    }
    /**
     * @private
     */
    async queryItems(args) {
        args = args || {};
        const uri = new uri_1.UriBuilder(this.links.items)
            .queryParam('From', args.from)
            .queryParam('PageSize', args.limit)
            .queryParam('Key', args.key)
            .queryParam('PageToken', args.pageToken)
            .queryParam('Order', args.order)
            .build();
        let response = await this.services.network.get(uri);
        let items = response.body.items.map(el => {
            el.date_updated = new Date(el.date_updated);
            let itemInCache = this.cache.get(el.key);
            if (itemInCache) {
                this._handleItemMutated(el.key, el.url, el.last_event_id, el.revision, el.data, el.date_updated, el.date_expires, false, true);
            }
            else {
                this.cache.store(el.key, new mapitem_1.MapItem(el), el.last_event_id);
            }
            return this.cache.get(el.key);
        });
        const meta = response.body.meta;
        return new paginator_1.Paginator(items, pageToken => this.queryItems({ pageToken }), meta.previous_token, meta.next_token);
    }
    async getItems(args) {
        args = args || {};
        sanitize_1.validatePageSize(args.pageSize);
        args.limit = args.pageSize || args.limit || 50;
        args.order = args.order || 'asc';
        return this.queryItems(args);
    }
    shouldIgnoreEvent(key, eventId) {
        return this.cache.isKnown(key, eventId);
    }
    /**
     * Handle update from the server
     * @private
     */
    _update(update, isStrictlyOrdered) {
        update.date_created = new Date(update.date_created);
        switch (update.type) {
            case 'map_item_added':
            case 'map_item_updated':
                {
                    this._handleItemMutated(update.item_key, update.item_url, update.id, update.item_revision, update.item_data, update.date_created, undefined, // orchestration events do not include date_expires
                    update.type === 'map_item_added', true);
                }
                break;
            case 'map_item_removed':
                {
                    this._handleItemRemoved(update.item_key, update.id, update.item_data, update.date_created, true);
                }
                break;
            case 'map_removed':
                {
                    this.onRemoved(false);
                }
                break;
        }
        if (isStrictlyOrdered) {
            this._advanceLastEventId(update.id, update.map_revision);
        }
    }
    _advanceLastEventId(eventId, revision) {
        if (this.lastEventId < eventId) {
            this.descriptor.last_event_id = eventId;
            if (revision) {
                this.descriptor.revision = revision;
            }
        }
    }
    _updateRootDateUpdated(dateUpdated) {
        if (!this.descriptor.date_updated || dateUpdated.getTime() > this.descriptor.date_updated.getTime()) {
            this.descriptor.date_updated = dateUpdated;
            this.services.storage.update(this.type, this.sid, this.uniqueName, { date_updated: dateUpdated });
        }
    }
    _handleItemMutated(key, url, lastEventId, revision, data, dateUpdated, dateExpires, added, remote) {
        if (this.shouldIgnoreEvent(key, lastEventId)) {
            logger_1.default.trace('Item ', key, ' update skipped, current:', this.lastEventId, ', remote:', lastEventId);
            return;
        }
        this._updateRootDateUpdated(dateUpdated);
        const item = this.cache.get(key);
        if (!item) {
            const newItem = new mapitem_1.MapItem({
                key: key,
                url,
                last_event_id: lastEventId,
                revision,
                data,
                date_updated: dateUpdated,
                date_expires: dateExpires,
            });
            this.cache.store(key, newItem, lastEventId);
            this.emitItemMutationEvent(newItem, remote, added);
            return;
        }
        const previousItemData = sanitize_1.deepClone(item.data);
        item.update(lastEventId, revision, data, dateUpdated);
        this.cache.store(key, item, lastEventId);
        if (dateExpires !== undefined) {
            item.updateDateExpires(dateExpires);
        }
        this.emitItemMutationEvent(item, remote, false, previousItemData);
    }
    emitItemMutationEvent(item, remote, added, previousItemData = null) {
        const eventName = added ? 'itemAdded' : 'itemUpdated';
        const args = { item, isLocal: !remote };
        if (!added) {
            args.previousItemData = previousItemData;
        }
        this.broadcastEventToListeners(eventName, args);
    }
    /**
     * @private
     */
    _handleItemRemoved(key, eventId, oldData, dateUpdated, remote) {
        this._updateRootDateUpdated(dateUpdated);
        this.cache.delete(key, eventId);
        this.broadcastEventToListeners('itemRemoved', { key: key, isLocal: !remote, previousItemData: oldData });
    }
    onRemoved(locally) {
        this._unsubscribe();
        this.removalHandler(this.type, this.sid, this.uniqueName);
        this.broadcastEventToListeners('removed', { isLocal: locally });
    }
    async setTtl(ttl) {
        sanitize_1.validateMandatoryTtl(ttl);
        try {
            const requestBody = { ttl };
            const response = await this.services.network.post(this.uri, requestBody);
            this.descriptor.date_expires = response.body.date_expires;
        }
        catch (error) {
            if (error.status === 404) {
                this.onRemoved(false);
            }
            throw error;
        }
    }
    async setItemTtl(key, ttl) {
        sanitize_1.validateMandatoryTtl(ttl);
        let existingItem = await this.get(key);
        const requestBody = { ttl };
        const response = await this.services.network.post(existingItem.uri, requestBody);
        existingItem.updateDateExpires(response.body.date_expires);
    }
    async removeMap() {
        await this.services.network.delete(this.uri);
        this.onRemoved(true);
    }
}
exports.SyncMapImpl = SyncMapImpl;
/**
 * @class
 * @alias Map
 * @classdesc Represents a Sync Map, which stores an unordered set of key:value pairs.
 * Use the {@link Client#map} method to obtain a reference to a Sync Map.
 * Information about rate limits can be found {@link https://www.twilio.com/docs/sync/limits|here}.
 * @property {String} sid An immutable identifier (a SID) assigned by the system on creation.
 * @property {String} [uniqueName=null] - An optional immutable identifier that may be assigned by the
 * programmer to this map on creation. Unique among other Maps.
 * @property {Date} dateUpdated Date when the Map was last updated.
 *
 * @fires Map#removed
 * @fires Map#itemAdded
 * @fires Map#itemRemoved
 * @fires Map#itemUpdated
 */
class SyncMap extends closeable_1.Closeable {
    constructor(syncMapImpl) {
        super();
        this.syncMapImpl = syncMapImpl;
        this.syncMapImpl.attach(this);
    }
    // private props
    get uri() {
        return this.syncMapImpl.uri;
    }
    get links() {
        return this.syncMapImpl.links;
    }
    get revision() {
        return this.syncMapImpl.revision;
    }
    get lastEventId() {
        return this.syncMapImpl.lastEventId;
    }
    get dateExpires() {
        return this.syncMapImpl.dateExpires;
    }
    static get type() {
        return SyncMapImpl.type;
    }
    get type() {
        return SyncMapImpl.type;
    }
    // public props, documented along with class description
    get sid() {
        return this.syncMapImpl.sid;
    }
    get uniqueName() {
        return this.syncMapImpl.uniqueName;
    }
    get dateUpdated() {
        return this.syncMapImpl.dateUpdated;
    }
    /**
     * Add a new item to the map with the given key:value pair. Overwrites any data that might already exist at that key.
     * @param {String} key Unique item identifier.
     * @param {Object} data Data to be set.
     * @param {Map#ItemMetadata} [itemMetadataUpdates] New item metadata.
     * @returns {Promise<MapItem>} Newly added item, or modified one if already exists, with the latest known data.
     * @public
     * @example
     * map.set('myKey', { name: 'John Smith' }, { ttl: 86400 })
     *   .then(function(item) {
     *     console.log('Map Item set() successful, item data:', item.data);
     *   })
     *   .catch(function(error) {
     *     console.error('Map Item set() failed', error);
     *   });
     */
    async set(key, data, itemMetadataUpdates) {
        this.ensureNotClosed();
        return this.syncMapImpl.set(key, data, itemMetadataUpdates);
    }
    /**
     * Retrieve an item by key.
     * @param {String} key Identifies the desired item.
     * @returns {Promise<MapItem>} A promise that resolves when the item has been fetched.
     * This promise will be rejected if item was not found.
     * @public
     * @example
     * map.get('myKey')
     *   .then(function(item) {
     *     console.log('Map Item get() successful, item data:', item.data)
     *   })
     *   .catch(function(error) {
     *     console.error('Map Item get() failed', error);
     *   });
     */
    async get(key) {
        this.ensureNotClosed();
        return this.syncMapImpl.get(key);
    }
    /**
     * Schedules a modification to this Map Item that will apply a mutation function.
     * If no Item with the given key exists, it will first be created, having the default data (<code>{}</code>).
     * @param {String} key Selects the map item to be mutated.
     * @param {Map~Mutator} mutator A function that outputs a new data based on the existing data.
     * May be called multiple times, particularly if this Map Item is modified concurrently by remote code.
     * If the mutation ultimately succeeds, the Map Item will have made the particular transition described
     * by this function.
     * @param {Map#ItemMetadata} [itemMetadataUpdates] New item metadata.
     * @returns {Promise<MapItem>} Resolves with the most recent item state, the output of a successful
     * mutation or a state that prompted graceful cancellation (mutator returned <code>null</code>).
     * @public
     * @example
     * var mutatorFunction = function(currentData) {
     *     currentData.viewCount = (currentData.viewCount || 0) + 1;
     *     return currentData;
     * };
     * map.mutate('myKey', mutatorFunction, { ttl: 86400 })
     *   .then(function(item) {
     *     console.log('Map Item mutate() successful, new data:', item.data)
     *   })
     *   .catch(function(error) {
     *     console.error('Map Item mutate() failed', error);
     *   });
     */
    async mutate(key, mutator, itemMetadataUpdates) {
        this.ensureNotClosed();
        return this.syncMapImpl.mutate(key, mutator, itemMetadataUpdates);
    }
    /**
     * Modify a map item by appending new fields (or by overwriting existing ones) with the values from
     * the provided Object. Creates a new item if no item by this key exists, copying all given fields and values
     * into it.
     * This is equivalent to
     * <pre>
     * map.mutate('myKey', function(currentData) {
     *   return Object.assign(currentData, obj));
     * });
     * </pre>
     * @param {String} key Selects the map item to update.
     * @param {Object} obj Specifies the particular (top-level) attributes that will receive new values.
     * @param {Map#ItemMetadata} [itemMetadataUpdates] New item metadata.
     * @returns {Promise<MapItem>} A promise resolving to the modified item in its new state.
     * @public
     * @example
     * // Say, the Map Item (key: 'myKey') data is { name: 'John Smith' }
     * map.update('myKey', { age: 34 }, { ttl: 86400 })
     *   .then(function(item) {
     *     // Now the Map Item data is { name: 'John Smith', age: 34 }
     *     console.log('Map Item update() successful, new data:', item.data);
     *   })
     *   .catch(function(error) {
     *     console.error('Map Item update() failed', error);
     *   });
     */
    async update(key, obj, itemMetadataUpdates) {
        this.ensureNotClosed();
        return this.syncMapImpl.update(key, obj, itemMetadataUpdates);
    }
    /**
     * Delete an item, given its key.
     * @param {String} key Selects the item to delete.
     * @returns {Promise<void>} A promise to remove an item.
     * The promise will be rejected if 'key' is undefined or an item was not found.
     * @public
     * @example
     * map.remove('myKey')
     *   .then(function() {
     *     console.log('Map Item remove() successful');
     *   })
     *   .catch(function(error) {
     *     console.error('Map Item remove() failed', error);
     *   });
     */
    async remove(key) {
        this.ensureNotClosed();
        return this.syncMapImpl.remove(key);
    }
    /**
     * Get a complete list of items from the map.
     * Information about the query limits can be found {@link https://www.twilio.com/docs/sync/limits|here}.
     * @param {Object} [queryOptions] Arguments for query.
     * @param {String} [queryOptions.from] Item key, which should be used as the offset. If undefined, starts from the beginning or end depending on
     * queryOptions.order.
     * @param {Number} [queryOptions.pageSize=50] Result page size.
     * @param {'asc'|'desc'} [queryOptions.order='asc'] Lexicographical order of results.
     * @return {Promise<Paginator<MapItem>>}
     * @public
     * @example
     * var pageHandler = function(paginator) {
     *   paginator.items.forEach(function(item) {
     *     console.log('Item ' + item.key + ': ', item.data);
     *   });
     *   return paginator.hasNextPage ? paginator.nextPage().then(pageHandler)
     *                                : null;
     * };
     * map.getItems({ from: 'myKey', order: 'asc' })
     *   .then(pageHandler)
     *   .catch(function(error) {
     *     console.error('Map getItems() failed', error);
     *   });
     */
    async getItems(queryOptions) {
        this.ensureNotClosed();
        return this.syncMapImpl.getItems(queryOptions);
    }
    /**
     * Update the time-to-live of the map.
     * @param {Number} ttl Specifies the TTL in seconds after which the map is subject to automatic deletion. The value 0 means infinity.
     * @return {Promise<void>} A promise that resolves after the TTL update was successful.
     * @public
     * @example
     * map.setTtl(3600)
     *   .then(function() {
     *     console.log('Map setTtl() successful');
     *   })
     *   .catch(function(error) {
     *     console.error('Map setTtl() failed', error);
     *   });
     */
    async setTtl(ttl) {
        this.ensureNotClosed();
        return this.syncMapImpl.setTtl(ttl);
    }
    /**
     * Update the time-to-live of a map item.
     * @param {Number} key Item key.
     * @param {Number} ttl Specifies the TTL in seconds after which the map item is subject to automatic deletion. The value 0 means infinity.
     * @return {Promise<void>} A promise that resolves after the TTL update was successful.
     * @public
     * @example
     * map.setItemTtl('myKey', 86400)
     *   .then(function() {
     *     console.log('Map setItemTtl() successful');
     *   })
     *   .catch(function(error) {
     *     console.error('Map setItemTtl() failed', error);
     *   });
     */
    async setItemTtl(key, ttl) {
        this.ensureNotClosed();
        return this.syncMapImpl.setItemTtl(key, ttl);
    }
    /**
     * Delete this map. It will be impossible to restore it.
     * @return {Promise<void>} A promise that resolves when the map has been deleted.
     * @public
     * @example
     * map.removeMap()
     *   .then(function() {
     *     console.log('Map removeMap() successful');
     *   })
     *   .catch(function(error) {
     *     console.error('Map removeMap() failed', error);
     *   });
     */
    async removeMap() {
        this.ensureNotClosed();
        await this.syncMapImpl.removeMap();
    }
    /**
     * Conclude work with the map instance and remove all event listeners attached to it.
     * Any subsequent operation on this object will be rejected with error.
     * Other local copies of this map will continue operating and receiving events normally.
     * @public
     * @example
     * map.close();
     */
    close() {
        super.close();
        this.syncMapImpl.detach(this.listenerUuid);
    }
}
exports.SyncMap = SyncMap;
exports.default = SyncMap;
/**
 * Contains Map Item metadata.
 * @typedef {Object} Map#ItemMetadata
 * @property {Number} [ttl] Specifies the time-to-live in seconds after which the map item is subject to automatic deletion.
 * The value 0 means infinity.
 */
/**
 * Applies a transformation to the item data. May be called multiple times on the
 * same datum in case of collisions with remote code.
 * @callback Map~Mutator
 * @param {Object} currentData The current data of the item in the cloud.
 * @return {Object} The desired new data for the item or <code>null</code> to gracefully cancel the mutation.
 */
/**
 * Fired when a new item appears in the map, whether its creator was local or remote.
 * @event Map#itemAdded
 * @param {Object} args Arguments provided with the event.
 * @param {MapItem} args.item Added item.
 * @param {Boolean} args.isLocal Equals 'true' if item was added by local actor, 'false' otherwise.
 * @example
 * map.on('itemAdded', function(args) {
 *   console.log('Map item ' + args.item.key + ' was added');
 *   console.log('args.item.data:', args.item.data);
 *   console.log('args.isLocal:', args.isLocal);
 * });
 */
/**
 * Fired when a map item is updated (not added or removed, but changed), whether the updater was local or remote.
 * @event Map#itemUpdated
 * @param {Object} args Arguments provided with the event.
 * @param {MapItem} args.item Updated item.
 * @param {Boolean} args.isLocal Equals 'true' if item was updated by local actor, 'false' otherwise.
 * @param {Object} args.previousItemData Contains a snapshot of the item data before the update.
 * @example
 * map.on('itemUpdated', function(args) {
 *   console.log('Map item ' + args.item.key + ' was updated');
 *   console.log('args.item.data:', args.item.data);
 *   console.log('args.isLocal:', args.isLocal);
 *   console.log('args.previousItemData:', args.previousItemData);
 * });
 */
/**
 * Fired when a map item is removed, whether the remover was local or remote.
 * @event Map#itemRemoved
 * @param {Object} args Arguments provided with the event.
 * @param {String} args.key The key of the removed item.
 * @param {Boolean} args.isLocal Equals 'true' if item was removed by local actor, 'false' otherwise.
 * @param {Object} args.previousItemData Contains a snapshot of item data before removal.
 * @example
 * map.on('itemRemoved', function(args) {
 *   console.log('Map item ' + args.key + ' was removed');
 *   console.log('args.previousItemData:', args.previousItemData);
 *   console.log('args.isLocal:', args.isLocal);
 * });
 */
/**
 * Fired when a map is deleted entirely, by any actor local or remote.
 * @event Map#removed
 * @param {Object} args Arguments provided with the event.
 * @param {Boolean} args.isLocal Equals 'true' if map was removed by local actor, 'false' otherwise.
 * @example
 * map.on('removed', function(args) {
 *   console.log('Map ' + map.sid + ' was removed');
 *   console.log('args.isLocal:', args.isLocal);
 * });
 */
