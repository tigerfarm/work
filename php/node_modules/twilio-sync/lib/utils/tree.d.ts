interface Map<K, V> {
    get(key: K): V;
    set(key: K, value: V): void;
}
interface TreeMapInterface<K, V> extends Map<K, V>, Iterable<[K, V]> {
}
declare type Less<T> = (x: T, y: T) => boolean;
declare type Equal<T> = (x: T, y: T) => boolean;
/**
 * @property length
 */
declare class TreeMap<K, V> implements TreeMapInterface<K, V> {
    private isLessThan;
    private isEqual;
    private root;
    private count;
    constructor(less?: Less<K>, equal?: Equal<K>);
    get size(): number;
    clear(): void;
    set(key: K, value: V): void;
    insert(key: K, value: V): void;
    get(key: K): V;
    delete(key: K): void;
    private getNode;
    private rebalance;
    private rotateLeft;
    private rotateRight;
    [Symbol.iterator](): IterableIterator<[K, V]>;
    getIterator(key?: K): IterableIterator<[K, V]>;
    getReverseIterator(key?: K): IterableIterator<[K, V]>;
}
export { Map, Less, Equal, TreeMapInterface, TreeMap };
