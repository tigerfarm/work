"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class TokenStorage {
    static get sessionStorage() {
        try {
            return global['sessionStorage'];
        }
        catch (err) {
            return null;
        }
    }
    static get window() {
        try {
            return global['window'];
        }
        catch (err) {
            return null;
        }
    }
    static storeToken(continuationToken, productId) {
        if (TokenStorage.canStore) {
            TokenStorage.sessionStorage.setItem(TokenStorage.getKeyName(productId), continuationToken);
        }
    }
    static getStoredToken(productId) {
        if (!TokenStorage.canStore) {
            return null;
        }
        return TokenStorage.sessionStorage.getItem(TokenStorage.getKeyName(productId));
    }
    static initialize() {
        if (TokenStorage.canStore) {
            const flag = TokenStorage.sessionStorage.getItem(TokenStorage.initializedFlag);
            // Duplicated tab, cleaning up all stored keys
            if (flag) {
                this.clear();
            }
            TokenStorage.sessionStorage.setItem(TokenStorage.initializedFlag, 'true');
            // When leaving page or refreshing
            TokenStorage.window.addEventListener('unload', () => {
                TokenStorage.sessionStorage.removeItem(TokenStorage.initializedFlag);
            });
        }
    }
    static clear() {
        if (TokenStorage.canStore) {
            let keyToDelete = [];
            for (let i = 0; i < TokenStorage.sessionStorage.length; i++) {
                const key = TokenStorage.sessionStorage.key(i);
                // We manually removed startsWith here due to some problems with babel polyfill setup.
                // Restore it when we figure out what's wrong.
                //if (key.startsWith(TokenStorage.tokenStoragePrefix)) {
                if (key.indexOf(TokenStorage.tokenStoragePrefix) === 0) {
                    keyToDelete.push(key);
                }
            }
            keyToDelete.forEach(key => TokenStorage.sessionStorage.removeItem(key));
            TokenStorage.sessionStorage.removeItem(TokenStorage.initializedFlag);
        }
    }
    static getKeyName(productId) {
        return `${TokenStorage.tokenStoragePrefix}${productId}`;
    }
    static get canStore() {
        return TokenStorage.sessionStorage && TokenStorage.window;
    }
}
exports.TokenStorage = TokenStorage;
TokenStorage.initializedFlag = 'twilio_twilsock_token_storage';
TokenStorage.tokenStoragePrefix = 'twilio_continuation_token_';
TokenStorage.initialize();
